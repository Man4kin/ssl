
// СтандартныеПодсистемы

// БазоваяФункциональность

// СписокЗначений для накапливания пакета сообщений в журнал регистрации, 
// формируемых в клиентской бизнес-логике.
Перем СообщенияДляЖурналаРегистрации Экспорт; 

// Кэшируется, чтобы в данном сеансе повторно не предлагать установку
Перем ПредлагатьУстановкуРасширенияРаботыСФайлами Экспорт;

// Конец БазоваяФункциональность

// ОбновлениеКонфигурации

// Информация о доступном обновлении конфигурации, обнаруженном в Интернете
// при запуске программы.
Перем ДоступноеОбновлениеКонфигурации Экспорт;
// Структура с параметрами помощника обновления конфигурации.
Перем НастройкиОбновленияКонфигурации Экспорт; 

// Конец ОбновлениеКонфигурации

// РаботаСФайлами
Перем КомпонентаTwain Экспорт; // Twain компонента для работы со сканером
// Конец РаботаСФайлами

// ФайловыеФункции
Перем ПроверкаДоступаКРабочемуКаталогуВыполнена Экспорт; // Кэшируется, чтобы в данном сеансе повторно не делать проверку доступа к каталогу на диске
// Конец ФайловыеФункции

// РезервноеКопированиеИБ

// Признак выполнения резервного копирования при завершении сеанса
Перем ОповещатьОРезервномКопированииПриЗавершенииСеанса Экспорт;
// структура с параметрами доступа к ИБ при отложенном копировании
Перем ПараметрыАдминистратораОбновления Экспорт;
// максимальная дата отложенного резервного копирования
Перем ДатаОтложенногоРезервногоКопирования Экспорт;

// Конец РезервноеКопированиеИБ

// Конец СтандартныеПодсистемы

Процедура ПередНачаломРаботыСистемы(Отказ) 
	
	// СтандартныеПодсистемы
	
	// Пользователи
	Если ЗначениеЗаполнено(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ОшибкаАвторизации) Тогда
		Предупреждение(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ОшибкаАвторизации);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Конец Пользователи
	
	// ОбновлениеВерсииИБ
	Отказ = НЕ ОбновлениеИнформационнойБазыКлиент.ВозможноВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ
	
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	
	ОбщегоНазначенияКлиент.УстановитьПроизвольныйЗаголовокПриложения();
	
	// ПроверкаЛегальностиПолученияОбновления
	Если НЕ ПроверкаЛегальностиПолученияОбновленияКлиент.ПодтвердитьЛегальностьПолученияОбновления() Тогда
		Возврат;
	КонецЕсли;
	// Конец ПроверкаЛегальностиПолученияОбновления
	
	// ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	// Конец ОбновлениеВерсииИБ
	
	// отработка параметров запуска системы
	Если ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗавершениеРаботыПользователей
	СоединенияИБКлиент.УстановитьКонтрольРежимаЗавершенияРаботыПользователей();
	// Конец ЗавершениеРаботыПользователей
	
	// ОбменДанными
	ОбменДаннымиКлиент.ПриНачалеРаботыСистемы();
	// Конец ОбменДанными
	
	// ОбновлениеКонфигурации
	ОбновлениеКонфигурацииКлиент.ПроверитьОбновлениеКонфигурации();
	// Конец ОбновлениеКонфигурации
	
	// РегламентныеЗадания
	// Прим.: подсистема КонтрольДинамическогоОбновленияКонфигурации
	//        должна настраиваться после подсистемы РегламентныеЗадания, т.к. в режиме запуска отдельного
	//        сеанса обработки регламентных заданий, управление не будет и не должно быть передано далее.
	РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы();
	// Конец РегламентныеЗадания
	
	// РезервноеКопированиеИБ
	РезервноеКопированиеИБКлиент.ПриНачалеРаботыСистемы();
	// Конец РезервноеКопированиеИБ
	
	// КонтрольДинамическогоОбновленияКонфигурации
	КонтрольДинамическогоОбновленияКонфигурацииКлиент.ПриНачалеРаботыСистемы();
	// Конец КонтрольДинамическогоОбновленияКонфигурации
	
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//                              с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(Знач ПараметрЗапуска)

	Перем Результат;
	Результат = Ложь;
	
	// СтандартныеПодсистемы
	
	// Есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	// ЗавершениеРаботыПользователей
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	// Конец ЗавершениеРаботыПользователей

	// Конец СтандартныеПодсистемы
	
	// Код конфигурации
	// ...
	// Конец кода конфигурации

	// СтандартныеПодсистемы
	Возврат Результат;
	// Конец СтандартныеПодсистемы

КонецФункции

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	//РезервноеКопированиеИБ
	Отказ = РезервноеКопированиеИБКлиент.ПередЗавершениемРаботыСистемы();
	//Конец РезервноеКопированиеИБ
	
	// РаботаСФайлами
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы Тогда 
		РаботаСФайламиКлиент.ПоказатьЗанятыеФайлыПриЗавершенииРаботы(Отказ);
	КонецЕсли;	
	// Конец РаботаСФайлами
	
КонецПроцедуры

