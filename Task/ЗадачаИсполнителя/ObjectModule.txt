
// Возвращает Истина, если в задаче указан исполнитель или роль исполнителя.
//
Функция РеквизитыАдресацииЗаполнены() Экспорт
	
	Возврат НЕ Исполнитель.Пустая() ИЛИ НЕ РольИсполнителя.Пустая();

КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗадачаБылаВыполнена = Ссылка.Выполнена;
	Если НЕ ЗадачаБылаВыполнена И Выполнена Тогда
		
		Если НЕ РеквизитыАдресацииЗаполнены() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Необходимо указать исполнителя задачи.'"),,,
				"Объект.Исполнитель", Отказ);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЗадачаБылаВыполнена И Выполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Эта задача уже была выполнена ранее.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если СрокИсполнения <> '00010101' И ДатаНачала > СрокИсполнения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата начала исполнения не должна превышать крайний срок.'"),,,
			"Объект.ДатаНачала", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ЗадачаБылаВыполнена = Ложь;
	Если НЕ Ссылка.Пустая() Тогда
		ЗадачаБылаВыполнена = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Выполнена");
	КонецЕсли;
	Если НЕ ЗадачаБылаВыполнена И Выполнена Тогда
		
		Если СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя выполнять задачи остановленных бизнес-процессов.'");
		КонецЕсли;	
		
		// Если задача выполнена, то запишем в реквизит Исполнитель того
		// пользователя, который фактически выполнил задачу. Это нам потом
		// потребуется для отчетов. Такую запись делаем только в том
		// случае, если в базе было не выполнено, а в объекте стало выполнено
		Если Исполнитель.Пустая() Тогда
			Исполнитель = ОбщегоНазначения.ТекущийПользователь();
		КонецЕсли;
		Если ДатаИсполнения = Дата(1,1,1) Тогда
			ДатаИсполнения = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	Если Важность.Пустая() Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеБизнесПроцесса) Тогда
		СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
	Если ПустаяСтрока(ПредметСтрокой) Тогда
		ПредметСтрокой = БизнесПроцессыИЗадачиСервер.ПредметСтрокой(Предмет);
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если НЕ Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	Если ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда
		БизнесПроцессыИЗадачиВызовСервера.ПриПометкеУдаленияЗадачи(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	Если НЕ Ссылка.Пустая() Тогда
		ПредыдущееСостояние = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СостояниеБизнесПроцесса");
		Если ПредыдущееСостояние <> СостояниеБизнесПроцесса Тогда
			УстановитьСостояниеПодчиненныхБизнесПроцессов(СостояниеБизнесПроцесса);
		КонецЕсли;	
	КонецЕсли;
	
	Если Выполнена И Не ПринятаКИсполнению Тогда
		ПринятаКИсполнению = Истина;
		ДатаПринятияКИсполнению = ТекущаяДата();
	КонецЕсли;	
		
	// УправлениеДоступом
	ГруппаИсполнителейЗадач = БизнесПроцессыИЗадачиВызовСервера.ГруппаИсполнителейЗадач(РольИсполнителя, 
		ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	// Конец УправлениеДоступом
	
КонецПроцедуры

Процедура УстановитьСостояниеПодчиненныхБизнесПроцессов(НовоеСостояние)
	
	НачатьТранзакцию();
	ПодчиненныеБизнесПроцессы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьБизнесПроцессыГлавнойЗадачи(Ссылка);
	Если ПодчиненныеБизнесПроцессы <> Неопределено Тогда
		Для Каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Заблокировать();
			БизнесПроцессОбъект.Состояние = НовоеСостояние;
			БизнесПроцессОбъект.Записать();
		КонецЦикла;	
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, 
			"БизнесПроцесс,ТочкаМаршрута,Наименование,Исполнитель,РольИсполнителя,ОсновнойОбъектАдресации," + 
			"ДополнительныйОбъектАдресации,Важность,ДатаИсполнения,Автор,Описание,СрокИсполнения," + 
			"ДатаНачала,РезультатВыполнения,Предмет");
		Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеБизнесПроцесса) Тогда
		СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
	КонецЕсли;
	
КонецПроцедуры


