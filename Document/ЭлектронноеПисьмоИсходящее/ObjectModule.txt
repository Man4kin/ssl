////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриЗаписи(Отказ)
	
	УправлениеЭлектроннойПочтой.УстановитьПометкуУдаленияУВложенийПисьма(Ссылка, ПометкаУдаления);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	УправлениеЭлектроннойПочтой.УдалитьВложенияУПисьма(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если (ТипЗнч(ДанныеЗаполнения) = Тип("Структура")) И (ДанныеЗаполнения.Свойство("Основание")) И
		(ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")) Тогда
		// Вводится ответ на входящее электронное письмо
		Взаимодействия.ЗаполнитьРеквизитыПоУмолчанию(ЭтотОбъект, Неопределено);
		ЗаполнитьНаОснованииВходящегоПисьма(ДанныеЗаполнения.Основание, ДанныеЗаполнения.Команда);
		
	Иначе
		Взаимодействия.ЗаполнитьРеквизитыПоУмолчанию(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
	Если ПустаяСтрока(Кодировка) Тогда
		Кодировка = "utf-8";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию();
	КонецЕсли;
	ОтправительПредставление = ПолучитьПредставлениеДляУчетнойЗаписи(УчетнаяЗапись);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Взаимодействия.ЗаполнитьРеквизитыПоУмолчанию(ЭтотОбъект, Неопределено);

	СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;	
	ДатаОтправления        = Неопределено;
	ИдентификаторСообщения = "";

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьНаОснованииВходящегоПисьма(Основание, ТипОтвета)
	
	ПереноситьОтправителя = Истина;
	ПереноситьВсехПолучателей = Ложь;
	ПереноситьВложения = Ложь;
	ДобавлятьКТеме = "Re: ";
	
	Если ТипОтвета = "ОтветитьВсем" Тогда
		ПереноситьВсехПолучателей = Истина;
	ИначеЕсли ТипОтвета = "Переслать" Тогда
		ДобавлятьКТеме = "Fw: ";
		ПереноситьОтправителя = Ложь;
		ПереноситьВложения = Истина;
	КонецЕсли;
	
	ЗаполнитьПараметрыИзВходящегоПисьма(Основание, ПереноситьОтправителя, ПереноситьВсехПолучателей, ДобавлятьКТеме, ПереноситьВложения);
	
КонецПроцедуры

Функция ПолучитьПредставлениеДляУчетнойЗаписи(УчетнаяЗапись)

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Представление = Выборка.ИмяПользователя;
	Если ПустаяСтрока(Представление) Тогда
		Возврат Выборка.АдресЭлектроннойПочты;
	Иначе
		Возврат Представление + " <" + Выборка.АдресЭлектроннойПочты + ">";
	КонецЕсли;

КонецФункции

Процедура ДобавитьПолучателя(Адрес, Представление, Контакт)
	
	новСтр = ПолучателиПисьма.Добавить();
	новСтр.Адрес = Адрес;
	новСтр.Контакт = Контакт;
	новСтр.Представление = Представление;
	
КонецПроцедуры

Процедура ДобавитьПолучателейИзТаблицы(Таблица)
	
	Для Каждого Стр Из Таблица Цикл
		новСтр = ПолучателиПисьма.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр, Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИзВходящегоПисьма(Входящее, ПереноситьОтправителяВПолучатели, ПереноситьВсехПолучателейПисьмаВПолучатели, ДобавлятьКТеме, ПереноситьВложения)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения,
	|	ЭлектронноеПисьмоВходящее.ИдентификаторыОснований,
	|	ЭлектронноеПисьмоВходящее.Кодировка,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.Предмет,
	|	ЭлектронноеПисьмоВходящее.Текст,
	|	ЭлектронноеПисьмоВходящее.Тема,
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись,
	|	ЭлектронноеПисьмоВходящее.ПолучателиПисьма.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоВходящее.ПолучателиКопий.(
	|		Адрес,
	|		Представление,
	|		Контакт
	|	)
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Входящее);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторОснования  = Выборка.ИдентификаторСообщения;
	ИдентификаторыОснований = СокрЛП(Выборка.ИдентификаторыОснований + " <" + ИдентификаторОснования + ">");
	Кодировка               = Выборка.Кодировка;
	Предмет                 = Выборка.Предмет;
	Текст                   = Выборка.Текст;
	Тема                    = ДобавлятьКТеме + Выборка.Тема;
	УчетнаяЗапись           = Выборка.УчетнаяЗапись;
	
	Если ПереноситьОтправителяВПолучатели Тогда
		ДобавитьПолучателя(Выборка.ОтправительАдрес, Выборка.ОтправительПредставление, Выборка.ОтправительКонтакт);
	КонецЕсли;
	
	Если ПереноситьВсехПолучателейПисьмаВПолучатели Тогда
		ДобавитьПолучателейИзТаблицы(Выборка.ПолучателиПисьма.Выгрузить());
		ДобавитьПолучателейИзТаблицы(Выборка.ПолучателиКопий.Выгрузить());
	КонецЕсли;
	//ПолучателиПисьма.Свернуть("Адрес,Представление,Контакт");
	
	СписокПолучателейПисьма = УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиПисьма);
	
КонецПроцедуры

//Вызывается при заполнении документа на основании
Процедура ЗаполнитьКонтакты(Контакты) Экспорт
	
	Если Не Взаимодействия.КонтактыЗаполнены(Контакты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Контакты Цикл
		
		Адрес = Неопределено;
		
		Если ТипЗнч(Стр) = Тип("Структура") Тогда
			// В документ попадут только те контакты, для которых заданы адреса электронной почты
			МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.Адрес,",");
			Для каждого ЭлементМассиваАдресов Из МассивАдресов Цикл
				Попытка
					Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ЭлементМассиваАдресов);
					Если Результат.Количество() > 0 И НЕ ПустаяСтрока(Результат[0]) Тогда
						Адрес = Результат[0];
					КонецЕсли;
				Исключение
				КонецПопытки;
				Если НЕ Адрес = Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Адрес = Неопределено И ЗначениеЗаполнено(Стр.Контакт) Тогда
				МассивАдресовЭП = Взаимодействия.ПолучитьАдресаЭлектроннойПочтыКонтакта(Стр.Контакт);
				Если МассивАдресовЭП.Количество() > 0 Тогда
					Адрес = Новый Структура("Адрес",МассивАдресовЭП[0].АдресЭП);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Адрес = Неопределено Тогда
				
				новСтр = ПолучателиПисьма.Добавить();
				
				новСтр.Контакт = Стр.Контакт;
				новСтр.Представление = Стр.Представление;
				новСтр.Адрес = Адрес.Адрес;
			Иначе
				Продолжить;
			КонецЕсли;
			
		Иначе
			новСтр = ПолучателиПисьма.Добавить();
			новСтр.Контакт = Стр;
		КонецЕсли;
		
		Взаимодействия.ДозаполнитьПоляКонтактов(новСтр.Контакт, новСтр.Представление, новСтр.Адрес, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЦикла;
	
	СформироватьПредставленияКонтактов();
	
КонецПроцедуры

//Формирует представления контактов для всех типов получателей письма
Процедура СформироватьПредставленияКонтактов() Экспорт
	
	СписокПолучателейПисьма       = УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиПисьма,       Ложь);
	СписокПолучателейКопий        = УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиКопий,        Ложь);
	СписокПолучателейСкрытыхКопий = УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиСкрытыхКопий, Ложь);
	
КонецПроцедуры


