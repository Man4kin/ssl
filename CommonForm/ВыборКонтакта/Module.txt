
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Взаимодействия.ДобавитьСтраницыФормыПодбораКонтактов(ЭтаФорма);
	
	// Заполним контакты по предмету
	Взаимодействия.ЗаполнитьКонтактыПоПредмету(Элементы, Параметры.Предмет, КонтактыПоПредмету, Ложь);
	
	// Получим информацию об индексе ППД
	Взаимодействия.ОбновитьИнформациюОбАктуальностиИндексаППД(ИнформацияОбАктуальностиИндексаППД, ППДВключен,ИндексАктуален);
	
	// Заполним список вариантов поиска и осуществим первый поиск
	ВсеСпискиПоиска = Взаимодействия.ПолучитьСписокДоступныхПоисков(ППДВключен, Параметры, Элементы, Ложь);
	ВыполнитьПервыйПоиск();
	
	// Если заполнен контакт, установим нужной текущую страницу и спозиционируемся на нем
	Если ЗначениеЗаполнено(Параметры.Контакт) Тогда
		УстановитьТекущимКонтакт(Параметры.Контакт)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокВыбораВСтрокеПоиска(Ложь);
	УправлениеДоступностью();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//КОМАНДЫ ФОРМЫ 

//Инициирует процесс поиска контактов. 
// 
 &НаКлиенте
Процедура КомандаНайтиВыполнить()
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Предупреждение(НСтр("ru = 'Не задана строка поиска!'"));
		Возврат;
	КонецЕсли;
	
	Результат = "";
	НайденныеКонтакты.Очистить();
	
	Если ВариантыПоиска = "ПоEmail" Тогда
		НайтиПоEmail(Ложь);
	ИначеЕсли ВариантыПоиска = "ПоДомену" Тогда
		НайтиПоEmail(Истина);
	ИначеЕсли ВариантыПоиска = "ПоТелефону" Тогда
		НайтиПоТелефону();
	ИначеЕсли ВариантыПоиска = "ПоСтроке" Тогда
		Результат = НайтиПоСтроке();
	ИначеЕсли ВариантыПоиска = "НачинаетсяС" Тогда
		НайтиПоНачалуНаименования();
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат) Тогда
		Предупреждение(Результат);
	КонецЕсли;
	
КонецПроцедуры

//Обновляет индекс полнотекстового поиска. 
// 
&НаКлиенте
Процедура КомандаОбновитьИндексППДВыполнить()
	
	ВзаимодействияКлиент.КомандаОбновитьИндексППДВыполнить(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален);
	УправлениеДоступностью();
	
КонецПроцедуры

//Выполняет позиционирование в соответсвующем динамическом списке на текущем контакте из 
//списка "Найденные контакты". 
// 
&НаКлиенте
Процедура НайтиВСпискеИзСпискаНайденныхВыполнить()
	
	Если Элементы.НайденныеКонтакты.ТекущиеДанные <> Неопределено Тогда
		УстановитьТекущимКонтакт(Элементы.НайденныеКонтакты.ТекущиеДанные.Ссылка);
	КонецЕсли; 

КонецПроцедуры

//Выполняет позиционирование в соответсвующем динамическом списке на текущем контакте
//из списка "Контакты по предмету" . 
//
&НаКлиенте
Процедура НайтиВСпискеИзСпискаПредметовВыполнить()
	
	Если Элементы.КонтактыПоПредмету.ТекущиеДанные <> Неопределено Тогда
		УстановитьТекущимКонтакт(Элементы.КонтактыПоПредмету.ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
 
&НаКлиенте
Процедура НайденныеКонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Закрыть(Элемент.ТекущиеДанные.Ссылка);

КонецПроцедуры

//Универсальный обработчик выбора из динамического списка справочников-контактов.
&НаКлиенте
Процедура СписокСправочникаВыбор(Элемент,ВыбраннаяСтрока,Поле ,СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено  Тогда
	    Возврат;	
	КонецЕсли;
	
	ОписаниеКонтакта = Новый Структура;
	
	МассивОписанийКонтакта = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для Каждого ЭлементМассива Из  МассивОписанийКонтакта Цикл
		Если ТипЗнч(ТекущиеДанные.Ссылка) = ЭлементМассива.Тип Тогда
			ОписаниеКонтакта = ЭлементМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеКонтакта.Свойство("Иерархический")И ОписаниеКонтакта.Иерархический Тогда
		ЭтоГруппа = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущиеДанные.Ссылка,"ЭтоГруппа");
	Иначе
		ЭтоГруппа = Ложь;
	КонецЕсли;;
	
	Если Не ЭтоГруппа Тогда
		Закрыть(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПоПредметуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Закрыть(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПоискаПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораВСтрокеПоиска(Истина);
	
КонецПроцедуры 
  
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОСУЩЕСТВЛЕНИЯ ПОИСКА

// Формирует список значений строк, по которым будет осуществлятся поиск по текущему варианту поиска
//
// Возвращаемое значение:
//   СписокЗначений   - список строк, по которым будет осуществляться поиск.
//
&НаСервере
Функция ПолучитьСписокСтрокПоискаПоВарианту()

	спсСтрок = Новый СписокЗначений;
	
	Значения = Неопределено;
	ВсеСпискиПоиска.Свойство(ВариантыПоиска, Значения);
	
	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		спсСтрок.Добавить(Значения);
	ИначеЕсли ТипЗнч(Значения) = Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Значения Цикл
			спсСтрок.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат спсСтрок;

КонецФункции

// Выполняет первый поиск по всем возможным вариантам поиска согласно переданным параметрам.
//
&НаСервере
Процедура ВыполнитьПервыйПоиск()
	
	ВариантыПоиска = "ПоСтроке";
	Если ПустаяСтрока(Параметры.Адрес) И ПустаяСтрока(Параметры.Представление) Тогда
		Возврат;
	КонецЕсли;

	// Попробуем поискать по email
	ВариантыПоиска = "ПоEmail";
	Для Каждого Вариант Из ПолучитьСписокСтрокПоискаПоВарианту() Цикл
		СтрокаПоиска = Вариант.Значение;
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;	
		Если НайтиПоEmail(Ложь) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Попробуем поискать по телефону
	ВариантыПоиска = "ПоТелефону";
	Для Каждого Вариант Из ПолучитьСписокСтрокПоискаПоВарианту() Цикл
		СтрокаПоиска = Вариант.Значение;
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;
		Если НайтиПоТелефону() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

	// Если индекс ППД не включен то дальше не ищем
	Если НЕ ППДВключен Тогда
		ВариантыПоиска = "ПоEmail";
		Возврат;
	КонецЕсли;

	// Попробуем поискать по адресу и представлению
	ВариантыПоиска = "ПоСтроке";
	Для Каждого Вариант Из ПолучитьСписокСтрокПоискаПоВарианту() Цикл
		СтрокаПоиска = Вариант.Значение;
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			Продолжить;
		КонецЕсли;
		НайтиПоСтроке();
		Если НайденныеКонтакты.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Осуществляет поиск контактов по доменному имени или по адресу электронной почты.
// 
&НаСервере
Функция НайтиПоEmail(ПоДомену)

	Возврат Взаимодействия.НайтиПоEmail(СтрокаПоиска,ПоДомену,ЭтаФорма);
    	
КонецФункции

// Осуществляет поиск контактов по телефону.
// 
&НаСервере
Функция НайтиПоТелефону()
	
	Возврат Взаимодействия.ПолучитьВсеКонтактыПоТелефону(СтрокаПоиска,ЭтаФорма);
    	
КонецФункции

// Осуществляет поиск контактов по строке
// 
&НаСервере
Функция НайтиПоСтроке()
	
	Возврат Взаимодействия.ОсуществитьПоискКонтактовПоСтроке(ЭтаФорма);
	
КонецФункции	

// Осуществляет поиск контактов по началу наименования
//
&НаСервере
Функция НайтиПоНачалуНаименования()

	ТабКонтакты = Взаимодействия.ПолучитьВсеКонтактыПоНачалуНаименования(СтрокаПоиска);

	Если ТабКонтакты = Неопределено ИЛИ ТабКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьНайденныеКонтакты(ТабКонтакты,НайденныеКонтакты);
	Возврат Истина;

КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает текущим контакт в соответствующем динамическом списке.
//
// Параметры
//  Контакт  - СправочникСсылка - контакт, на котором необходимо спозиционироватся.
// 
&НаСервере
Процедура УстановитьТекущимКонтакт(Контакт)

	Взаимодействия.УстановитьТекущимКонтакт(Контакт, ЭтаФорма );

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВСтрокеПоиска(ИзменятьСтрокуПоиска)

	стрВариантыПоиска = Неопределено;
	ВсеСпискиПоиска.Свойство(ВариантыПоиска, стрВариантыПоиска);
	
	ЭтоСписок = Ложь;
	Если ТипЗнч(стрВариантыПоиска) = Тип("СписокЗначений") Тогда
		Количество = стрВариантыПоиска.Количество();
		Если Количество = 0 Тогда
			стрВариантыПоиска = "";
		ИначеЕсли Количество = 1 Тогда
			стрВариантыПоиска = стрВариантыПоиска.Получить(0).Значение;
		Иначе
			ЭтоСписок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСписок Тогда
		Элементы.СтрокаПоиска.КнопкаСпискаВыбора = Истина;
		Элементы.СтрокаПоиска.СписокВыбора.Очистить();
		Для Каждого ЭлементВарианта Из стрВариантыПоиска Цикл
			Элементы.СтрокаПоиска.СписокВыбора.Добавить(ЭлементВарианта.Значение);
		КонецЦикла;

		Если ИзменятьСтрокуПоиска Тогда
			СтрокаПоиска = стрВариантыПоиска.Получить(0).Значение;
		КонецЕсли;

	ИначеЕсли ИзменятьСтрокуПоиска Тогда
		Элементы.СтрокаПоиска.КнопкаСпискаВыбора = Ложь;
		СтрокаПоиска = стрВариантыПоиска;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокВладелецПриАктивизацииСтроки(Элемент)
	
	 ВзаимодействияКлиент.КонтактВладелецПриАктивизацииСтроки(Элемент,ЭтаФорма);

КонецПроцедуры 

  // Управляет доступностью элементов формы
&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.КомандаОбновитьИндексППД.Доступность = Не ИндексАктуален;

КонецПроцедуры 
