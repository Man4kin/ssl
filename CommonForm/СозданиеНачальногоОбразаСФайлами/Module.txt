
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Менеджер = ПланыОбмена[Параметры.Узел.Метаданные().Имя];
	
	Если Параметры.Узел = Менеджер.ЭтотУзел() Тогда
		
		ВызватьИсключение НСтр("ru = 'Создание начального образа для данного узла невозможно.'");
		
	Иначе
		
		ВидБазы = 0; // файловая база
		ТипСУБД = "";
		Узел = Параметры.Узел;
		МожноСоздатьФайловуюБазу = Истина;
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			МожноСоздатьФайловуюБазу = Ложь;
		КонецЕсли;
		
		КодыЛокализации = ПолучитьДопустимыеКодыЛокализации();
		ЯзыкФайловойБазы = Элементы.Найти("ЯзыкФайловойБазы");
		ЯзыкБазыСервера = Элементы.Найти("ЯзыкБазыСервера");
		
		Для Каждого Код Из КодыЛокализации Цикл
			Представление = ПредставлениеКодаЛокализации(Код);
			ЯзыкФайловойБазы.СписокВыбора.Добавить(Код, Представление);
			ЯзыкБазыСервера.СписокВыбора.Добавить(Код, Представление);
		КонецЦикла;
		
		Язык = КодЛокализацииИнформационнойБазы();
		
	КонецЕсли;
	
	ЕстьФайлыВТомах = Ложь;
	
	Если ФайловыеФункции.ЕстьТомаХраненияФайлов() Тогда
		
		КоличествоФайлов = ФайловыеФункцииПереопределяемый.ПолучитьКоличествоФайловВТомах();
		
		Если КоличествоФайлов <> 0 Тогда
			ЕстьФайлыВТомах = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьФайлыВТомах Тогда
		ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			Элементы.ПолноеИмяФайловойБазы.АвтоОтметкаНезаполненного = Истина;
			Элементы.ПутьКАрхивуСФайламиТомов.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ПолноеИмяФайловойБазыLinux.АвтоОтметкаНезаполненного = Истина;
			Элементы.ПутьКАрхивуСФайламиТомовLinux.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПутьКАрхивуСФайламиТомов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБазыПриИзменении(Элемент)
	
	// переключить страницу параметров
	Страницы = Элементы.Найти("Страницы");
	Страницы.ТекущаяСтраница = Страницы.ПодчиненныеЭлементы[ВидБазы];
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачальныйОбраз(Команда)
	
	ОчиститьСообщения();
	
	Состояние(НСтр("ru = 'Обмен данными'"), ,
						 НСтр("ru = 'Осуществляется создание начального образа...'"),
						 БиблиотекаКартинок.СоздатьНачальныйОбраз);
	
	Если ВидБазы = 0 Тогда
		
		Если НЕ МожноСоздатьФайловуюБазу Тогда
			ВызватьИсключение НСтр("ru = 'Создание начального образа файловой информационной базы на данной платформе не поддерживается.'");
		КонецЕсли;
		
		Если Не ОбменФайламиВызовСервера.СоздатьФайловыйНачальныйОбразНаСервере(Узел, УникальныйИдентификатор, Язык, ПолноеИмяФайловойБазыWindows, ПолноеИмяФайловойБазыLinux, ПутьКАрхивуСФайламиТомовWindows, ПутьКАрхивуСФайламиТомовLinux) Тогда
			Состояние();
			Возврат;
		КонецЕсли;
		
	Иначе
		СтрокаСоединения = "Srvr=""" + Сервер + """;" 
						 + "Ref=""" + ИмяБазы + """;"
						 + "DBMS=""" + ТипСУБД + """;"
						 + "DBSrvr=""" + СерверБазыДанных + """;"
						 + "DB=""" + ИмяБазыДанных + """;"
						 + "DBUID=""" + ПользовательБазыДанных + """;"
						 + "DBPwd=""" + ПарольПользователя + """;"
						 + "SQLYOffs=""" + СмещениеДат + """;"
						 + "Locale=""" + Язык + """;";
		
		Если Не ОбменФайламиВызовСервера.СоздатьСерверныйНачальныйОбразНаСервере(Узел, СтрокаСоединения, ПутьКАрхивуСФайламиТомовWindows, ПутьКАрхивуСФайламиТомовLinux) Тогда
			Состояние();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Предупреждение(НСтр("ru = 'Создание начального образа успешно завершено.'"));
	
КонецПроцедуры
