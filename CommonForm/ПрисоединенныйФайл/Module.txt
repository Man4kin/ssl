///////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и элементов формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ТаблицаПодписей").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
	ПользовательПустаяСссылка = Справочники.Пользователи.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
		КопируемыйОбъект = ЗначениеКопирования.ПолучитьОбъект();
		ИмяСправочника = ЗначениеКопирования.Метаданные().Имя;
		ОбъектЗначение = Справочники[ИмяСправочника].СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектЗначение, КопируемыйОбъект,
									"ДатаМодификацииУниверсальная, ДатаСоздания, Зашифрован, Описание, ПодписанЭЦП, Размер, Расширение, ТекстХранилище, ВладелецФайла, ПометкаУдаления",
									"ВерсияДанных, ДополнительныеСвойства, Код, ОбменДанными, Предопределенный, Родитель, Ссылка, ЭтоГруппа, Наименование, Автор, Изменил, ИндексКартинки, ПутьКФайлу, Редактирует");
		Для Каждого ЭлементЭЦП Из КопируемыйОбъект.ЭлектронныеЦифровыеПодписи Цикл
			НоваяСтрока = ОбъектЗначение.ЭлектронныеЦифровыеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементЭЦП);
		КонецЦикла;
		Для Каждого ЭлементШифрования Из КопируемыйОбъект.СертификатыШифрования Цикл
			НоваяСтрока = ОбъектЗначение.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементШифрования);
		КонецЦикла;
		//
		ОбъектЗначение.Автор = ОбщегоНазначения.ТекущийПользователь();
	Иначе
		ОбъектЗначение = Параметры.ПрисоединенныйФайл.ПолучитьОбъект();
	КонецЕсли;
	
	ИмяСправочника = ОбъектЗначение.Метаданные().Имя;
	
	СоздатьРеквизыФормы();
	ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");
	СоздатьЭлементыФормы();
	
	ЗаполнитьСписокПодписей();
	ЗаполнитьСписокШифрования();
	
	Если НЕ ПравоДоступа("Изменение", ЭтаФорма.Объект.ВладелецФайла.Метаданные()) Тогда
		УстановитьКнопкиИзмененияНевидимыми(Элементы);
	КонецЕсли;
	
	Если НЕ ЭтаФорма.Объект.Ссылка.Пустая() Тогда
		ЗаблокироватьДанныеДляРедактирования(ЭтаФорма.Объект.Ссылка,, УникальныйИдентификатор);
	КонецЕсли;
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаМодификации = МестноеВремя(ЭтаФорма.Объект.ДатаМодификацииУниверсальная);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	РазблокироватьОбъект(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра()
	
	Если ЭтоНовый()
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ФайлРедактируется = ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует) И ЭтаФорма.Объект.Редактирует = ТекущийПользователь;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла()
	
	Если ЭтоНовый()
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.ОткрытьКаталогСФайлом(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак()
	
	Если ЭтоНовый()
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Перем НовоеРасширение;
	
	Если ЭтоНовый()
	 ИЛИ ЭтаФорма.Объект.Зашифрован
	 ИЛИ ЭтаФорма.Объект.ПодписанЭЦП
	 ИЛИ НЕ ЭтаФорма.Объект.Редактирует.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, , Ложь);
	
	ИнформацияОФайле = Новый Структура;
	
	Если ПрисоединенныеФайлыКлиент.ВыбратьФайлНаДискеИПоместитьВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Тогда
		ОбновитьДвоичныеДанныеФайлаНаСервере(ИнформацияОФайле,
#Если ВебКлиент Тогда
			Истина
#Иначе
			Ложь
#КонецЕсли
			);
		ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
		Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(ИнформацияОФайле, ЭтоВебКлиент)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ЗаписываемыйОбъект, ИнформацияОФайле, ЭтоВебКлиент);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписатьИЗакрыть(Команда)
	
	Если ОбработатьКомандуЗаписиФайла() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписать(Команда)
	
	ОбработатьКомандуЗаписиФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеПометитьНаУдалениеСнятьПометку(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если ЭтаФорма.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Для снятия отметки удаления необходимо записать внесенные Вами изменения. Записать данные?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для установки отметки удаления необходимо записать внесенные Вами изменения. Записать данные?'");
		КонецЕсли;
	Иначе
		Если ЭтаФорма.Объект.ПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ЭтаФорма.Объект.Ссылка);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пометить ""%1"" на удаление?'"), ЭтаФорма.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Объект.ПометкаУдаления = НЕ ЭтаФорма.Объект.ПометкаУдаления;
		ОбработатьКомандуЗаписиФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные изменены. Перечитать данные?'");
	
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеречитатьДанныеССервера();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеСкопировать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначениеКопирования", ЭтаФорма.Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд ЭЦП и шифрования

&НаКлиенте
Процедура ПодписатьФайлЭЦП(Команда)
	
	Если ЭтоНовый()
	 ИЛИ ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует)
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ДанныеПодписи = Неопределено;
	
	Если ПрисоединенныеФайлыКлиент.ВыбратьСертификатыЭЦПИСформироватьДанныеПодписи(ЭтаФорма.Объект.Ссылка, ДанныеФайла, ДанныеПодписи) Тогда
		ЗанестиИнформациюОднойПодписи(ДанныеПодписи);
		ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
		Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено, операция прервана.'"));
		Возврат;
	КонецЕсли;
#КонецЕсли

	Если ЭтоНовый()
	 ИЛИ ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует)
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
		
		МассивПодписей = ПрисоединенныеФайлыКлиент.ПолучитьМассивПодписей(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
		
		Если МассивПодписей.Количество() > 0 Тогда
			ЗанестиИнформациюОПодписях(МассивПодписей);
			ПрисоединенныеФайлыКлиент.ОповеститьОДобавленииПодписиИзФайла(ЭтаФорма.Объект.Ссылка, МассивПодписей.Количество());
		КонецЕсли;
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	
	Если ЭтоНовый()
	 ИЛИ ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует)
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭЦП(ЭтаФорма.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если ЭтоНовый()
	 ИЛИ ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует)
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	ЗашифрованныеДанные = Неопределено;
	МассивОтпечатков = Новый Массив;
	
	Если НЕ ПрисоединенныеФайлыКлиент.ПолучитьЗашифрованныеДанные(ЭтаФорма.Объект.Ссылка, ДанныеФайла, УникальныйИдентификатор, ЗашифрованныеДанные, МассивОтпечатков) Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифроватьСервер(ЗашифрованныеДанные, МассивОтпечатков);
	
	ПрисоединенныеФайлыКлиент.ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(ЭтаФорма.Объект.Ссылка, ДанныеФайла);
	
	ЗаполнитьСписокШифрования();
	ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
	Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если ЭтоНовый()
	 ИЛИ НЕ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	РасшифрованныеДанные = Неопределено;
	
	Если НЕ ПрисоединенныеФайлыКлиент.ПолучитьРасшифрованныеДанные(ЭтаФорма.Объект.Ссылка, ДанныеФайла, РасшифрованныеДанные, УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифроватьСервер(РасшифрованныеДанные);
	
	ПрисоединенныеФайлыКлиент.ОповеститьОРасшифровкеФайла(ЭтаФорма.Объект.Ссылка, ДанныеФайла);
	
	ЗаполнитьСписокШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭЦПСписокОткрытьПодпись(Команда)
	ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭЦП(Команда)
	
	Если ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере Тогда
		ДанныеВыделенныхСтрок = Новый Массив;
		ИменаКолонок = "";
		Для Каждого ИмяКолонки Из ОписаниеКолонокТаблицыПодписей Цикл
			ИменаКолонок = ИменаКолонок + ИмяКолонки + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
		
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТаблицаПодписей.НайтиПоИдентификатору(Элемент));
			ДанныеВыделенныхСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ФайловыеФункции.ПроверитьНаСервере(ДанныеВыделенныхСтрок);
		
		Индекс = 0;
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			Строка = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
			Строка.Статус = ДанныеВыделенныхСтрок[Индекс].Статус;
			Строка.Неверна = ДанныеВыделенныхСтрок[Индекс].Неверна;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка).СсылкаНаДвоичныеДанныеФайла);
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ТаблицаПодписей.ДанныеСтроки(Элемент);
			Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
				ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДвоичныеДанные);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере Тогда
		ДанныеСтрок = Новый Массив;
		ИменаКолонок = "";
		Для Каждого ИмяКолонки Из ОписаниеКолонокТаблицыПодписей Цикл
			ИменаКолонок = ИменаКолонок + ИмяКолонки + ",";
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок)-1);
		
		Для Каждого СтрокаТЗ Из ТаблицаПодписей Цикл
			ДанныеСтроки = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЗ);
			ДанныеСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ФайловыеФункции.ПроверитьВсеНаСервере(ДанныеСтрок);
		
		Индекс = 0;
		Для Каждого СтрокаТЗ Из ТаблицаПодписей Цикл
			СтрокаТЗ.Статус = ДанныеСтрок[Индекс].Статус;
			СтрокаТЗ.Неверна = ДанныеСтрок[Индекс].Неверна;
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка).СсылкаНаДвоичныеДанныеФайла);
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Для Каждого Строка Из ТаблицаПодписей Цикл
			Если Строка.Объект <> Неопределено И (НЕ Строка.Объект.Пустая()) Тогда
				ПроверитьОднуПодпись(Строка, МенеджерКриптографии, ДвоичныеДанные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаПодписей.ТекущиеДанные;
	
	Если ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая()) Тогда
		ФайловыеФункцииКлиент.СохранитьПодпись(ТекущиеДанные.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭЦП(Команда)
	
	Если Вопрос(НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИзСпискаПодписейИЗаписатьФайл();
	
	ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
	Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отпечаток = ТекущиеДанные.Отпечаток;
	
	Сертификат = Неопределено;
	СтруктураСертификата = Неопределено;
	Если НЕ ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ТекущиеДанные.АдресСертификата);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	Иначе
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	КонецЕсли;	
	
	Если СтруктураСертификата <> Неопределено Тогда
		ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьСертификатШифрования(Неопределено);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместного изменения

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если ЭтоНовый()
	 ИЛИ ЭтаФорма.Объект.ПодписанЭЦП
	 ИЛИ ЭтаФорма.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует) И НЕ (ЭтаФорма.Объект.Редактирует = ТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	Иначе
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
		ЗанятьФайлДляРедактированияСервер();
		ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
		Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если ЭтоНовый()
		ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует)
		ИЛИ (ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует) И НЕ (ЭтаФорма.Объект.Редактирует = ТекущийПользователь)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭтаФорма.Объект.Ссылка, , Ложь);
	
	ИнформацияОФайле = Новый Структура;
	
	Если ПрисоединенныеФайлыКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Тогда
		ПоместитьФайлВХранилищеИОсвободить(ИнформацияОФайле);
		ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
		Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если ЭтоНовый()
		ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует)
		ИЛИ (ЗначениеЗаполнено(ЭтаФорма.Объект.Редактирует) И НЕ (ЭтаФорма.Объект.Редактирует = ТекущийПользователь)) Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайл();
	ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
	Оповестить("ЗаписьПрисоединенногоФайла", ЭтаФорма.Объект.Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Служебные функции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкиИзмененияНевидимыми(Элементы)
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъекта();
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрования()
	
	СертификатыШифрования.Очистить();
	
	Если ЭтаФорма.Объект.Зашифрован Тогда
		Для Каждого СтруктураСертификата Из РеквизитФормыВЗначение("Объект").СертификатыШифрования Цикл
			
			НоваяСтрока = СертификатыШифрования.Добавить();
			НоваяСтрока.Представление = СтруктураСертификата.Представление;
			НоваяСтрока.Отпечаток = СтруктураСертификата.Отпечаток;
			
			ДвоичныеДанныеСертификата = СтруктураСертификата.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Зашифрован для'");
	
	Если СертификатыШифрования.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(СертификатыШифрования.Количество()) + ")";
	КонецЕсли;
	
	Элементы.ГруппаШифрование.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, ДвоичныеДанныеФайла)
	
	СтруктураВозврата = "";
	
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
	
	Попытка
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ТаблицаПодписей.Очистить();
	
	Если ЭтаФорма.Объект.ПодписанЭЦП Тогда
		
		Для Каждого ЭлементЭЦП Из РеквизитФормыВЗначение("Объект").ЭлектронныеЦифровыеПодписи Цикл
			
			НоваяСтрока = ТаблицаПодписей.Добавить();
			
			НоваяСтрока.КомуВыданСертификат = ЭлементЭЦП.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи			= ЭлементЭЦП.ДатаПодписи;
			НоваяСтрока.Комментарий			= ЭлементЭЦП.Комментарий;
			НоваяСтрока.Объект				= ЭтаФорма.Объект.Ссылка;
			НоваяСтрока.Отпечаток			= ЭлементЭЦП.Отпечаток;
			НоваяСтрока.УстановившийПодпись = ЭлементЭЦП.УстановившийПодпись;
			НоваяСтрока.Неверна				= Ложь;
			НоваяСтрока.АдресПодписи		= ПоместитьВоВременноеХранилище(ЭлементЭЦП.Подпись.Получить(), УникальныйИдентификатор);
			
			ДвоичныеДанныеСертификата = ЭлементЭЦП.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'ЭЦП'");
	
	Если ТаблицаПодписей.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ТаблицаПодписей.Количество()) + ")";
	КонецЕсли;
	
	Элементы.ГруппаЭЦП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзСпискаПодписейИЗаписатьФайл()
	
	Для Каждого НомерВыделеннойСтроки Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
		ТаблицаПодписей.Удалить(ТаблицаПодписей.Индекс(ТаблицаПодписей.НайтиПоИдентификатору(НомерВыделеннойСтроки)));
	КонецЦикла;
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ЗаписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
	ЗаписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Загрузить(РеквизитФормыВЗначение("ТаблицаПодписей"));
	
	Если ЗаписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Количество() = 0 Тогда
		ЗаписываемыйОбъект.ПодписанЭЦП = Ложь;
	КонецЕсли;
	
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(РасшифрованныеДанные)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.Расшифровать(ЗаписываемыйОбъект, РасшифрованныеДанные);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопок(Форма, Элементы, ТекущийПользователь)
	
	ФайлРедактируется = ЗначениеЗаполнено(Форма.Объект.Редактирует);
	ФайлРедактируетТекущийПользователь = Форма.Объект.Редактирует = ТекущийПользователь;
	
	ИменаВсехКоманд = ПолучитьИменаКомандФормы();
	ИменаКоманд = ПолучитьДоступныеКоманды(ФайлРедактируется,
										   ФайлРедактируетТекущийПользователь,
										   Форма.Объект.ПодписанЭЦП,
										   Форма.Объект.Зашифрован,
										   Форма.Объект.Ссылка.Пустая());
	
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаВсехКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъекта();
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// простые команды - доступны любому пользователю читающему файлы
	ИменаКоманд.Добавить("СохранитьВместеСЭЦП");
	
	ИменаКоманд.Добавить("ОткрытьСертификат");
	ИменаКоманд.Добавить("ПроверитьЭЦП");
	ИменаКоманд.Добавить("ПроверитьВсе");
	ИменаКоманд.Добавить("СохранитьПодпись");
	
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъекта()
	
	ИменаКоманд = Новый Массив;
	
	ИменаКоманд.Добавить("ПодписатьФайлЭЦП");
	ИменаКоманд.Добавить("ДобавитьЭЦПИзФайла");
	
	ИменаКоманд.Добавить("УдалитьЭЦП");
	
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("СтандартныеСкопировать");
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	ИменаКоманд.Добавить("СтандартнаяЗаписать");
	ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
	ИменаКоманд.Добавить("СтандартныеПометитьНаУдалениеСнятьПометку");
	
	Возврат ИменаКоманд;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ФайлРедактируется,
								 ФайлРедактируетТекущийПользователь,
								 ФайлПодписан,
								 ФайлЗашифрован,
								 ЭтоНовыйФайл)
	
	
	Если ЭтоНовыйФайл Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("СтандартнаяЗаписать");
		ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
		Возврат ИменаКоманд;
	КонецЕсли;
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандыЭЦП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьСертификат");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПроверитьЭЦП");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПроверитьВсе");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьПодпись");
		УдалитьКомандуИзМассива(ИменаКоманд, "УдалитьЭЦП");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭЦП");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭЦП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ПодписатьФайлЭЦП");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭЦП(ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "ПодписатьФайлЭЦП");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭЦПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭЦП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(ЗашифрованныеДанные, МассивОтпечатков)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.Зашифровать(ЗаписываемыйОбъект, ЗашифрованныеДанные, МассивОтпечатков);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗанестиИнформациюОПодписях(МассивПодписей)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ЗанестиИнформациюОПодписях(ЗаписываемыйОбъект, МассивПодписей, УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗанестиИнформациюОднойПодписи(ДанныеПодписи)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ЗаписываемыйОбъект, ДанныеПодписи);
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	ЗаполнитьСписокПодписей();
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗанятьФайлДляРедактированияСервер()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ЗанятьФайлДляРедактированияСервер(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьФайлВХранилищеИОсвободить(ИнформацияОФайле)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ПоместитьФайлВХранилищеИОсвободить(ЗаписываемыйОбъект, ИнформацияОФайле);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьФайл()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	ПрисоединенныеФайлы.ОсвободитьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьКомандуЗаписиФайла()
	
	Если ПустаяСтрока(ЭтаФорма.Объект.Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для продолжения укажите имя файла.'"), , "Наименование", "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗаписатьФайл() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОповеститьОбИзменении(ЭтаФорма.Объект.Ссылка);
	Модифицированность = Ложь;
	ОтобразитьИзменениеДанных(ЭтаФорма.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПеречитатьДанныеССервера()
	
	ФайлОбъект = ЭтаФорма.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьФайл(ПараметрОбъект = Неопределено)
	
	ТранзакцияАктивна = Ложь;
	
	Если НЕ ПрисоединенныеФайлы.ПроверитьИмяФайлаУникально(ЭтаФорма.Объект.Наименование, ЭтаФорма.Объект.ВладелецФайла, ЭтаФорма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл с таким именем уже присутствует списке присоединенных файлов.'"), , "Наименование", "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ЗаписываемыйОбъект = ПараметрОбъект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЗначениеКопирования);
		Если ФайловыеФункции.ПолучитьТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			Попытка
				СсылкаНового = Справочники[ИмяСправочника].ПолучитьСсылку();
				ЗаписываемыйОбъект.УстановитьСсылкуНового(СсылкаНового);
				ПрисоединенныеФайлы.ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись присоединенного файла'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
			ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		Иначе
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ЗаписываемыйОбъект.ПутьКФайлу, ЗаписываемыйОбъект.Том, ЗаписываемыйОбъект.ДатаМодификацииУниверсальная, "",
			                               ЗаписываемыйОбъект.Наименование, ЗаписываемыйОбъект.Расширение, ЗаписываемыйОбъект.Размер);
			ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписываемыйОбъект.Записать();
	
	Если ТранзакцияАктивна Тогда
		Попытка
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись присоединенного файла'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		ТранзакцияАктивна = Ложь;
	КонецЕсли;
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	КонецЕсли;
	
	ЗначениеКопирования = Справочники[ИмяСправочника].ПустаяСсылка();
	УстановитьДоступностьКнопок(ЭтаФорма, Элементы, ТекущийПользователь);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СоздатьРеквизыФормы()
	
	ОписаниеТипаОбъект = Новый ОписаниеТипов("СправочникОбъект."+ИмяСправочника);
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквит = Новый РеквизитФормы("Объект", ОписаниеТипаОбъект);
	НовыйРеквит.СохраняемыеДанные = Истина;
	
	ДобавляемыеРеквизиты.Добавить(НовыйРеквит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	Элемент = ДобавитьПолеОбъектаНаФорму("Наименование", Элементы.ГруппаОбщаяИнформация, Истина, "Имя файла", Ложь);
	Элемент = ДобавитьПолеОбъектаНаФорму("Описание", Элементы.ГруппаОбщаяИнформация, Истина, , Ложь);
	
	// ------------------------------------------
	
	ДобавитьПолеОбъектаНаФорму("Автор", Элементы.ГруппаСведенияЧасть1);
	ДобавитьПолеОбъектаНаФорму("Изменил", Элементы.ГруппаСведенияЧасть1);
	ДобавитьПолеОбъектаНаФорму("Расширение", Элементы.ГруппаСведенияЧасть1);
	ДобавитьПолеОбъектаНаФорму("Редактирует", Элементы.ГруппаСведенияЧасть1);
	
	ДобавитьПолеОбъектаНаФорму("ДатаСоздания", Элементы.ГруппаСведенияЧасть2,,,,Ложь);
	ДобавитьПолеНаФорму("ДатаМодификации", Элементы.ГруппаСведенияЧасть2);
	ДобавитьПолеОбъектаНаФорму("Размер", Элементы.ГруппаСведенияЧасть2,,,,, 11);
	
	// ------------------------------------------
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьОбъект(Ссылка, УникальныйИдентификатор)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Вспомогательные

&НаКлиенте
Функция ЭтоНовый()
	
	Возврат ЭтаФорма.Объект.Ссылка.Пустая();
	
КонецФункции

&НаСервере
Функция ДобавитьПолеОбъектаНаФорму(знач ИмяРеквизита,
									знач Контейнер = Неопределено,
									знач ЗаголовокСверху = Ложь,
									знач Заголовок = "",
									знач ТолькоПросмотр = Истина,
									знач ПоказыватьЗаголовок = Истина,
									знач Ширина = 0)
	
	Если Контейнер = Неопределено Тогда
		Контейнер = ЭтаФорма;
	КонецЕсли;
	
	Элемент = Элементы.Добавить("Элемент" + ИмяРеквизита, Тип("ПолеФормы"), Контейнер);
	Элемент.ПутьКДанным = "Объект." + ИмяРеквизита;
	
	Если ПоказыватьЗаголовок Тогда
		Если ЗаголовокСверху Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ТолькоПросмотр = ТолькоПросмотр;
	Элемент.Ширина = Ширина;
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		Элемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

&НаСервере
Процедура ДобавитьПолеНаФорму(знач ИмяРеквизита, знач Контейнер = Неопределено)
	
	Если Контейнер = Неопределено Тогда
		Контейнер = ЭтаФорма;
	КонецЕсли;
	
	Элемент = Элементы.Добавить("Элемент" + ИмяРеквизита, Тип("ПолеФормы"), Контейнер);
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ТолькоПросмотр = Истина;
	
КонецПроцедуры

