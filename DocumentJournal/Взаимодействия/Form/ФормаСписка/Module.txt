
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
//установить флаг "отработано" в выбранных взаимодействиях - серверная часть
//Параметры:
//Взаимодействия - список выбранных взаимодействий
Процедура УстановитьФлагОтработано(Знач Взаимодействия)
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Для Каждого Взаимодействие Из Взаимодействия Цикл
		Если ЗначениеЗаполнено(Взаимодействие)
			И ТипЗнч(Взаимодействие) <> ТипГруппировка Тогда
			Объект = Взаимодействие.ПолучитьОбъект();
			Объект.Отработано = Истина;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
//установить ответственного в выбранных взаимодействиях - серверная часть
//Параметры:
//Взаимодействия - список выбранных взаимодействий
//Ответственный - устанавливаемый ответственный
Процедура УстановитьОтветственного(Знач Взаимодействия, Знач Ответственный)
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Для Каждого Взаимодействие Из Взаимодействия Цикл
		Если ЗначениеЗаполнено(Взаимодействие)
			И ТипЗнч(Взаимодействие) <> ТипГруппировка
			И Взаимодействие.Ответственный <> Ответственный Тогда
			Объект = Взаимодействие.ПолучитьОбъект();
			Объект.ОтработатьПосле = '0001.01.01';
			Объект.Ответственный = Ответственный;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
//установить предмет в выбранных взаимодействиях - серверная часть
//Параметры:
//Взаимодействия - список выбранных взаимодействий
//Предмет - устанавливаемый предмет взаимодействий
Процедура УстановитьПредмет(Знач МассивВзаимодействия, Знач Предмет)
	
	Для Каждого Взаимодействие Из МассивВзаимодействия Цикл
		Если ЗначениеЗаполнено(Взаимодействие)
			И ТипЗнч(Взаимодействие) <> Тип("СтрокаГруппировкиДинамическогоСписка")
			И Взаимодействие.Предмет <> Предмет Тогда
			Взаимодействия.УстановитьПредмет(Взаимодействие, Предмет);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
//устанавливает реквизит "отработать после" в выбранных взаимодействиях - серверная часть
//Параметры:
//Взаимодействия - список выбранных взаимодействий
//Предмет - устанавливаемая дата отработки
Процедура ОтложитьОбработку(Знач Взаимодействия, Знач ДатаОтработки)
	
	Для Каждого Взаимодействие Из Взаимодействия Цикл
		Если ЗначениеЗаполнено(Взаимодействие)
			И ТипЗнч(Взаимодействие) <> Тип("СтрокаГруппировкиДинамическогоСписка")
			И Взаимодействие.ОтработатьПосле <> ДатаОтработки Тогда
			Объект = Взаимодействие.ПолучитьОбъект();
			Объект.ОтработатьПосле = ДатаОтработки;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыборКорректен()
	
	Для Каждого Элемент Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(Элемент) <> ТипГруппировка Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Предмет") Тогда
			
			Если Параметры.Свойство("ДополнительныеПараметры")
				И Параметры.ДополнительныеПараметры.Свойство("ТипВзаимодействия") Тогда
				
				Если Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Взаимодействие" Тогда
					ПредметДляОтбора = Параметры.Отбор.Предмет.Предмет;
				ИначеЕсли Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Предмет" Тогда
					ПредметДляОтбора = Параметры.Отбор.Предмет;
				КонецЕсли;
			КонецЕсли;
			
			ОтборПоПредмету = Истина;
			СписокВыбора = Элементы.Группировка.СписокВыбора;
			СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению("ПоПредмету"));
			СписокВыбора = Элементы.Режим.СписокВыбора;
			СписокВыбора.Удалить(СписокВыбора.НайтиПоЗначению("Новые"));
			
		ИначеЕсли Параметры.Отбор.Свойство("Контакт") Тогда
			
			Контакт = Параметры.Отбор.Контакт;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВстречаУчастники.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Встреча.Участники КАК ВстречаУчастники
			|ГДЕ
			|	ВстречаУчастники.Контакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТелефонныйЗвонок.Ссылка
			|ИЗ
			|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
			|ГДЕ
			|	ТелефонныйЗвонок.АбонентКонтакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронноеПисьмоВходящее.Ссылка
			|ИЗ
			|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
			|ГДЕ
			|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
			|ИЗ
			|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
			|ГДЕ
			|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗапланированноеВзаимодействиеУчастники.Ссылка
			|ИЗ
			|	Документ.ЗапланированноеВзаимодействие.Участники КАК ЗапланированноеВзаимодействиеУчастники
			|ГДЕ
			|	ЗапланированноеВзаимодействиеУчастники.Контакт В(&Контакт)");
			
			
			МассивПараметрКонтакт = ПолучитьПараметрКонтактВЗависимостиОтТипа(Контакт);
			Если МассивПараметрКонтакт.Количество() = 0 Тогда
				МассивПараметрКонтакт.Добавить(Контакт);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Контакт",МассивПараметрКонтакт);	
			
			Параметры.Отбор.Удалить("Контакт");
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.ЗагрузитьЗначения(
			Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
			);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Ссылка",СписокОтбора,ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Для каждого РегистрируемыйДокумент Из Метаданные.ЖурналыДокументов.Взаимодействия.РегистрируемыеДокументы Цикл
		
		Если Не РегистрируемыйДокумент.Имя = "ЭлектронноеПисьмоВходящее" Тогда
			
			ДокументыДоступныеДляСоздания.Добавить(РегистрируемыйДокумент.Имя,РегистрируемыйДокумент.Синоним);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив, который передается в качестве параметра запроса при получении взаимодействий по контакту
// 
// Параметры
//  Контакт  - Ссылка - контакт, для которого необходимо выполнить поиск связанных контактов. 
//
// Возвращаемое значение:
//   Массив   
//
&НаСервере 
Функция ПолучитьПараметрКонтактВЗависимостиОтТипа(Контакт) 	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	ЕстьДополнительныеТаблицы = Ложь;
	ТекстЗапроса = "";
	ИмяТаблицыКонтакта = Контакт.Метаданные().Имя;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = ИмяТаблицыКонтакта Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Таблица.Ссылка КАК Контакт
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Контакт";
			
			Связь = ЭлементМассиваОписания.Связь;
			
			Если НЕ ПустаяСтрока(Связь) Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|   
				|ВЫБРАТЬ
				|	Таблица.Ссылка 
				|ИЗ
				|	Справочник." + Лев(Связь,Найти(Связь,".")-1) + " КАК Таблица
				|ГДЕ
				|	Таблица." + Прав(Связь,СтрДлина(Связь) - Найти(Связь,".")) + " = &Контакт"; 
				
				ЕстьДополнительныеТаблицы = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементМассиваОписания.ИмяВладельца = ИмяТаблицыКонтакта Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица
			|ГДЕ
			|	Таблица.Владелец = &Контакт";
			
			ЕстьДополнительныеТаблицы = Истина;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ПустаяСтрока(ТекстЗапроса) ИЛИ (НЕ ЕстьДополнительныеТаблицы) Тогда
		Возврат Новый Массив;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Контакт",Контакт);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Новый Массив;
		Иначе
			Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Режим = Настройки.Получить("Режим");
	Если Режим = "КИсполнению" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Ложь,,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтработатьПосле", ТекущаяДата(),ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,Истина);
	ИначеЕсли Режим = "Новые" Тогда
		Если ОтборПоПредмету Тогда
			Настройки.Удалить("Режим");
			Настройки.Удалить("Пользователь");
			Режим = "Все";
			Пользователь = Справочники.Пользователи.ПустаяСсылка();
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Ответственный");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Ложь,,, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Предмет",,ВидСравненияКомпоновкиДанных.НеЗаполнено,, Истина);
		КонецЕсли;
	ИначеЕсли Режим = "Отложенные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Ложь,,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтработатьПосле", ,ВидСравненияКомпоновкиДанных.Заполнено,,Истина);
	ИначеЕсли Режим = "Отработанные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Истина,,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтработатьПосле",,,, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Предмет",,,, Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано",,,, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтработатьПосле",,,, Ложь);
	КонецЕсли;
	
	СтрокаГруппировкаСписка = Настройки.Получить("Группировка");
	Если СтрокаГруппировкаСписка = "ПоДате" Тогда
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Список.Группировка.ДоступныеПоляПолейГруппировок.Элементы.Найти("Дата").Поле;
	ИначеЕсли СтрокаГруппировкаСписка = "ПоОтветственному" Тогда
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Список.Группировка.ДоступныеПоляПолейГруппировок.Элементы.Найти("Ответственный").Поле;
	ИначеЕсли СтрокаГруппировкаСписка = "ПоПредмету" И НЕ Параметры.Отбор.Свойство("Предмет") Тогда
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Список.Группировка.ДоступныеПоляПолейГруппировок.Элементы.Найти("Предмет").Поле;
	КонецЕсли;
	
	Если ПредметДляОтбора <> Неопределено Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предмет");
		Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					СписокЗначений = Новый СписокЗначений;
					СписокЗначений.Добавить(ЭлементОтбора.ПравоеЗначение);
					СписокЗначений.Добавить(ПредметДляОтбора);
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
					ЭлементОтбора.ПравоеЗначение = СписокЗначений;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОтборПоПредмету Тогда
		Пользователь = Настройки.Получить("Пользователь");
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Настройки.Удалить("Пользователь");
			Пользователь = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Ответственный", Пользователь,,, Истина);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
//получить входящую электронную почту
Процедура ПолучитьПочтуВыполнить()
	
	УправлениеЭлектроннойПочтойКлиент.ЗагрузитьПочтуПользователя(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
//установить флаг "отработано" в выбранных взаимодействиях - клиентская часть
Процедура ОтработаноВыполнить()
	
	Если ВыборКорректен() Тогда
		УстановитьФлагОтработано(Элементы.Список.ВыделенныеСтроки);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//установить ответственного в выбранных взаимодействиях - клиентская часть
Процедура ОтветственныйВыполнить()
	
	Если ВыборКорректен() Тогда
		Ответственный = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаСписка", Новый Структура("РежимВыбора",Истина));
		Если Ответственный <> Неопределено Тогда
			УстановитьОтветственного(Элементы.Список.ВыделенныеСтроки, Ответственный);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//установить предмет в выбранных взаимодействиях - клиентская часть
Процедура ПредметВыполнить()
	
	Если ВыборКорректен() Тогда
		
		Предмет = ОткрытьФормуМодально("ЖурналДокументов.Взаимодействия.Форма.ФормаВыборПредмета");
		Если Предмет <> Неопределено Тогда
			УстановитьПредмет(Элементы.Список.ВыделенныеСтроки, Предмет);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//устанавливает реквизит "отработать после" в выбранных взаимодействиях - клиентская часть
Процедура ОтложитьОбработкуВыполнить()
	
	Если ВыборКорректен() Тогда
		ДатаОтработки = ТекущаяДата();
		Если ВвестиДату(ДатаОтработки, "Отработать после") Тогда
			ОтложитьОбработку(Элементы.Список.ВыделенныеСтроки, ДатаОтработки);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Ответственный", Пользователь,,, ЗначениеЗаполнено(Пользователь));
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	//очистить связанные отборы
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,"ОтработатьПосле");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Отработано");
	Если Не ОтборПоПредмету Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Предмет");
	КонецЕсли;
	
	//установить отборы для режима
	Если Режим = "КИсполнению" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Ложь,,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтработатьПосле", ТекущаяДата(), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,Истина);
	ИначеЕсли Режим = "Новые" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Ложь,,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Предмет", , ВидСравненияКомпоновкиДанных.НеЗаполнено,, Истина);
	ИначеЕсли Режим = "Отложенные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Ложь,,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОтработатьПосле", , ВидСравненияКомпоновкиДанных.Заполнено,,Истина );
	ИначеЕсли Режим = "Отработанные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Отработано", Истина,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	//установить выбранную группировку
	Список.Группировка.Элементы.Очистить();
	Если СтрокаГруппировкаСписка = "ПоДате" Тогда
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Список.Группировка.ДоступныеПоляПолейГруппировок.Элементы.Найти("Дата").Поле;
	ИначеЕсли СтрокаГруппировкаСписка = "ПоОтветственному" Тогда
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Список.Группировка.ДоступныеПоляПолейГруппировок.Элементы.Найти("Ответственный").Поле;
	ИначеЕсли СтрокаГруппировкаСписка = "ПоПредмету" Тогда
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Поле = Список.Группировка.ДоступныеПоляПолейГруппировок.Элементы.Найти("Предмет").Поле;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		РезультатВыбора = ДокументыДоступныеДляСоздания.ВыбратьЭлемент("Выбор типа документа.");
		Если НЕ РезультатВыбора = Неопределено Тогда
			
			ДанныеЗаполнения = Новый Структура("Предмет,Контакт",ПредметДляОтбора,Контакт);
			ОткрытьФормуМодально("Документ." + РезультатВыбора.Значение + ".ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения));
			
		КонецЕсли; 		
		
	ИначеЕсли Копирование И ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Отказ = Истина;
		Предупреждение(НСтр("ru = 'Копирование входящих электронных писем запрещено'"));
	КонецЕсли;
	
КонецПроцедуры 

