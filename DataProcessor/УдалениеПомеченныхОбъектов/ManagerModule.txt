
// Возвращает помеченные на удаление объекты. Возможен отбор по фильтру.
//
Функция ПолучитьПомеченныеНаУдаление() Экспорт
	
	МассивПомеченные = НайтиПомеченныеНаУдаление();
	
	Результат = Новый Массив;
	Для Каждого ЭлементПомеченный Из МассивПомеченные Цикл
		Если ПравоДоступа("ИнтерактивноеУдалениеПомеченных", ЭлементПомеченный.Метаданные()) Тогда
			Результат.Добавить(ЭлементПомеченный);
		КонецЕсли
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция удаления объектов помеченных на удаление
// Параметры:
// Удаляемые - Массив - ссылки на объекты, которые требуется удалить
// ПроверятьСсылочнуюЦелостность - требуется проверка ссылочной целостности
//									если Истина, объекты на которые есть ссыки в ИБ
//									не будут удалены, а будут возвращены как результат функции
//
// Возвращаемое значение
// таблица значений, характеризующая ссылки на удаляемые объекты
//
Функция УдалитьПомеченныеОбъекты(знач Удаляемые, ТипыУдаленныхОбъектовМассив) Экспорт
	
	МонопольныйДоступ = Ложь;
	
	Попытка
		Если Не МонопольныйРежим() Тогда
			УстановитьМонопольныйРежим(Истина);
		КонецЕсли;
		МонопольныйДоступ = МонопольныйРежим();
	Исключение
		Возврат ЗаполнитьСтатусОперации(НСтр("ru = 'Не удалось установить монопольный режим'"), Ложь);
	КонецПопытки;
	
	ТипыУдаленныхОбъектов = ПолучитьТаблицуТиповУдаляемыхОбъектов();
	ОбновитьТаблицуТиповУдаляемыхОбъектов(ТипыУдаленныхОбъектов, Удаляемые);
	
	Найденные = Новый ТаблицаЗначений;
	Неудаленные = Новый Массив;
	
	Попытка
		УдалитьОбъекты(Удаляемые, Истина, Найденные);
		// В таблицу Найденные могли попасть записи об объектах информационной базы,
		// связанные с объектами информационной базы, связи с которыми должны фильтроваться
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		УстановитьМонопольныйРежим(Ложь);
		Возврат ЗаполнитьСтатусОперации(СообщениеОбОшибке, Ложь);
	КонецПопытки;
	
	Удаляемые = Новый Массив;
	ИсключенияПоискаСсылок = ОбщегоНазначенияПереопределяемый.ПолучитьИсключенияПоискаСсылок();
	СвернутыеПоСсылке = Найденные.Скопировать(, "Ссылка");
	СвернутыеПоСсылке.Свернуть("Ссылка");
	СвернутыеПоСсылке = СвернутыеПоСсылке.ВыгрузитьКолонку("Ссылка");
	Для Каждого ЭлементыПоСсылке Из СвернутыеПоСсылке Цикл
		СвязиПоСсылке = Найденные.НайтиСтроки(Новый Структура("Ссылка", ЭлементыПоСсылке.Ссылка));
		Для Каждого ЭлементСвязь Из СвязиПоСсылке Цикл
			Если ИсключенияПоискаСсылок.Найти(ЭлементСвязь.Метаданные.ПолноеИмя()) <> Неопределено Тогда
				Найденные.Удалить(ЭлементСвязь);
			КонецЕсли;
		КонецЦикла;
		Если Найденные.НайтиСтроки(Новый Структура("Ссылка", ЭлементыПоСсылке.Ссылка)).Количество() = 0 Тогда
			// Объект имел только фильтруемые связи - удаляем его
			Удаляемые.Добавить(ЭлементыПоСсылке.Ссылка);
		Иначе
			Неудаленные.Добавить(ЭлементыПоСсылке.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		// удаление без контроля ссылочной целостности (проконтролировали самостоятельно)
		УдалитьОбъекты(Удаляемые, Ложь);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		УстановитьМонопольныйРежим(Ложь);
		Возврат ЗаполнитьСтатусОперации(СообщениеОбОшибке, Ложь);
	КонецПопытки;
	
	Для Каждого НеудаленныйОбъект Из Неудаленные Цикл
		НайденныеСтроки = ТипыУдаленныхОбъектов.НайтиСтроки(Новый Структура("Тип", ТипЗнч(НеудаленныйОбъект)));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТипыУдаленныхОбъектов.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТипыУдаленныхОбъектовМассив = ТипыУдаленныхОбъектов.ВыгрузитьКолонку("Тип");
	
	Если МонопольныйДоступ Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ЗаполнитьСтатусОперации(Найденные);
	
КонецФункции

Функция ПолучитьТаблицуТиповУдаляемыхОбъектов()
	
	УдаляемыеТипыОбъектов = Новый ТаблицаЗначений;
	УдаляемыеТипыОбъектов.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	
	Возврат УдаляемыеТипыОбъектов;
	
КонецФункции

Процедура ОбновитьТаблицуТиповУдаляемыхОбъектов(Таблица, знач УдаляемыеОбъекты)
	
	Для Каждого УдаляемыйОбъект Из УдаляемыеОбъекты Цикл
		НовыйТип = Таблица.Добавить();
		НовыйТип.Тип = ТипЗнч(УдаляемыйОбъект);
	КонецЦикла;
	
	Таблица.Свернуть("Тип");
	
КонецПроцедуры

// Возвращает структуру с полями Статус и Значение по переданным параметрам
//
Функция ЗаполнитьСтатусОперации(знач Значение, знач Статус = Истина)
	
	Возврат Новый Структура("Статус, Значение", Статус, Значение);
	
КонецФункции
