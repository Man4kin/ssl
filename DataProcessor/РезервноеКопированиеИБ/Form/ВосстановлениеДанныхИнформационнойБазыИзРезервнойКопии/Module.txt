////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки открытия другой страницы формы восстановления данных.
&НаКлиенте
Процедура ПриОткрытииНовойСтраницы(СтраницаПомощника)
	ПодчиненныеСтраницы = Элементы.СтраницыЗагрузкиДанных.ПодчиненныеЭлементы;
	Если СтраницаПомощника = ПодчиненныеСтраницы.ДополнительныеНастройки Тогда
		Элементы.Назад.Видимость = Истина;
		АдминистраторИБ = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ.ИнформацияОПользователе.Имя;	
	КонецЕсли;	
	Элементы.СтраницыЗагрузкиДанных.ТекущаяСтраница = СтраницаПомощника;
КонецПроцедуры

// Устанавливает заговолок кнопки "Далее" в зависимости от текущей страницы помощника
&НаКлиенте
Процедура УстановитьЗаголовокКнопкиДалее(ПараметрЗаголовка)
	Если ПараметрЗаголовка Тогда
		Элементы.Готово.Заголовок = НСтр("ru = 'Далее >>'");
	Иначе
		Элементы.Готово.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
КонецПроцедуры

// Подключает обработкчик ожидания истечения таймаута перед принудительным стартом резервного копирования/восстановления данных.
&НаКлиенте
Процедура УстановитьОбработчикОжиданияИстеченияТаймаутаРезервногоКопирования()
	ПодключитьОбработчикОжидания("ИстечениеВремениОжидания", 300, Истина);
КонецПроцедуры

// Подключает обработчик ожидания при отложенном резервном копировании
&НаКлиенте              
Процедура УстановитьОбработчикОжиданияНачалаРезервногоКопирования() 
	ПодключитьОбработчикОжидания("ПроверкаНаЕдинственностьПодключения", 120);
КонецПроцедуры

// Процедура обновляет заголовок гиперссылки количества активных пользователей.
&НаКлиенте
Процедура ОбновитьКоличествоАктивныхПользователей()
	Элементы.КоличествоАктивныхПользователей.Заголовок = РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей();
КонецПроцедуры

// Функция запрашивает у пользователя и возвращает путь к файлу или каталогу.
&НаКлиенте
Функция ПолучитьПуть(РежимДиалога, Фильтр = "")
	Режим = РежимДиалога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	Если Не ПустаяСтрока(Фильтр) Тогда
		ДиалогОткрытияФайла.Фильтр = Фильтр;
	КонецЕсли;
		
	Если Режим = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите каталог'");
	Иначе
		ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите файл'");
	КонецЕсли;	
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога тогда
			Возврат ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Процедура обновления компоненты comcntr.
&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
#Если НЕ ВебКлиент Тогда
	ТекстКоманды = "";
	
	Попытка
		ИмяБатФайла		= ПолучитьИмяВременногоФайла("bat");
		ИмяФайлаЛога	= ПолучитьИмяВременногоФайла("log");
		БатФайл = Новый ЗаписьТекста(ИмяБатФайла);
		ТекстКоманды = "echo off";
		ТекстКоманды = ТекстКоманды + Символы.ПС + """regsvr32.exe"" /s """ + КаталогПрограммы() + "comcntr.dll""";
		ТекстКоманды = ТекстКоманды + Символы.ПС + "echo %errorlevel% >>""" + ИмяФайлаЛога + """";
		БатФайл.ЗаписатьСтроку(ТекстКоманды);
		БатФайл.Закрыть();
		Shell = Новый COMОбъект("WScript.Shell");
		Shell.Run(ИмяБатФайла, 0, Истина); // запуск бат-файла со спрятанным окном (0) и с ожиданием завершения (Истина)
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка при регистрации компоненты comcntr.'") + Символы.ПС;
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(), 
			"Ошибка", 
			ТекстСообщения + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		Предупреждение(ТекстСообщения + НСтр("ru = 'Подробности см. в Журнале регистрации.'"));
		Возврат;
		
	КонецПопытки;
	
	Стр = "";
	Попытка
		
		УдалитьФайлы(ИмяБатФайла);
		ФайлЛога	= Новый ЧтениеТекста(ИмяФайлаЛога);
		Стр			= ФайлЛога.ПрочитатьСтроку();
		ФайлЛога.Закрыть();
		УдалитьФайлы(ИмяФайлаЛога);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Ошибка при регистрации компоненты comcntr.'") + Символы.ПС;
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(),
			"Ошибка", 
			ТекстСообщения + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		Предупреждение(ТекстСообщения + НСтр("ru = 'Подробности см. в Журнале регистрации.'"));
		Возврат;
		
	КонецПопытки;
		
	Если СокрЛП(Стр) <> "0" Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при регистрации компоненты comcntr.'") + Символы.ПС;
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(),
			"Ошибка", 
			Строка(ТекущаяДата()) + " " + 	ТекстСообщения + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Код ошибки regsvr32: %1.
				| (Код ошибки 5 означает, что недостаточно прав доступа. Выполните командну от имени пользователя с правами администратора на локальной машине.)
			    |
				|Текст команды: 
				|%2'"), Стр, ТекстКоманды));
		ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		Предупреждение(ТекстСообщения + НСтр("ru = '
			|Подробности см. в Журнале регистрации.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Вопрос(НСтр("ru = 'Для завершения перерегистрации компоненты comcntr необходимо перезапустить сеанс 1С:Предприятия.
		|Перезапустить сейчас?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуСистемы(Ложь, Истина);
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ОбработкаЗакрытияФормы()
	ТекущаяСтраница = Элементы.СтраницыЗагрузкиДанных.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницыЗагрузкиДанных.ПодчиненныеЭлементы.СтраницаИнформацииИВыполненияРезервногоКопирования Тогда
		ТекстВопроса = НСтр("ru = 'Прервать подготовку к восстановлению данных?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена резервного копирования'"));
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	ОтключитьОбработчикОжидания("ИстечениеВремениОжидания");
	ОтключитьОбработчикОжидания("ПроверкаНаЕдинственностьПодключения");	
	ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
	Возврат Истина;
КонецФункции

// Проверка заполнения необходимых реквизитов формы.
&НаКлиенте 
Функция ПроверитьЗаполнениеРеквизитов()
	Если ПустаяСтрока (Объект.ФайлЗагрузкиРезервнойКопии) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана резервная копия для восстановления'");
		Если  (Объект.ПроводитьРезервноеКопированиеПриВосстановленииДанных И ПустаяСтрока(Объект.КаталогСРезервнымиКопиями)) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран каталог для резервной копии'");	
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ПроводитьРезервноеКопированиеПриВосстановленииДанных И НайтиФайлы(Объект.КаталогСРезервнымиКопиями).Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выбран несуществующий каталог для резервных копий.'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Функция проверяет возможность подключения к информационной базе с текущими параметрами.
&НаКлиенте
Функция ПроверитьДоступКИБ()

	Результат = Истина;
	ОбнаруженнаяОшибкаПодключения = "";
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля обновление завершится неуспешно.
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ПараметрыПодключения	= ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	ComConnector			= Новый COMОбъект(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ИмяCOMСоединителя);
	
	Попытка
		
		СтрокаСоединенияИнформационнойБазы = ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы + ПараметрыПодключения.СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
		
	Исключение
		
		Результат = Ложь;
		Инфо = ИнформацияОбОшибке();
		ОбнаруженнаяОшибкаПодключения = ОбнаруженнаяОшибкаПодключения + " " + НСтр("ru = 'Ошибка при проверке подключения к информационной базе'") + Символы.ПС +КраткоеПредставлениеОшибки(Инфо);
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(),
			"Ошибка", ОбнаруженнаяОшибкаПодключения);
		
	КонецПопытки;	
	
	Возврат Результат;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКОВ ОЖИДАНИЯ

&НаКлиенте                             
Процедура ИстечениеВремениОжидания()
	ОтключитьОбработчикОжидания("ПроверкаНаЕдинственностьПодключения");
	ТекстВопроса = НСтр("ru = 'Не удалось отключить всех пользователей от базы! Провести резервное копирование? (возможны ошибки при архивации)'");
	ТекстПояснения = НСтр("ru = 'Не удалось отключить пользователя'");
    Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ТекстПояснения, КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьРезервноеКопирование();
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаЕдинственностьПодключения()
	Если РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей() = 1 Тогда
		НачатьРезервноеКопирование();
	КонецЕсли;
КонецПроцедуры                 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'В клиент-серверном варианте работы резервное копирование следует выполнять сторонними средствами (средствами СУБД).'");
	КонецЕсли;
	Элементы.АктивныеПользователи1.Видимость = (ПолучитьСоединенияИнформационнойБазы().Количество() > 1);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если  НЕ ОбработкаЗакрытияФормы() Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Готово(Команда)
	ОчиститьСообщения();

	Если Не ПроверитьЗаполнениеРеквизитов() Тогда		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьДоступКИБ()  Тогда
		НоваяСтраницаПомощника = Элементы.СтраницыЗагрузкиДанных.ПодчиненныеЭлементы.ДополнительныеНастройки;
		ПриОткрытииНовойСтраницы(НоваяСтраницаПомощника);
		Возврат;
	КонецЕсли;

	Элементы.СтраницыЗагрузкиДанных.ТекущаяСтраница = Элементы.СтраницыЗагрузкиДанных.ПодчиненныеЭлементы.СтраницаИнформацииИВыполненияРезервногоКопирования; 
	Элементы.Закрыть.Доступность = Истина;
	ОбновитьКоличествоАктивныхПользователей();
	УстановитьЗаголовокКнопкиДалее(Истина);
	Элементы.Готово.Доступность = Ложь;
	
	Если РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей() = 1 Тогда
		СоединенияИБКлиент.УстановитьОбработчикиОжиданияЗавершенияРаботыПользователей(Истина);
		НачатьРезервноеКопирование();
	Иначе
		СоединенияИБКлиент.УстановитьОбработчикиОжиданияЗавершенияРаботыПользователей(Истина);
		УстановитьОбработчикОжиданияНачалаРезервногоКопирования();
		УстановитьОбработчикОжиданияИстеченияТаймаутаРезервногоКопирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуАрхивов2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОБъект.ФайлЗагрузкиРезервнойКопии = ПолучитьПуть(РежимДиалогаВыбораФайла.Открытие, "Архив резервной копии(*.zip)|*.zip");
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуАрхивовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Объект.КаталогСРезервнымиКопиями = ПолучитьПуть(РежимДиалогаВыбораФайла.ВыборКаталога);	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий1Нажатие(Элемент)
	ОткрытьФормуМодально("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейНажатие(Элемент)
	ОткрытьФормуМодально("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.СтраницыЗагрузкиДанных.ТекущаяСтраница = Элементы.СтраницыЗагрузкиДанных.ПодчиненныеЭлементы.СтраницаНастройкиЗагрузки;
	Элементы.Назад.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ФормаОтмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроводитьРезервноеКопированиеПриВосстановленииДанныхПриИзменении(Элемент)
	Элементы.ГруппаРезервнойКопииПриВосстановлении.Доступность = Объект.ПроводитьРезервноеКопированиеПриВосстановленииДанных;
КонецПроцедуры

&НаКлиенте
Процедура НадписьПерейтиВЖурналРегистрации1Нажатие(Элемент)
	ОткрытьФормуМодально("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

&НаКлиенте
Процедура НачатьРезервноеКопирование() 
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления();
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(), 
		"Информация",
		НСтр("ru = 'Выполняется восстановление данных информационной базы: '") + ИмяГлавногоФайлаСкрипта);
	
	ЗавершитьРаботуСистемы(Ложь);
	ЗапуститьПриложение("""" + ИмяГлавногоФайлаСкрипта + """",	РезервноеКопированиеИБКлиент.ПолучитьКаталогФайла(ИмяГлавногоФайлаСкрипта));
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//процедуры и функции подготовки восстановления данных

&НаКлиенте
Функция СформироватьФайлыСкриптаОбновления() 
	ПараметрыКопирования = РезервноеКопированиеИБКлиент.КлиентскиеПараметрыРезервногоКопирования();
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	СоздатьКаталог(ПараметрыКопирования.КаталогВременныхФайловОбновления);
	
	// Структура параметров необходима для их определения на клиенте и передачи на сервер
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаПрограммы"			, ПараметрыКопирования.ИмяФайлаПрограммы);
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"	, ПараметрыКопирования.СобытиеЖурналаРегистрации);
	СтруктураПараметров.Вставить("ИмяCOMСоединителя"			, ПараметрыРаботыКлиента.НастройкиОбновления.ИмяCOMСоединителя);
	СтруктураПараметров.Вставить("ЭтоБазоваяВерсияКонфигурации"	, ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации);
	СтруктураПараметров.Вставить("ИнформационнаяБазаФайловая"	, ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая);
	СтруктураПараметров.Вставить("ПараметрыСкрипта"				, ПолучитьПараметрыАутентификацииАдминистратораОбновления());
	
	ИменаМакетов = "ДопФайлРезервногоКопирования";
	ИменаМакетов = ИменаМакетов + ",ЗаставкаВосстановления";
	
	ТекстыМакетов = ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации);
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[0]);
	
	ИмяФайлаСкрипта = ПараметрыКопирования.КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[1]);
	ФайлСкрипта.Записать(ПараметрыКопирования.КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	ИмяГлавногоФайлаСкрипта = Неопределено;
	// Вспомогательный файл: splash.bmp
	БиблиотекаКартинок.ЗаставкаОбновленияКонфигурации.Записать(ПараметрыКопирования.КаталогВременныхФайловОбновления + "splash.bmp");
	// Вспомогательный файл: splash.ico
	БиблиотекаКартинок.ЗначокЗаставкиОбновленияКонфигурации.Записать(ПараметрыКопирования.КаталогВременныхФайловОбновления + "splash.ico");
	// Вспомогательный файл: progress.gif
	БиблиотекаКартинок.ДлительнаяОперация48.Записать(ПараметрыКопирования.КаталогВременныхФайловОбновления + "progress.gif");
	// Главный файл заставки: splash.hta
	ИмяГлавногоФайлаСкрипта = ПараметрыКопирования.КаталогВременныхФайловОбновления + "splash.hta";
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
	ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	
	Возврат ИмяГлавногоФайлаСкрипта;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления() 
	Результат = Новый Структура("ИмяПользователя,
	|ПарольПользователя,
	|СтрокаПодключения,
	|ПараметрыАутентификации,
	|СтрокаСоединенияИнформационнойБазы",
	Неопределено, "", "", "", "", "");
	
	ТекущиеСоединения = ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации);
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	Если НЕ ТекущиеСоединения.ЕстьАктивныеПользователи Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ИнформацияОПользователе.Имя;
	
	Результат.ИмяПользователя			= Пользователь;
	Результат.ПарольПользователя		= ПарольАдминистратораИБ;
	Результат.СтрокаПодключения			= "Usr=""" + Пользователь + """;Pwd=""" + ПарольАдминистратораИБ + """;";
	Результат.ПараметрыАутентификации	= "/N""" + Пользователь + """ /P""" + ПарольАдминистратораИБ + """ /WA-";
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	
	Результат = Новый Массив();
	Результат.Добавить(ПолучитьТекстСкрипта(СтруктураПараметров));
	
	ИменаМакетовМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	Для каждого ИмяМакета ИЗ ИменаМакетовМассив Цикл
		Результат.Добавить(Обработки.РезервноеКопированиеИБ.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТекстСкрипта(СтруктураПараметров)
	// Файл обновления конфигурации: main.js
	ШаблонСкрипта = Обработки.РезервноеКопированиеИБ.ПолучитьМакет("МакетФайлаЗагрузкаИБ");
	
	Скрипт = ШаблонСкрипта.ПолучитьОбласть("ОбластьПараметров");
	Скрипт.УдалитьСтроку(1);
	Скрипт.УдалитьСтроку(Скрипт.КоличествоСтрок());
	
	Текст = ШаблонСкрипта.ПолучитьОбласть("ОбластьРезервногоКопирования");
	Текст.УдалитьСтроку(1);
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
	
	Возврат ВставитьПараметрыСкрипта(Скрипт.ПолучитьТекст(), СтруктураПараметров) + Текст.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ВставитьПараметрыСкрипта(Знач Текст, Знач СтруктураПараметров)
	
	Результат = Текст;
	
	ИменаФайловОбновления = "";
	ИменаФайловОбновления = "[" + "" + "]";
	
	СтрокаСоединенияИнформационнойБазы = СтруктураПараметров.ПараметрыСкрипта.СтрокаСоединенияИнформационнойБазы +
	СтруктураПараметров.ПараметрыСкрипта.СтрокаПодключения; 
	
	ИмяИсполняемогоФайлаПрограммы = КаталогПрограммы() + СтруктураПараметров.ИмяФайлаПрограммы;
	
	// Определение пути к информационной базе.
	ПризнакФайловогоРежима = Неопределено;
	ПутьКИнформационнойБазе = СоединенияИБ.ПутьКИнформационнойБазе(ПризнакФайловогоРежима, 0);
	
	ПараметрПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима, "/F", "/S") + ПутьКИнформационнойБазе; 
	СтрокаПутиКИнформационнойБазе	= ?(ПризнакФайловогоРежима, ПутьКИнформационнойБазе, "");
	
	Результат = СтрЗаменить(Результат, "[ИменаФайловОбновления]"				, ИменаФайловОбновления);
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаПрограммы]"		, Подг(ИмяИсполняемогоФайлаПрограммы));
	Результат = СтрЗаменить(Результат, "[ПараметрПутиКИнформационнойБазе]"		, Подг(ПараметрПутиКИнформационнойБазе));
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКФайлуИнформационнойБазы]"	, Подг(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", "")))); 
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКФайлуИнформационнойБазы2]"	, Подг(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", ""))+	"1Cv8.1CD"));
	Результат = СтрЗаменить(Результат, "[СтрокаСоединенияИнформационнойБазы]"	, Подг(СтрокаСоединенияИнформационнойБазы));
	Результат = СтрЗаменить(Результат, "[ПараметрыАутентификацииПользователя]"	, Подг(СтруктураПараметров.ПараметрыСкрипта.ПараметрыАутентификации));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораИБ]"					, Подг(СтруктураПараметров.ПараметрыСкрипта.ИмяПользователя));
	Результат = СтрЗаменить(Результат, "[ПарольАдминистратораИБ]"				, Подг(СтруктураПараметров.ПараметрыСкрипта.ПарольПользователя));
	Результат = СтрЗаменить(Результат, "[СобытиеЖурналаРегистрации]"			, Подг(СтруктураПараметров.СобытиеЖурналаРегистрации));
	Результат = СтрЗаменить(Результат, "[АдресЭлектроннойПочты]", 
	"");
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораОбновления]"			, Подг(ИмяПользователя()));
	Результат = СтрЗаменить(Результат, "[СоздаватьРезервнуюКопию]"				,"true");
	
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии]",Подг(Объект.ФайлЗагрузкиРезервнойКопии));				 
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии2]",Подг(Объект.КаталогСРезервнымиКопиями+"\"));
	Результат = СтрЗаменить(Результат, "[ПроводитьДопРезервноеКопирование]",?(Объект.ПроводитьРезервноеКопированиеПриВосстановленииДанных,"true","false"));
	Результат = СтрЗаменить(Результат, "[ВосстанавливатьИнформационнуюБазу]"	, "false");
	Результат = СтрЗаменить(Результат, "[БлокироватьСоединенияИБ]"				, ?(СтруктураПараметров.ИнформационнаяБазаФайловая, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ИмяCOMСоединителя]"					, Подг(СтруктураПараметров.ИмяCOMСоединителя));
	Результат = СтрЗаменить(Результат, "[ИспользоватьCOMСоединитель]"			, ?(СтруктураПараметров.ЭтоБазоваяВерсияКонфигурации, "false", "true"));
	Результат = СтрЗаменить(Результат, "[КаталогВременныхФайлов]"				, Подг(КаталогВременныхФайлов()));
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция Подг(Знач Текст)
	Возврат "'" + СтрЗаменить(Текст, "\", "\\") + "'";
КонецФункции

&НаСервере
Функция ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = ПолучитьИнформациюОНаличииСоединений();
	Результат.Вставить("СтрокаСоединенияИнформационнойБазы", 
	СоединенияИБ.ПолучитьСтрокуСоединенияИнформационнойБазы(0));
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста          
Функция ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура(
	"НаличиеАктивныхСоединений, НаличиеCOMСоединений, НаличиеСоединенияКонфигуратором, ЕстьАктивныеПользователи",
	НаличиеАктивныхСоединений(), НаличиеCOMСоединений(),
	НаличиеСоединенияКонфигуратором(), ЕстьАктивныеПользователи());
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСоединениеКонфигуратором(СоединениеИнформационнойБазы)
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("Designer");
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоCOMСоединение(СоединениеИнформационнойБазы)
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("COMConnection");
КонецФункции 

// Проверка наличия соединения конфигуратором.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединение есть,
//                 Ложь, если соединения нет.
&НаСервереБезКонтекста
Функция НаличиеСоединенияКонфигуратором()
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоСоединениеКонфигуратором(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция НаличиеCOMСоединений()
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоCOMСоединение(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Проверка наличия активных соединений с информационной базой.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединения есть,
//                 Ложь, если соединений нет.
&НаСервереБезКонтекста
Функция НаличиеАктивныхСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() > 1;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАктивныеПользователи(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0;
Конецфункции
