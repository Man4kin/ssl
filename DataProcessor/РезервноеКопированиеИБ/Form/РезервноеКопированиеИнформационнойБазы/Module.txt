////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Обработчик изменения страницы помощника. Открывает новую страницу и выполняет необходимые действия.
// Параметры :
// НоваяСтраницаПомощника  - страница , которую необходимо открыть в данный момент.
&НаКлиенте
Процедура ПриОткрытииНовойСтраницы(НоваяСтраница, ТекстПути = "") 
	ПодчиненныеСтраницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;	
	Если НоваяСтраница = ПодчиненныеСтраницы.СтраницаВыполненияРезервногоКопирования Тогда
		
		Элементы.АктивныеПользователи.Видимость = ПолучитьДоступность();
		Элементы.НадписьНетАктивныхПользователей.Видимость = Не (Элементы.АктивныеПользователи.Видимость);
		УстановитьЗаголовокКнопкиДалее(Истина);
		Элементы.Назад.Видимость = Ложь;
		
	ИначеЕсли  НоваяСтраница = ПодчиненныеСтраницы.СтраницаИнформацииИВыполненияРезервногоКопирования Тогда
		
		Элементы.Отмена.Доступность = Истина;
		ОбновитьКоличествоАктивныхПользователей();
		УстановитьЗаголовокКнопкиДалее(Истина);
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Доступность = Ложь;
		
		
		Если РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей() = 1 Тогда
			
			ОбщегоНазначенияКлиент.ПроверитьВключениеЖурналаРегистрации();
			//Установим блокировку 
			СоединенияИБ.УстановитьБлокировкуСоединений("Резервное копирование", "РезервноеКопирование");
			СоединенияИБКлиент.УстановитьОбработчикиОжиданияЗавершенияРаботыПользователей(Истина);
			НачатьРезервноеКопирование();
			
		Иначе
			Если ДатаОтложенногоРезервногоКопирования <= ТекущаяДата() Тогда
				СоединенияИБ.УстановитьБлокировкуСоединений("Резервное копирование", "РезервноеКопирование");
				СоединенияИБКлиент.УстановитьОбработчикиОжиданияЗавершенияРаботыПользователей(Истина);
				УстановитьОбработчикОжиданияНачалаРезервногоКопирования();
				УстановитьОбработчикОжиданияИстеченияТаймаутаРезервногоКопирования();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НоваяСтраница = ПодчиненныеСтраницы.СтраницаОшибокПриКопировании 
		ИЛИ НоваяСтраница = ПодчиненныеСтраницы.СтраницаУспешногоВыполненияКопирования Тогда
		Элементы.Далее.Видимость= Ложь;
		Элементы.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
		Элементы.НадписьПутиКопирования.Заголовок = ТекстПути;		
		РезервноеКопированиеИБСервер.УстановитьРезультатРезервногоКопирования();
		
	ИначеЕсли НоваяСтраница = ПодчиненныеСтраницы.ДополнительныеНастройки Тогда
		Элементы.Назад.Видимость = Истина;
		АдминистраторИБ = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ.ИнформацияОПользователе.Имя;
	КонецЕсли;	
		
	Если НоваяСтраница = Неопределено Тогда
		Закрыть();
	Иначе
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПользователю(ТекстОповещения)
	ПоказатьОповещениеПользователя("Резервное копирование", , ТекстОповещения)
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДоступКИБ()
	Результат = Истина;
	ОбнаруженнаяОшибкаПодключения = "";
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля обновление завершится неуспешно.
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ПараметрыПодключения	= ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	ComConnector			= Новый COMОбъект(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ИмяCOMСоединителя);
	
	Попытка
		
		СтрокаСоединенияИнформационнойБазы = ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы + ПараметрыПодключения.СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
		
	Исключение
		
		Результат = Ложь;
		Инфо = ИнформацияОбОшибке();
		ОбнаруженнаяОшибкаПодключения = ОбнаруженнаяОшибкаПодключения + " " + НСтр("ru = 'Ошибка при проверке подключения к информационной базе'") + Символы.ПС + КраткоеПредставлениеОшибки(Инфо);
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(),
			"Ошибка",  ОбнаруженнаяОшибкаПодключения);
		
	КонецПопытки;	
	
	Возврат Результат;
КонецФункции

// Обработчик значения переключателя "Код типа резервного копирования" при нажатии на кнопку "Далее".
&НаКлиенте
Процедура ОбработатьВыборРежимаИнтерактивногоКопирования()
	НоваяСтраницаПомощника = Неопределено;
	
	Если НЕ ПроверитьДоступКИБ()  Тогда
		НоваяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.ДополнительныеНастройки;
		ПриОткрытииНовойСтраницы(НоваяСтраницаПомощника);
		Возврат;
	КонецЕсли;

	КодПереключателя = Объект.КодТипаИнтерактивногоРезервногоКопирования;
	
	Если КодПереключателя = 1 Тогда
		
		НоваяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаИнформацииИВыполненияРезервногоКопирования;
		
	ИначеЕсли КодПереключателя = 2 Тогда
		
		ПериодОтложенногоКопирования = ТекущаяДата() + (Объект.ПериодОтложенногоОповещения*ПолучитьПериодОтложенногоКопирования());
		ДатаОтложенногоРезервногоКопирования = ПериодОтложенногоКопирования;
		РезервноеКопированиеИБКлиент.ПодключитьОжиданиеРезервногоКопирования();
		ОповещениеПользователю(НСтр("ru ='Резервное копирование будет проведено через указанный вами срок'"));
			
		ЗапомнитьПараметрыАдминистратора();
		
	ИначеЕсли КодПереключателя = 3 Тогда
		
		ОповещатьОРезервномКопированииПриЗавершенииСеанса = Истина;
		ОповещениеПользователю(НСтр("ru ='Резервное копирование будет проведено при завершении работы программы'"));
		ЗапомнитьПараметрыАдминистратора();
		
	КонецЕсли;
	ПриОткрытииНовойСтраницы(НоваяСтраницаПомощника);
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПараметрыАдминистратора()
	ПараметрыАдминистратораОбновления = ПолучитьПараметрыАутентификацииАдминистратораОбновления();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПериодОтложенногоКопирования()
	ПериодОповещения = ?(Объект.ЕдиницаИзмеренияПериодаОтложенногоОповещения = "Месяц", (ДобавитьМесяц(ТекущаяДата(), Объект.ПериодОтложенногоОповещения) - ТекущаяДата()), РезервноеКопированиеИБСервер.ПолучитьВременнойПараметрПоСтроке(Объект.ЕдиницаИзмеренияПериодаОтложенногоОповещения));
	Возврат ПериодОповещения;
КонецФункции

&НаКлиенте
Процедура УстановитьОбработчикОжиданияИстеченияТаймаутаРезервногоКопирования()
	ПодключитьОбработчикОжидания("ИстечениеВремениОжидания", 300, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИстечениеВремениОжидания()
	ОтключитьОбработчикОжидания("ПроверкаНаЕдинственностьПодключения");
	ТекстВопроса = НСтр("ru = 'Не удалось отключить всех пользователей от базы! Провести резервное копирование? (возможны ошибки при архивации)'");
	ТекстПояснения = НСтр("ru = 'Не удалось отключить пользователя'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ТекстПояснения, КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьРезервноеКопирование();
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьОбработчикОжиданияНачалаРезервногоКопирования()
	ПодключитьОбработчикОжидания("ПроверкаНаЕдинственностьПодключения", 30);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаЕдинственностьПодключения()
	Если РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей() = 1 Тогда
		НачатьРезервноеКопирование();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиДалее(ПараметрЗаголовка)
	Если ПараметрЗаголовка Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'");
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПуть(РежимДиалога)
	Режим = РежимДиалога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если Режим = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите каталог'");
	Иначе
		ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите файл'");
	КонецЕсли;	
		
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога тогда
			Возврат ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновитьКоличествоАктивныхПользователей()
	Элементы.КоличествоАктивныхПользователей.Заголовок = РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей();
КонецПроцедуры

&НаКлиенте
Процедура НачатьРезервноеКопирование() 
	ПриИзмененииВремениОповещения(0, 0);
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления();
	
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(),
		"Информация",  НСтр("ru = 'Выполняется резервное копирование информационной базы: '") + ИмяГлавногоФайлаСкрипта);
		
	ЗавершитьРаботуСистемы(Ложь);
	ЗапуститьПриложение("""" + ИмяГлавногоФайлаСкрипта + """",	РезервноеКопированиеИБКлиент.ПолучитьКаталогФайла(ИмяГлавногоФайлаСкрипта));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
КонецПроцедуры

&НаКлиенте
Функция ОбработкаЗакрытияФормы()
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаИнформацииИВыполненияРезервногоКопирования Тогда
		
		ТекстВопроса = НСтр("ru = 'Прервать подготовку к резервному копированию данных?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена резервного копирования'"));
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	СоединенияИб.РазрешитьРаботуПользователей();
	ОтключитьОбработчикОжидания("ИстечениеВремениОжидания");
	ОтключитьОбработчикОжидания("ПроверкаНаЕдинственностьПодключения");	
	ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
	Возврат Истина;
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Обработчики событий формы на сервере и изменения настроек резервного копирования.

// Возвращает страницу, которая должна быть показана пользователю при открытии окна помощника.
// Если ПолныеПрава - тогда попадаем на функциональную страницу. 
// Если нет - тогда на информационную страницу с просьбой обратиться к сис. администратору.
// Состав элементов функциональной страницы зависит от архитектуры информационной базы.
&НаСервере
Функция ОпределитьСтраницуПоПравамИАрхитектуре(ПараметрОткрытия)
	СтраницыПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	СтартоваяСтраница = Неопределено;
	Если Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			СтартоваяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаВыполненияРезервногоКопирования;
		КонецЕсли;
	Иначе
		СтартоваяСтраница = СтраницыПомощника.СтраницаДляПользователяБезПрав;
	КонецЕсли;
	Возврат СтартоваяСтраница;	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриИзмененииВремениОповещения(ПараметрКоличества,ПараметрТипа)	
	ПараметрыОповещенияОРезервномКопировании = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования();
	Если ПараметрКоличества = -1 Тогда // если пользователь отказался от оповещений
		ОстановитьСервисОповещенияОРезервномКопировании();
	ИначеЕсли ПараметрКоличества = 0 Тогда // если пользователь отказался от копирования, но хочет получать оповещения
		ПараметрыОповещенияОРезервномКопировании.ДатаПоследнегоОповещения = ТекущаяДата();		
	Иначе	
		ПараметрыОповещенияОРезервномКопировании.ДатаПоследнегоОповещения = ТекущаяДата();
		ПараметрыОповещенияОРезервномКопировании.ПериодОповещения = ПараметрКоличества*?(ПараметрТипа = "Месяц", (ДобавитьМесяц(ТекущаяДата(), ПараметрКоличества) - ТекущаяДата()), РезервноеКопированиеИБСервер.ПолучитьВременнойПараметрПоСтроке(ПараметрТипа));
	КонецЕсли;
	ПараметрыОповещенияОРезервномКопировании.НастроеноПользователем = Истина;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(ПараметрыОповещенияОРезервномКопировании);	
Конецпроцедуры

&НаСервереБезКонтекста
Процедура ОстановитьСервисОповещенияОРезервномКопировании()
	ПараметрыОповещенияОРезервномКопировании= РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования();
	ПараметрыОповещенияОРезервномКопировании.ДатаПоследнегоОповещения = Дата('00010101');
	ПараметрыОповещенияОРезервномКопировании.ПериодОповещения = 0;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(ПараметрыОповещенияОРезервномКопировании);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПутьАрхиваСКопиями(Путь)
	НастройкиПути = РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования();
	НастройкиПути.КаталогХраненияРезервныхКопий = Путь;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(НастройкиПути);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступность()
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() > 1;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если  НЕ ОбработкаЗакрытияФормы() Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаИнформацииИВыполненияРезервногоКопирования Тогда
		Если Объект.КодТипаРезервногоКопирования <>1 Тогда	
			АдминистраторИБ = ПараметрыАдминистратораОбновления.ИмяПользователя;
			ПарольАдминистратораИБ = ПараметрыАдминистратораОбновления.ПарольПользователя;
			ПарольАдминистратораИБПроверка = ПараметрыАдминистратораОбновления.ПарольПользователя;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПути) Тогда
		ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ТекущаяСтраница, ТекстПути);
	Иначе
		ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ТекущаяСтраница);
	КонецЕсли;
	
	УстановитьЗаголовокКнопкиДалее(Истина);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение НСтр("ru = 'В клиент-серверном варианте работы резервное копирование следует выполнять сторонними средствами (средствами СУБД).'");
	КонецЕсли;
		
	НастройкиРезервногоКопирования = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования();
	Объект.КодТипаРезервногоКопирования = НастройкиРезервногоКопирования.ВыборПунктаНастройки;
	Объект.КодТипаИнтерактивногоРезервногоКопирования = 1;	
	Объект.ОчисткаКаталогаСРезервнымиКопиямиПриПереполнении = Истина;
	Объект.ПериодХраненияРезервныхКопий = 1;
	Объект.ЕдиницаИзмеренияПериодаХраненияРезервныхКопий = "Месяц";
	Объект.ПериодОтложенногоОповещения = 1;
	Объект.ЕдиницаИзмеренияПериодаОповещения = "День";
	Объект.ЕдиницаИзмеренияПериодаОтложенногоОповещения = "Час";
	Объект.ТипОграниченияКаталогаСРезервнымиКопиями = "ПоПериоду";
	Объект.ПериодОповещения = 1;
	Объект.ВариантРасписанияРезервногоКопирования = "1";
	Объект.НажатиеГиперссылки = Ложь;
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиРезервногоКопирования.РасписаниеКопирования);
	Объект.СтрокаРасписания = Строка(Расписание);
	ПараметрОткрытия = РезервноеКопированиеИБСервер.ПолучитьВариантОповещения();

	Если Параметры.Свойство("ТекстПути") Тогда
		ТекстПути= Параметры.ТекстПути;
		ТекущаяСтраница = Параметры.ТекущаяСтраница;
	Иначе
		ТекстПути = "";
		ТекущаяСтраница = "";
	КонецЕсли;
	Элементы.СтраницыПомощника.ТекущаяСтраница = ОпределитьСтраницуПоПравамИАрхитектуре(ПараметрОткрытия);
	
	Если Параметры.Свойство("ТипВызова") Тогда
		
		Если Параметры.ТипВызова = 1 Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы[Параметры.ТекущаяСтраница];
			Элементы.НадписьВремяОжиданияРезервногоКопирования.Заголовок = Параметры.ЗаголовокНадписи;
		КонецЕсли;
		
		Если Параметры.ТипВызова = 2 Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы[Параметры.ТекущаяСтраница];		
		КонецЕсли;
		
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаИнформацииИВыполненияРезервногоКопирования Тогда
			Если Объект.КодТипаРезервногоКопирования = 1 Тогда	
				
				СтруктураАдминистраторскихНастроек = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
				АдминистраторИБ = СтруктураАдминистраторскихНастроек.ИмяАдминистратораИБ;
				ПарольАдминистратораИБ = СтруктураАдминистраторскихНастроек.ПарольАдминистратораИБ;
				ПарольАдминистратораИБПроверка = СтруктураАдминистраторскихНастроек.ПарольАдминистратораИБ;
			
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.КаталогСРезервнымиКопиями =НастройкиРезервногоКопирования.КаталогХраненияРезервныхКопий;
	Если НастройкиРезервногоКопирования.ПервыйЗапуск Тогда
		ТекстЗаголовка = "ru = 'Резервное копирование еще ни разу не проводилось'"; 
	Иначе
		ТекстЗаголовка = "ru = 'В последний раз резервное копирование проводилось: %1'"; 
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Формат(РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования().ДатаПоследнегоРезервногоКопирования,"ДЛФ=ДДВ"));
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ТекстЗаголовка,МассивПараметров);
	КонецЕсли;
	
	Элементы.НадписьДатаПроведенияПоследнегоРезервногоКопирования.Заголовок = НСтр(ТекстЗаголовка);
	
	Если Объект.КодТипаРезервногоКопирования = 1 Тогда
		Элементы.НадписьПереходаКОбщимНастройкам.Заголовок = НСтр("ru = 'Настроено резервное копирование по расписанию: '")+Объект.СтрокаРасписания;
	ИначеЕсли Объект.КодТипаРезервногоКопирования = 2 Тогда
		Элементы.НадписьПереходаКОбщимНастройкам.Заголовок = НСтр("ru = 'Резервное копирование выполняется сторонними средствами'");
	Иначе
		Элементы.НадписьПереходаКОбщимНастройкам.Заголовок = НСтр("ru = 'Резервное копирование не настроено'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПути) Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы[ТекущаяСтраница];
	Иначе
		Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ТекущаяСтраница = Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ПодчиненныеЭлементы.СтраницаКопированиеСейчас;
		Элементы.НадписьПояснениеКИнтерактивномуКопированию.Заголовок = НСтр("ru = 'Нажмите ""Далее"" для выполнения резервного копирования прямо сейчас.'");
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	ОчиститьСообщения();
	
	Если ПустаяСтрока(Объект.КаталогСРезервнымиКопиями) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не выбран каталог для резервной копии.'"));
		Возврат;
	КонецЕсли;
	
	Если  НайтиФайлы(Объект.КаталогСРезервнымиКопиями).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Вы указали несуществующий каталог.'"));
		Возврат;
	КонецЕсли;
    ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаВыполненияРезервногоКопирования Тогда
		
		ОбработатьВыборРежимаИнтерактивногоКопирования();
		УстановитьПутьАрхиваСКопиями(Объект.КаталогСРезервнымиКопиями);
		
	ИначеЕсли ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.ДополнительныеНастройки Тогда
		Если ПарольАдминистратораИБ  <> ПарольАдминистратораИБПроверка Тогда
			
			Текст = НСтр("ru = 'Введенный пароль и проверка не совпадают'");
			Предупреждение(Текст);
			Возврат;
			
		КонецЕсли;
		ОбработатьВыборРежимаИнтерактивногоКопирования();
	Иначе
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействийНажатие(Элемент)
	ОткрытьФормуМодально("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейНажатие(Элемент)
	ОткрытьФормуМодально("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
КонецПроцедуры

&НаКлиенте
Процедура НадписьЖурналРегистрацииНажатие(Элемент)
	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации");
КонецПроцедуры

&НаКлиенте
Процедура ПереключательИнтерактивногоРезервногоКопированияПриИзменении(Элемент)
	ПараметрПереключения = Объект.КодТипаИнтерактивногоРезервногоКопирования;
	Если ПараметрПереключения = 1 Тогда
		УстановитьЗаголовокКнопкиДалее(Истина);
		Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ТекущаяСтраница = Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ПодчиненныеЭлементы.СтраницаКопированиеСейчас;
		Элементы.НадписьПояснениеКИнтерактивномуКопированию.Заголовок = НСтр("ru = 'Нажмите ""Далее"" для выполнения резервного копирования прямо сейчас.'");
	ИначеЕсли ПараметрПереключения = 2 Тогда
		УстановитьЗаголовокКнопкиДалее(Ложь);
		Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ТекущаяСтраница = Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ПодчиненныеЭлементы.СтраницаКопированиеПозднее;
		Элементы.НадписьПояснениеКИнтерактивномуКопированию.Заголовок = НСтр("ru = 'Нажмите ""Готово"", чтобы закрыть помощник. Резервное копирование будет проведено через указанный период.'");
	ИначеЕсли ПараметрПереключения = 3  Тогда
		УстановитьЗаголовокКнопкиДалее(Ложь);
		Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ТекущаяСтраница = Элементы.ПараметрыИнтерактивногоРезервногоКопирования.ПодчиненныеЭлементы.СтраницаПустая;
		Элементы.НадписьПояснениеКИнтерактивномуКопированию.Заголовок = НСтр("ru = 'Нажмите ""Готово"", чтобы закрыть помощник. Резервное копирование начнется перед закрытием программы.'");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуАрхивовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Объект.КаталогСРезервнымиКопиями  = ПолучитьПуть(РежимДиалогаВыбораФайла.ВыборКаталога);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПереходаКОбщимНастройкамНажатие(Элемент)
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы());
	
	Если ЭтоФайловаяБаза Тогда
		ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница", 2, "СтраницаНачальногоОповещения");
		ОткрытьФорму("Обработка.НастройкаРезервногоКопированияИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.ДополнительныеНастройки Тогда
		ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаВыполненияРезервногоКопирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьПерейтиВЖурналРегистрации1Нажатие(Элемент)
	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подготовки резервного копирования

&НаКлиенте
Функция СформироватьФайлыСкриптаОбновления() 
	
	ПараметрыРезервногоКопирования = РезервноеКопированиеИБКлиент.КлиентскиеПараметрыРезервногоКопирования();
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	СоздатьКаталог(ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления);
	
	// Структура параметров необходима для их определения на клиенте и передачи на сервер
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаПрограммы"			, ПараметрыРезервногоКопирования.ИмяФайлаПрограммы);
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"	, ПараметрыРезервногоКопирования.СобытиеЖурналаРегистрации);
	СтруктураПараметров.Вставить("ИмяCOMСоединителя"			, ПараметрыРаботыКлиента.НастройкиОбновления.ИмяCOMСоединителя);
	СтруктураПараметров.Вставить("ЭтоБазоваяВерсияКонфигурации"	, ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации);
	СтруктураПараметров.Вставить("ИнформационнаяБазаФайловая"	, ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая);
	СтруктураПараметров.Вставить("ПараметрыСкрипта"				, ПолучитьПараметрыАутентификацииАдминистратораОбновления());
	
	ИменаМакетов = "ДопФайлРезервногоКопирования";	
	ИменаМакетов = ИменаМакетов + ",ЗаставкаРезервногоКопирования";
	ТекстыМакетов = ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации);
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[0]);
	
	ИмяФайлаСкрипта = ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[1]);
	ФайлСкрипта.Записать(ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	ИмяГлавногоФайлаСкрипта = Неопределено;
	// Вспомогательный файл: splash.bmp
	БиблиотекаКартинок.ЗаставкаОбновленияКонфигурации.Записать(ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления + "splash.bmp");
	// Вспомогательный файл: splash.ico
	БиблиотекаКартинок.ЗначокЗаставкиОбновленияКонфигурации.Записать(ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления + "splash.ico");
	// Вспомогательный файл: progress.gif
	БиблиотекаКартинок.ДлительнаяОперация48.Записать(ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления + "progress.gif");
	// Главный файл заставки: splash.hta
	ИмяГлавногоФайлаСкрипта = ПараметрыРезервногоКопирования.КаталогВременныхФайловОбновления + "splash.hta";
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
	ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	
	Возврат ИмяГлавногоФайлаСкрипта;	
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления() 
	
	Результат = Новый Структура("ИмяПользователя,
	|ПарольПользователя,
	|СтрокаПодключения,
	|ПараметрыАутентификации,
	|СтрокаСоединенияИнформационнойБазы",
	Неопределено, "", "", "", "", "");
	
	ТекущиеСоединения = ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации);
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	//Если НЕ ТекущиеСоединения.ЕстьАктивныеПользователи Тогда
	//	Возврат Результат;
	//КонецЕсли;
	
	Пользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ИнформацияОПользователе.Имя;
	
	Результат.ИмяПользователя			= Пользователь;
	Результат.ПарольПользователя		= ПарольАдминистратораИБ;
	Результат.СтрокаПодключения			= "Usr=""" + Пользователь + """;Pwd=""" + ПарольАдминистратораИБ + """;";
	Результат.ПараметрыАутентификации	= "/N""" + Пользователь + """ /P""" + ПарольАдминистратораИБ + """ /WA-";
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		
	Результат = Новый Массив();
	Результат.Добавить(ПолучитьТекстСкрипта(СтруктураПараметров));
	
	ИменаМакетовМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	
	Для каждого ИмяМакета ИЗ ИменаМакетовМассив Цикл
		Результат.Добавить(Обработки.РезервноеКопированиеИБ.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстСкрипта(СтруктураПараметров)
	
	// Файл обновления конфигурации: main.js
	ШаблонСкрипта = Обработки.РезервноеКопированиеИБ.ПолучитьМакет("МакетФайлаРезервногоКопирования");
	
	Скрипт = ШаблонСкрипта.ПолучитьОбласть("ОбластьПараметров");
	Скрипт.УдалитьСтроку(1);
	Скрипт.УдалитьСтроку(Скрипт.КоличествоСтрок());
	
	Текст = ШаблонСкрипта.ПолучитьОбласть("ОбластьРезервногоКопирования");
	Текст.УдалитьСтроку(1);
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
	
	Возврат ВставитьПараметрыСкрипта(Скрипт.ПолучитьТекст(), СтруктураПараметров) + Текст.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ВставитьПараметрыСкрипта(Знач Текст, Знач СтруктураПараметров)
	
	Результат = Текст;
	ИменаФайловОбновления = "";
	ИменаФайловОбновления = "[" + "" + "]";
	
	СтрокаСоединенияИнформационнойБазы = СтруктураПараметров.ПараметрыСкрипта.СтрокаСоединенияИнформационнойБазы +
	СтруктураПараметров.ПараметрыСкрипта.СтрокаПодключения; 
	
	ИмяИсполняемогоФайлаПрограммы = КаталогПрограммы() + СтруктураПараметров.ИмяФайлаПрограммы;
	
	// Определение пути к информационной базе.
	ПризнакФайловогоРежима = Неопределено;
	ПутьКИнформационнойБазе = СоединенияИБ.ПутьКИнформационнойБазе(ПризнакФайловогоРежима, 0);
	
	
	ПараметрПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима, "/F", "/S") + ПутьКИнформационнойБазе; 
	СтрокаПутиКИнформационнойБазе	= ?(ПризнакФайловогоРежима, ПутьКИнформационнойБазе, "");
	
	Результат = СтрЗаменить(Результат, "[ИменаФайловОбновления]"				, ИменаФайловОбновления);
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаПрограммы]"		, Подг(ИмяИсполняемогоФайлаПрограммы));
	Результат = СтрЗаменить(Результат, "[ПараметрПутиКИнформационнойБазе]"		, Подг(ПараметрПутиКИнформационнойБазе));
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКФайлуИнформационнойБазы]"	, Подг(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", "")) +
	"1Cv8.1CD"));
	Результат = СтрЗаменить(Результат, "[СтрокаСоединенияИнформационнойБазы]"	, Подг(СтрокаСоединенияИнформационнойБазы));
	Результат = СтрЗаменить(Результат, "[ПараметрыАутентификацииПользователя]"	, Подг(СтруктураПараметров.ПараметрыСкрипта.ПараметрыАутентификации));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораИБ]"					, Подг(СтруктураПараметров.ПараметрыСкрипта.ИмяПользователя));
	Результат = СтрЗаменить(Результат, "[ПарольАдминистратораИБ]"				, Подг(СтруктураПараметров.ПараметрыСкрипта.ПарольПользователя));
	Результат = СтрЗаменить(Результат, "[СобытиеЖурналаРегистрации]"			, Подг(СтруктураПараметров.СобытиеЖурналаРегистрации));
	Результат = СтрЗаменить(Результат, "[АдресЭлектроннойПочты]", 
	"");
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораОбновления]"			, Подг(ИмяПользователя()));
	Результат = СтрЗаменить(Результат, "[СоздаватьРезервнуюКопию]"				,"true");
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии]"				,Подг(Объект.КаталогСРезервнымиКопиями+"\backup"+СтрокаКаталогаИзДаты()));				 
	Результат = СтрЗаменить(Результат, "[ВосстанавливатьИнформационнуюБазу]"	, "false");
	Результат = СтрЗаменить(Результат, "[БлокироватьСоединенияИБ]"				, ?(СтруктураПараметров.ИнформационнаяБазаФайловая, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ИмяCOMСоединителя]"					, Подг(СтруктураПараметров.ИмяCOMСоединителя));
	Результат = СтрЗаменить(Результат, "[ИспользоватьCOMСоединитель]"			, ?(СтруктураПараметров.ЭтоБазоваяВерсияКонфигурации, "false", "true"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтрокаКаталогаИзДаты()
	СтрокаВозврата = "";
	ДатаСейчас = ТекущаяДата();
	СтрокаВозврата = Формат(ДатаСейчас, "ДФ = гггг_ММ_дд_ЧЧ_мм_сс");
	Возврат СтрокаВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция Подг(Знач Текст)
	Возврат "'" + СтрЗаменить(Текст, "\", "\\") + "'";
КонецФункции

&НаСервере
Функция ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = ПолучитьИнформациюОНаличииСоединений();
	Результат.Вставить("СтрокаСоединенияИнформационнойБазы", 
	СоединенияИБ.ПолучитьСтрокуСоединенияИнформационнойБазы(0));
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура(
	"НаличиеАктивныхСоединений, НаличиеCOMСоединений, НаличиеСоединенияКонфигуратором, ЕстьАктивныеПользователи",
	НаличиеАктивныхСоединений(), НаличиеCOMСоединений(),
	НаличиеСоединенияКонфигуратором(), ЕстьАктивныеПользователи());
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСоединениеКонфигуратором(СоединениеИнформационнойБазы)
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("Designer");
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоCOMСоединение(СоединениеИнформационнойБазы)
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("COMConnection");
КонецФункции 

// Проверка наличия соединения конфигуратором.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединение есть,
//                 Ложь, если соединения нет.
&НаСервереБезКонтекста
Функция НаличиеСоединенияКонфигуратором()
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоСоединениеКонфигуратором(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция НаличиеCOMСоединений()
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоCOMСоединение(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Проверка наличия активных соединений с информационной базой.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединения есть,
//                 Ложь, если соединений нет.
&НаСервереБезКонтекста
Функция НаличиеАктивныхСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() > 1;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАктивныеПользователи(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0;
Конецфункции

