////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает страницу, которая должна быть показана пользователю при открытии окна помощника.
// Если ПолныеПрава - тогда попадаем на функциональную страницу. 
// Если нет - тогда на информационную страницу с просьбой обратиться к сис. администратору.
// Состав элементов функциональной страницы зависит от архитектуры информационной базы.
&НаСервере
Функция ОпределитьСтраницуПоПравамИАрхитектуре(ПараметрОткрытия)
	СтраницыПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	СтартоваяСтраница = Неопределено;
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		
		СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
		ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияСБД);

		Если ЭтоФайловаяБаза Тогда
			СтартоваяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНачальногоОповещения;		
		Иначе
			
			СтартоваяСтраница = СтраницыПомощника.СтраницаНачальногоОповещениеКлиентСервер;
			Элементы.Далее.Заголовок = НСтр("ru = 'Готово'");
			
		КонецЕсли;
	Иначе	
		СтартоваяСтраница = СтраницыПомощника.СтраницаДляПользователяБезПрав;
	КонецЕсли;
	Возврат СтартоваяСтраница;	
КонецФункции

// Получает из константы параметры доступа администратора системы.
&НаСервере
Процедура УстановитьПараметрыАдминистратораИБ(ПараметрыПодключения)
	СтруктураПодключения = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	Если СтруктураПодключения = Неопределено Тогда
		СтруктураПодключения = Новый Структура("ИмяАдминистратораИБ, ПарольАдминистратораИБ");
	КонецЕсли;
	СтруктураПодключения.ИмяАдминистратораИБ = ПараметрыПодключения.ИмяПользователя;
	СтруктураПодключения.ПарольАдминистратораИБ = ПараметрыПодключения.ПарольПользователя;
	НовоеХранилище = Новый ХранилищеЗначения(СтруктураПодключения);
	Константы.ПараметрыАдминистрированияИБ.Установить(НовоеХранилище);
КонецПроцедуры

// Устанавливает текущую страницу при отложенном резервном копировании в зависимости от начального выбора пользователя.
&НаКлиенте
Процедура УстановитьСтраницуПараметровОтложенногоОповещения(ПозицияПереключателя)
	Если ПозицияПереключателя = 3 Тогда
		Элементы.СтраницыПараметровОтложенногоОповещения.ТекущаяСтраница = Элементы.СтраницыПараметровОтложенногоОповещения.ПодчиненныеЭлементы.СтраницаПараметровОтложенногоОповещения;
	Иначе
		Элементы.СтраницыПараметровОтложенногоОповещения.ТекущаяСтраница = Элементы.СтраницыПараметровОтложенногоОповещения.ПодчиненныеЭлементы.ПустаяСтраница;
	КонецЕсли;
КонецПроцедуры

// Устанавливает значение поясняющей надписи в зависимости от текущего выбора пользователя.
&НаКлиенте
Процедура УстановитьТекстПоясняющейНадписи(Знач ЗначениеПереключателя)
	ПоясняющаяНадпись = Элементы.ИнформационнаяНадпись;
	ТекстНадписи = "";
	
	Если ЗначениеПереключателя  = 1 Тогда
		ТекстНадписи = НСтр("ru = 'Нажмите ""Далее"" для перехода к настройке расписания автоматического резервного копирования.'");
	ИначеЕсли ЗначениеПереключателя = 2 Тогда
		ТекстНадписи = НСтр("ru = 'Более подробно о выполнении резервного копирования можно узнать из документации к используемой СУБД или специализированным средствам резервного копирования. Нажмите ""Готово"" чтобы закрыть помощник.'");
	ИначеЕсли ЗначениеПереключателя = 3 Тогда
		ТекстНадписи = НСтр("ru = 'Нажмите ""Готово"" чтобы отложить оповещение на выбранный срок.'");
	КонецЕсли;
	ПоясняющаяНадпись.Заголовок = ТекстНадписи;	
КонецПроцедуры

// Устанавливает заголовок кнопки "Далее" в зависимости от текущего выбора пользователя.
&НаКлиенте
Процедура УстановитьЗаголовокКнопкиДалее(ПараметрЗаголовка)
	Если ПараметрЗаголовка Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее >>'");
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
КонецПроцедуры

// Запрашивает у пользователя путь к файлу или каталогу.
&НаКлиенте
Функция ПолучитьПуть(РежимДиалога)
	Режим = РежимДиалога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	Если Режим = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите каталог'");
	Иначе
		ДиалогОткрытияФайла.Заголовок= НСтр("ru = 'Выберите файл'");
	КонецЕсли;	
		
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога тогда
			Возврат ДиалогОткрытияФайла.Каталог;
		Иначе
			Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Устанавливает новые параметры резервного копирования при изменении времени оповещения.
&НаСервереБезКонтекста
Процедура ПриИзмененииВремениОповещения(ПараметрКоличества,ПараметрТипа)	
	ПараметрыОповещенияОРезервномКопировании= РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования();
	Если ПараметрКоличества = -1 Тогда // если пользователь отказался от оповещений
		
		ОстановитьСервисОповещенияОРезервномКопировании();
		ПараметрыОповещенияОРезервномКопировании.НастроеноПользователем = Истина;

	ИначеЕсли ПараметрКоличества = 0 Тогда // если пользователь отказался от копирования, но хочет получать оповещения
		ПараметрыОповещенияОРезервномКопировании.ДатаПоследнегоОповещения = ТекущаяДата();			
	Иначе	
		ПараметрыОповещенияОРезервномКопировании.ДатаПоследнегоОповещения = ТекущаяДата();
		ПараметрыОповещенияОРезервномКопировании.ПериодОповещения = ПараметрКоличества*?(ПараметрТипа = "Месяц", (ДобавитьМесяц(ТекущаяДата(), ПараметрКоличества) - ТекущаяДата()), РезервноеКопированиеИБСервер.ПолучитьВременнойПараметрПоСтроке(ПараметрТипа));
	КонецЕсли;
 	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(ПараметрыОповещенияОРезервномКопировании);	
КонецПроцедуры

// Останавливает работу сервиса резервного копирования.
&НаСервереБезКонтекста
Процедура ОстановитьСервисОповещенияОРезервномКопировании()
	ПараметрыОповещенияОРезервномКопировании= РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования();
	ПараметрыОповещенияОРезервномКопировании.ДатаПоследнегоОповещения = Дата('00010101');
	ПараметрыОповещенияОРезервномКопировании.ПериодОповещения = 0;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(ПараметрыОповещенияОРезервномКопировании);	
КонецПроцедуры

// Записывает параметры настройки удаления резервных копий из каталога.
&НаСервереБезКонтекста
Процедура УстановитьНастройкиУдаленияУстаревшихКопий(ТипУдаления, ПараметрЗначения)
	СтруктураНастроек = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования();
	СтруктураНастроек.ПроизводитьУдаление = Истина;
	СтруктураНастроек.УдалятьПоПериоду = ТипУдаления;
	СтруктураНастроек.ЗначениеПараметра = ПараметрЗначения;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(СтруктураНастроек);
КонецПроцедуры

// Записывает настройку - путь к каталогу с резервными копиями.
&НаСервереБезКонтекста
Процедура УстановитьПутьАрхиваСКопиями(Путь)
	НастройкиПути = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования();
	НастройкиПути.КаталогХраненияРезервныхКопий = Путь;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(НастройкиПути);
КонецПроцедуры

// Записывает настройук - расписание проведения резервного копирования.
&НаСервереБезКонтекста
Процедура ПоместитьРасписаниеВНастройку(НовоеРасписаниеКопирования)
	Параметры = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования();
	Параметры.РасписаниеКопирования = НовоеРасписаниеКопирования;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(Параметры);
	ОбновитьПовторноИспользуемыеЗначения();  // сбрысываем кеш для применения настроек
КонецПроцедуры

// Показывает оповещение пользователю с заданным текстом.
&НаКлиенте
Процедура ОповещениеПользователю(ТекстОповещения)
	ПоказатьОповещениеПользователя("Резервное копирование", , ТекстОповещения)
КонецПроцедуры

// Показывает оповещение пользователю при завершении работы с формой настройки резервного копирования.
&НаКлиенте
Процедура ПриЗавершенииРаботыПомощника(РезультатРаботыПомощника)
	ПоказатьОповещениеПользователя(НСтр("ru = 'Работа помощника завершена'"), "e1cib/app/Обработка.НастройкаРезервногоКопированияИБ", РезультатРаботыПомощника);
	ЭтаФорма.Закрыть();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НастройкиРезервногоКопирования = РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования();
	Объект.КодТипаРезервногоКопирования = НастройкиРезервногоКопирования.ВыборПунктаНастройки;
	Если НастройкиРезервногоКопирования.ПроводитьРезервноеКопированиеПриЗавершенииРаботы Тогда	
    	Объект.ВариантПроведенияРезервногоКопирования = 2;
	Иначе
		Объект.ВариантПроведенияРезервногоКопирования = 1;
	КонецЕсли;
	Объект.КодТипаИнтерактивногоРезервногоКопирования = 1;	
	Объект.ОчисткаКаталогаСРезервнымиКопиямиПриПереполнении = Истина;
	Объект.ПериодХраненияРезервныхКопий = 1;
	Объект.ЕдиницаИзмеренияПериодаХраненияРезервныхКопий = "Месяц";
	Объект.ПериодОтложенногоОповещения = 1;
	Объект.ЕдиницаИзмеренияПериодаОповещения = "День";
	Объект.ЕдиницаИзмеренияПериодаОтложенногоОповещения = "Час";
	Объект.ТипОграниченияКаталогаСРезервнымиКопиями = "ПоПериоду";
	Объект.ПериодОповещения = 1;
	Объект.НажатиеГиперссылки = Ложь;
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиРезервногоКопирования.РасписаниеКопирования);
	Объект.СтрокаРасписания = Строка(Расписание);
	ПараметрОткрытия = РезервноеКопированиеИБСервер.ПолучитьВариантОповещения();
	Элементы.СтраницыПомощника.ТекущаяСтраница = ОпределитьСтраницуПоПравамИАрхитектуре(ПараметрОткрытия);
	Если Параметры.Свойство("ТипВызова") Тогда
		
		Если Параметры.ТипВызова = 1 Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы[Параметры.ТекущаяСтраница];
			Элементы.НадписьВремяОжиданияРезервногоКопирования.Заголовок = Параметры.ЗаголовокНадписи;
		КонецЕсли;
		
		Если Параметры.ТипВызова = 2 Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы[Параметры.ТекущаяСтраница];
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.КаталогСРезервнымиКопиями = РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования().КаталогХраненияРезервныхКопий;
	ТекстЗаголовка = НСтр("ru = 'В последний раз резервное копирование проводилось: %1'"); 
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Формат(НастройкиРезервногоКопирования.ДатаПоследнегоРезервногоКопирования, "ДЛФ=ДДВ"));
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, МассивПараметров);
	
	Если Элементы.ВариантРасписанияРезервногоКопирования.СписокВыбора.Количество() > 3 Тогда
		Элементы.ВариантРасписанияРезервногоКопирования.СписокВыбора.Удалить(3);
	КонецЕсли;
	
	Элементы.ВариантРасписанияРезервногоКопирования.СписокВыбора.Добавить("0", Расписание);
    Объект.ВариантРасписанияРезервногоКопирования = "0";
	Элементы.ГруппаНастройкиРасписанияКопирования.Доступность = (Объект.ВариантПроведенияРезервногоКопирования = 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ТекущаяСтраница);
	КодПереключателя = Объект.КодТипаРезервногоКопирования;
	
	Если КодПереключателя = 1 Тогда
		УстановитьЗаголовокКнопкиДалее(Истина);
	Иначе
		УстановитьЗаголовокКнопкиДалее(Ложь);
	КонецЕсли;
	
	УстановитьСтраницуПараметровОтложенногоОповещения(КодПереключателя);
	УстановитьТекстПоясняющейНадписи(КодПереключателя);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	ОчиститьСообщения();	
	ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	Если ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНачальногоОповещения Тогда
		ОбработатьНачальнуюНастройкуПомощника();
	ИначеЕсли ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНастройкиПараметровРезервногоКопирования 
		ИЛИ  ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.ДополнительныеНастройки Тогда

		Если ПустаяСтрока(Объект.КаталогСРезервнымиКопиями) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран каталог для резервных копий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если  НайтиФайлы(Объект.КаталогСРезервнымиКопиями).Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Вы указали несуществующий каталог.'"));
			Возврат;
		КонецЕсли;

		Если НЕ ПроверитьДоступКИБ()  Тогда
			
			Если ПарольАдминистратораИБ  <> ПарольАдминистратораИБПроверка Тогда
				
				Текст = НСтр("ru = 'Введенный пароль и проверка не совпадают'");
				Предупреждение(Текст);
				Возврат;
				
			КонецЕсли;

			НоваяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.ДополнительныеНастройки;
			ПриОткрытииНовойСтраницы(НоваяСтраницаПомощника);
			Возврат;
		
		КонецЕсли;
		УстановитьПараметрыАдминистратораИБ(ПолучитьПараметрыАутентификацииАдминистратораОбновления());
		ПриПереходеНаАвтоматическийРежимКопирования();
		ПриИзмененииВремениОповещения(-1, "");
		УстановитьПутьАрхиваСКопиями(Объект.КаталогСРезервнымиКопиями);
			
		Если Объект.ВыполнитьРезервноеКопированиеСейчас Тогда
			
			ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница, ЗаголовокНадписи", 
						1, "СтраницаИнформацииИВыполненияРезервногоКопирования", "");
					
			ФормаОбработки = ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
		
		КонецЕсли;		
	Иначе
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуАрхивов2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Объект.КаталогСРезервнымиКопиями  = ПолучитьПуть(РежимДиалогаВыбораФайла.ВыборКаталога);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	ДатаОтложенногоРезервногоКопирования =Дата('00010101');
	Закрыть();
КонецПроцедуры

// Обработчик выбора из списка или изменения расписания проведения резервного копирования.
&НаКлиенте
Процедура ВариантРасписанияРезервногоКопированияПриИзменении(Элемент)
	РасписаниеРезервногоКопирования = Новый РасписаниеРегламентногоЗадания;
	Если Объект.ВариантРасписанияРезервногоКопирования = "1" Тогда
		
		РасписаниеРезервногоКопирования.ПериодНедель = 1;
		РасписаниеРезервногоКопирования.ПериодПовтораДней = 1;
		МассивДнейНедели = Новый Массив;
		МассивДнейНедели.Добавить(5);
		РасписаниеРезервногоКопирования.ДниНедели = МассивДнейНедели;
		РасписаниеРезервногоКопирования.ВремяНачала = Дата(2010, 01, 01, 23, 30, 00);
		
	ИначеЕсли Объект.ВариантРасписанияРезервногоКопирования = "2" Тогда
		
		РасписаниеРезервногоКопирования.ПериодПовтораДней = 1;
		РасписаниеРезервногоКопирования.ВремяНачала = Дата(2010, 01, 01, 23, 30, 00);
		
	ИначеЕсли Объект.ВариантРасписанияРезервногоКопирования = "3" Тогда 
		
		РасписаниеРезервногоКопирования.ПериодПовтораДней = 1;
		МассивДнейНедели = Новый Массив;
		МассивДнейНедели.Добавить(2);
		МассивДнейНедели.Добавить(4);
		РасписаниеРезервногоКопирования.ДниНедели = МассивДнейНедели;
		РасписаниеРезервногоКопирования.ВремяНачала = Дата(2010, 01, 01, 23 ,30, 00);
		
	КонецЕсли;
	Объект.СтрокаРасписания = Строка(РасписаниеРезервногоКопирования);
	РасписаниеСтруктура = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(РасписаниеРезервногоКопирования);
	ПоместитьРасписаниеВНастройку(РасписаниеСтруктура);
КонецПроцедуры

// Вызывает стандартную форму настройки расписания регламентного задания, 
// заполняя его текущими настройками расписания резервного копирования.
&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	Расписание = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ.РасписаниеКопирования;
	Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Расписание);
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Если НЕ ДиалогРасписания.ОткрытьМодально() Тогда
		Возврат;
	КонецЕсли;
	
	Расписание = ДиалогРасписания.Расписание;
	Если Элементы.ВариантРасписанияРезервногоКопирования.СписокВыбора.Количество() > 3 Тогда
		Элементы.ВариантРасписанияРезервногоКопирования.СписокВыбора.Удалить(3);
	КонецЕсли;
	Элементы.ВариантРасписанияРезервногоКопирования.СписокВыбора.Добавить("0", Расписание);
	Объект.ВариантРасписанияРезервногоКопирования = "0";
	Объект.СтрокаРасписания = Строка(Расписание);
	РасписаниеСтруктура = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание);
	ПоместитьРасписаниеВНастройку(РасписаниеСтруктура);
КонецПроцедуры

// Обработчик перехода к журналу регистрации.
&НаКлиенте
Процедура НадписьПерейтиВЖурналРегистрации1Нажатие(Элемент)
	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации");
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ТекущаяСтраница;
	Если  ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНастройкиПараметровРезервногоКопирования Тогда
		ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНачальногоОповещения);
	ИначеЕсли 	ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНачальногоОповещения Тогда
		ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаВыполненияРезервногоКопирования);
	ИначеЕсли ТекущаяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.ДополнительныеНастройки Тогда
		ПриОткрытииНовойСтраницы(Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНастройкиПараметровРезервногоКопирования);
	КонецЕсли;
КонецПроцедуры

// Процедура обновления компоненты comcntr.
&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
КонецПроцедуры

&НаКлиенте
Процедура ВариантПроведенияРезервногоКопированияПриИзменении(Элемент)
	Элементы.ГруппаНастройкиРасписанияКопирования.Доступность = (Объект.ВариантПроведенияРезервногоКопирования = 1);
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКодТипаРезервногоКопированияПриИзменении(Элемент)
	КодПереключателя = Объект.КодТипаРезервногоКопирования;
	
	Если КодПереключателя = 1 Тогда
		УстановитьЗаголовокКнопкиДалее(Истина);
	Иначе
		УстановитьЗаголовокКнопкиДалее(Ложь);
	КонецЕсли;
	
	УстановитьСтраницуПараметровОтложенногоОповещения(КодПереключателя);
	УстановитьТекстПоясняющейНадписи(КодПереключателя);
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаКаталогаСРезервнымиКопиямиПриПереполнении1ПриИзменении(Элемент)
	ДоступностьГруппы = Объект.ОчисткаКаталогаСРезервнымиКопиямиПриПереполнении;
	Элементы.ГруппаВыбораОчисткиКаталогаОтСтарыхФайлов1.Доступность = ДоступностьГруппы;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Обработчик значения переключателя "Код типа резервного копирования" при нажатии на кнопку "Далее".
&НаКлиенте
Процедура ОбработатьНачальнуюНастройкуПомощника()
	РезервноеКопированиеИБСервер.ОстановитьАвтоматическоеРезервноеКопирование();
	КодПереключателя = Объект.КодТипаРезервногоКопирования;
	РезервноеКопированиеИБСервер.УстановитьКодВыбора(КодПереключателя);
	НоваяСтраницаПомощника = Неопределено;	

	Если КодПереключателя = 1 Тогда // Настройка автоматического резервного копирования.
		НоваяСтраницаПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.СтраницаНастройкиПараметровРезервногоКопирования;	
	ИначеЕсли КодПереключателя = 2 Тогда // Копирование сторонними средствами.
		ОповещениеПользователю(НСтр("ru ='Работа помощника завершена. С этого момента оповещения о резервном копировании поступать не будут.'"));
		РезервноеКопированиеИБСервер.ОстановитьСервисОповещения();
	ИначеЕсли КодПереключателя = 3 Тогда // Отложенное копирование.
		ПриИзмененииВремениОповещения(Объект.ПериодОповещения, Объект.ЕдиницаИзмеренияПериодаОповещения);			
		ОповещениеПользователю(НСтр("ru ='Был изменен период оповещений о резервном копировании'"));
	КонецЕсли;
	ПриОткрытииНовойСтраницы(НоваяСтраницаПомощника);
КонецПроцедуры

// Обработчик изменения страницы помощника. Открывает новую страницу и выполняет необходимые действия.
// Параметры :
// НоваяСтраницаПомощника  - страница , которую необходимо открыть в данный момент.
&НаКлиенте
Процедура ПриОткрытииНовойСтраницы(НоваяСтраница, ТекстПути = "")
	ПодчиненныеСтраницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;	
	Если НоваяСтраница  = ПодчиненныеСтраницы.СтраницаНачальногоОповещения Тогда
		
		Элементы.Назад.Видимость = Объект.НажатиеГиперссылки;
		УстановитьЗаголовокКнопкиДалее(Истина);
		
	ИначеЕсли НоваяСтраница = ПодчиненныеСтраницы.СтраницаНастройкиПараметровРезервногоКопирования Тогда
		
		УстановитьЗаголовокКнопкиДалее(Ложь);
		Элементы.Назад.Видимость = Истина;
		                      
	ИначеЕсли НоваяСтраница = ПодчиненныеСтраницы.СтраницаНачальногоОповещениеКлиентСервер Тогда	
		
		УстановитьЗаголовокКнопкиДалее(Ложь);
		
	ИначеЕсли НоваяСтраница = ПодчиненныеСтраницы.ДополнительныеНастройки Тогда
		
		Элементы.Назад.Видимость = Истина;
		АдминистраторИБ = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ.ИнформацияОПользователе.Имя;

	КонецЕсли;	

	Если НоваяСтраница = Неопределено Тогда
		Закрыть();
	Иначе
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;	
КонецПроцедуры
 
&НаКлиенте
Функция ПроверитьДоступКИБ()

	Результат = Истина;
	ОбнаруженнаяОшибкаПодключения = "";
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля обновление завершится неуспешно.
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат Результат;
	КонецЕсли; 
	ПараметрыПодключения	= ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	ComConnector			= Новый COMОбъект(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ИмяCOMСоединителя);
	Попытка
		СтрокаСоединенияИнформационнойБазы = ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы + ПараметрыПодключения.СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
	Исключение
		Результат = Ложь;
		Инфо = ИнформацияОбОшибке();
		ОбнаруженнаяОшибкаПодключения = ОбнаруженнаяОшибкаПодключения + " " + НСтр("ru = 'Ошибка при проверке подключения к информационной базе'") + Символы.ПС +КраткоеПредставлениеОшибки(Инфо);
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			РезервноеКопированиеИБКлиент.СобытиеЖурналаРегистрации(),"Ошибка", ОбнаруженнаяОшибкаПодключения);
			
	КонецПопытки;	
	
	Возврат Результат;
КонецФункции

// Обработчик перехода на автоматическое резервное копирование.
&НаКлиенте
Процедура ПриПереходеНаАвтоматическийРежимКопирования()
	Если ПроверитьЗаполнение() Тогда
		Если Объект.ОчисткаКаталогаСРезервнымиКопиямиПриПереполнении Тогда
	
			Если Объект.ТипОграниченияКаталогаСРезервнымиКопиями = "ПоПериоду" Тогда
				ПараметрЗначенияОграничения = ?(Объект.ЕдиницаИзмеренияПериодаХраненияРезервныхКопий = "Месяц", (ДобавитьМесяц(ТекущаяДата(), Объект.ПериодХраненияРезервныхКопий) - ТекущаяДата()), РезервноеКопированиеИБСервер.ПолучитьВременнойПараметрПоСтроке(Объект.ЕдиницаИзмеренияПериодаХраненияРезервныхКопий));
			Иначе
				ПараметрЗначенияОграничения = Объект.КоличествоКопийВКаталоге;
			КонецЕсли;	
			УстановитьНастройкиУдаленияУстаревшихКопий(?(Объект.ТипОграниченияКаталогаСРезервнымиКопиями = "ПоПериоду", Истина, Ложь), ПараметрЗначенияОграничения);
			УстановитьПутьАрхиваСКопиями(Объект.КаталогСРезервнымиКопиями);
			
		КонецЕсли;
		
		Если Объект.ВариантПроведенияРезервногоКопирования = 1 Тогда	
			ОповещатьОРезервномКопированииПриЗавершенииСеанса = Ложь;
			РезервноеКопированиеИБСервер.УстановитьДатуСледующегоАвтоматическогоКопирования(Истина);
		Иначе
			ОповещатьОРезервномКопированииПриЗавершенииСеанса = Истина;
			РезервноеКопированиеИБСервер.ОстановитьАвтоматическоеРезервноеКопирование(Истина);
		КонецЕсли;	
		ПриЗавершенииРаботыПомощника(НСтр("ru = 'Настройка расписания резервного копирования прошла успешно!'"));
		ОстановитьСервисОповещенияОРезервномКопировании();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////
// Процедуры и функции проведения резервного копирования

 &НаСервере
Функция ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	
	Результат = ПолучитьИнформациюОНаличииСоединений();
	Результат.Вставить("СтрокаСоединенияИнформационнойБазы", 
	СоединенияИБ.ПолучитьСтрокуСоединенияИнформационнойБазы(0));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления() 
	
	Результат = Новый Структура("ИмяПользователя,
	|ПарольПользователя,
	|СтрокаПодключения,
	|ПараметрыАутентификации,
	|СтрокаСоединенияИнформационнойБазы",
	Неопределено, "", "", "", "", "");
	
	ТекущиеСоединения = ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации);
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	Если НЕ ТекущиеСоединения.ЕстьАктивныеПользователи Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ИнформацияОПользователе.Имя;
	
	Результат.ИмяПользователя			= Пользователь;
	Результат.ПарольПользователя		= ПарольАдминистратораИБ;
	Результат.СтрокаПодключения			= "Usr=""" + Пользователь + """;Pwd=""" + ПарольАдминистратораИБ + """;";
	Результат.ПараметрыАутентификации	= "/N""" + Пользователь + """ /P""" + ПарольАдминистратораИБ + """ /WA-";
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура(
	"НаличиеАктивныхСоединений, НаличиеCOMСоединений, НаличиеСоединенияКонфигуратором, ЕстьАктивныеПользователи",
	НаличиеАктивныхСоединений(), НаличиеCOMСоединений(),
	НаличиеСоединенияКонфигуратором(), ЕстьАктивныеПользователи());
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСоединениеКонфигуратором(СоединениеИнформационнойБазы)
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("Designer");
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоCOMСоединение(СоединениеИнформационнойБазы)
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("COMConnection");
КонецФункции 

// Проверка наличия соединения конфигуратором.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединение есть,
//                 Ложь, если соединения нет.
&НаСервереБезКонтекста
Функция НаличиеСоединенияКонфигуратором()
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоСоединениеКонфигуратором(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция НаличиеCOMСоединений()
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоCOMСоединение(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// Проверка наличия активных соединений с информационной базой.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединения есть,
//                 Ложь, если соединений нет.
&НаСервереБезКонтекста
Функция НаличиеАктивныхСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() > 1;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАктивныеПользователи(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0;
Конецфункции
