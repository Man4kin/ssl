////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьРасписания();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)
	Если (Параметры.ПроверятьНаличиеОбновленияПриЗапуске <> Объект.ПроверятьНаличиеОбновленияПриЗапуске
		И (Параметры.ПроверятьНаличиеОбновленияПриЗапуске = 1 ИЛИ Объект.ПроверятьНаличиеОбновленияПриЗапуске = 1))
		ИЛИ Строка(Параметры.РасписаниеПроверкиНаличияОбновления) <> Строка(Объект.РасписаниеПроверкиНаличияОбновления) Тогда
		
		// проинициализируем, если первый запуск
		Если НастройкиОбновленияКонфигурации = Неопределено Тогда
			
			НастройкиОбновленияКонфигурации = Новый Структура();
			НастройкиОбновленияКонфигурации.Вставить("ПропускатьПриветствие"							, Объект.ПропускатьПриветствие);
			НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений"					, Объект.КодПользователяСервераОбновлений);
			НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"							, ?(Объект.ЗапомнитьПарольСервераОбновлений, Объект.ПарольСервераОбновлений, ""));
			НастройкиОбновленияКонфигурации.Вставить("ЗапомнитьПарольСервераОбновлений"					, Объект.ЗапомнитьПарольСервераОбновлений);
			НастройкиОбновленияКонфигурации.Вставить("ПроверятьНаличиеОбновленияПриЗапуске"				, Объект.ПроверятьНаличиеОбновленияПриЗапуске);
			НастройкиОбновленияКонфигурации.Вставить("РасписаниеПроверкиНаличияОбновления"				, Объект.РасписаниеПроверкиНаличияОбновления);
			НастройкиОбновленияКонфигурации.Вставить("ИсточникОбновления"								, Объект.ИсточникОбновления);
			НастройкиОбновленияКонфигурации.Вставить("РежимОбновления"									, Объект.РежимОбновления);
			НастройкиОбновленияКонфигурации.Вставить("ДатаВремяОбновления"								, Объект.ДатаВремяОбновления);
			НастройкиОбновленияКонфигурации.Вставить("ВыслатьОтчетНаПочту"								, Объект.ВыслатьОтчетНаПочту);
			НастройкиОбновленияКонфигурации.Вставить("АдресЭлектроннойПочты"							, Объект.АдресЭлектроннойПочты);
			НастройкиОбновленияКонфигурации.Вставить("КодЗадачиПланировщика"							, Объект.КодЗадачиПланировщика);
			НастройкиОбновленияКонфигурации.Вставить("ПовторныйЗапуск"									, Объект.ПовторныйЗапуск);
			НастройкиОбновленияКонфигурации.Вставить("ИмяФайлаОбновления"								, Объект.ИмяФайлаОбновления);
			НастройкиОбновленияКонфигурации.Вставить("НуженФайлОбновления"								, Объект.НуженФайлОбновления);
			НастройкиОбновленияКонфигурации.Вставить("СоздаватьРезервнуюКопию"							, Объект.СоздаватьРезервнуюКопию);
			НастройкиОбновленияКонфигурации.Вставить("ВосстанавливатьИнформационнуюБазу"				, Объект.ВосстанавливатьИнформационнуюБазу);
			НастройкиОбновленияКонфигурации.Вставить("ИмяКаталогаРезервнойКопииИБ"						, Объект.ИмяКаталогаРезервнойКопииИБ);
			НастройкиОбновленияКонфигурации.Вставить("АдресСервераДляПроверкиНаличияОбновления"			, "");
			НастройкиОбновленияКонфигурации.Вставить("ИспользоватьЗначениеНастройкиАдресСервераДляПроверкиНаличияОбновления"		, Ложь);
			НастройкиОбновленияКонфигурации.Вставить("ИспользоватьЗначениеНастройкиАдресРесурсаДляПроверкиНаличияОбновления"		, Ложь);
			НастройкиОбновленияКонфигурации.Вставить("ИспользоватьЗначениеНастройкиКороткоеИмяКонфигурации"							, Ложь);
			НастройкиОбновленияКонфигурации.Вставить("ИспользоватьЗначениеНастройкиКаталогОбновлений"								, Ложь);
			НастройкиОбновленияКонфигурации.Вставить("ИмяФайлаАдресаОбновленияИТС"													, Ложь);
			НастройкиОбновленияКонфигурации.Вставить("КаталогОбновлений"								, "");
			НастройкиОбновленияКонфигурации.Вставить("КороткоеИмяКонфигурации"							, "");
			НастройкиОбновленияКонфигурации.Вставить("АдресРесурсаДляПроверкиНаличияОбновления"			, "");
			НастройкиОбновленияКонфигурации.Вставить("ДискИТС"											, "");
			НастройкиОбновленияКонфигурации.Вставить("ИсточникДискаИТС"									, Объект.ИсточникДискаИТС);
			НастройкиОбновленияКонфигурации.Вставить("ИмяАдминистратораИБ"								, Объект.ИмяАдминистратораИБ);
			НастройкиОбновленияКонфигурации.Вставить("ПарольАдминистратораИБ"							, Объект.ПарольАдминистратораИБ);
			НастройкиОбновленияКонфигурации.Вставить("КластерТребуетАутентификации"						, Объект.КластерТребуетАутентификации);
			НастройкиОбновленияКонфигурации.Вставить("ИмяАдминистратораКластера"						, Объект.ИмяАдминистратораКластера);
			НастройкиОбновленияКонфигурации.Вставить("ПарольАдминистратораКластера"						, Объект.ПарольАдминистратораКластера);
			НастройкиОбновленияКонфигурации.Вставить("НестандартныеПортыСервера"						, Объект.НестандартныеПортыСервера);
			НастройкиОбновленияКонфигурации.Вставить("ПортАгентаСервера"								, Объект.ПортАгентаСервера);
			НастройкиОбновленияКонфигурации.Вставить("ПортКластераСерверов"								, Объект.ПортКластераСерверов);
			
			ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
			
		КонецЕсли;

		НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = Объект.ПроверятьНаличиеОбновленияПриЗапуске;
		НастройкиОбновленияКонфигурации.РасписаниеПроверкиНаличияОбновления = Объект.РасписаниеПроверкиНаличияОбновления;
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновлениеКонфигурацииКлиент.ПодключитьОтключитьПроверкуПоРасписанию(Объект.ПроверятьНаличиеОбновленияПриЗапуске = 1 И
		Объект.РасписаниеПроверкиНаличияОбновления <> Неопределено);
	КонецЕсли;
	Закрыть(Новый Структура("ПроверятьНаличиеОбновленияПриЗапуске, РасписаниеПроверкиНаличияОбновления",
	Объект.ПроверятьНаличиеОбновленияПриЗапуске, Объект.РасписаниеПроверкиНаличияОбновления));
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьНаличиеОбновленияПриЗапускеПриИзменении(Элемент)
	УстановитьВидимостьРасписания();
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьРасписаниеНажатие(Элемент)
	Если Объект.РасписаниеПроверкиНаличияОбновления = Неопределено Тогда
		Объект.РасписаниеПроверкиНаличияОбновления = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Объект.РасписаниеПроверкиНаличияОбновления);
	Если Диалог.ОткрытьМодально() Тогда
		Объект.РасписаниеПроверкиНаличияОбновления	= Диалог.Расписание;
	КонецЕсли;
	Элементы.НадписьОткрытьРасписание.Заголовок = ТекстНадписиОткрытьРасписание();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьВидимостьРасписания()
	Если Объект.ПроверятьНаличиеОбновленияПриЗапуске = 1 Тогда
		Элементы.НадписьОткрытьРасписание.Доступность = Истина;
		Элементы.НадписьОткрытьРасписание.Заголовок = ТекстНадписиОткрытьРасписание();
	Иначе
		Элементы.НадписьОткрытьРасписание.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ТекстНадписиОткрытьРасписание()
	СтроковоеПредставлениеРасписания = Строка(Объект.РасписаниеПроверкиНаличияОбновления);
	Возврат ?(НЕ ПустаяСтрока(СтроковоеПредставлениеРасписания),	СтроковоеПредставлениеРасписания,
	НСтр("ru = 'Открыть расписание'"));
КонецФункции

