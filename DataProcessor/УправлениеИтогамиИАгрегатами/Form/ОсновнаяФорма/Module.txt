&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПутьКОбъектуМетаданных = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПрочитатьИнформациюПоРегистрам();
	
	ОбновитьСписокИтоговНаСервере();
	ОбновитьАгрегатыПоРегистрамНаСервере();
	
	Если АгрегатыПоРегистрам.Количество() <> 0 Тогда
		Элементы.СписокАгрегатов.Заголовок = Префикс() + " " + АгрегатыПоРегистрам[0].Наименование;
	Иначе
		Элементы.СписокАгрегатов.Заголовок = Префикс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюПоРегистрам()
	
	СписокИтогов.Очистить();
	АгрегатыПоРегистрам.Очистить();
	СписокАгрегатовРегистра.Очистить();
	
	Для Каждого Регистр Из Метаданные.РегистрыБухгалтерии Цикл
		
		Если НЕ ПравоДоступа("УправлениеИтогами", Регистр) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Регистр.Представление() + НСтр("ru=' (регистр бухгалтерии)'");
		Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
		
		СтрокаТаблицы = СписокИтогов.Добавить();
		СтрокаТаблицы.Тип = 1;
		СтрокаТаблицы.ИмяМетаданного = Регистр.Имя;
		СтрокаТаблицы.Картинка = Картинка;
		СтрокаТаблицы.ОборотныйРег = Истина;
		СтрокаТаблицы.Наименование = Представление;
		СтрокаТаблицы.РазрешитьРазделениеИтогов = Регистр.РазрешитьРазделениеИтогов ;
		
	КонецЦикла;
	
	Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл
		
		Постфикс = "";
		Оборотный = Истина;
		Если Регистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Оборотный = Ложь;
			Постфикс = НСтр("ru=' (оборотный регистр накопления)'");
		Иначе
			Оборотный = Истина;
			Постфикс = НСтр("ru=' (регистр накопления)'");
		КонецЕсли;
		
		Если НЕ ПравоДоступа("УправлениеИтогами", Регистр) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Регистр.Представление() + Постфикс;
		Картинка = БиблиотекаКартинок.РегистрНакопления;
		
		СтрокаТаблицы = СписокИтогов.Добавить();
		СтрокаТаблицы.Тип = 0;
		СтрокаТаблицы.ИмяМетаданного = Регистр.Имя;
		СтрокаТаблицы.Картинка = Картинка;
		СтрокаТаблицы.ОборотныйРег = Оборотный;
		СтрокаТаблицы.Наименование = Представление;
		СтрокаТаблицы.РазрешитьРазделениеИтогов = Регистр.РазрешитьРазделениеИтогов ;
		
	КонецЦикла;
	
	Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл
		
		Если Регистр.ВидРегистра <> Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("УправлениеИтогами", Регистр) Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = Регистр.Представление();
		Картинка = БиблиотекаКартинок.РегистрНакопления;
		
		Агрегаты = Регистр.Агрегаты;
		
		Если Агрегаты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = АгрегатыПоРегистрам.Добавить();
		СтрокаТаблицы.ИмяМетаданного = Регистр.Имя;
		СтрокаТаблицы.Картинка = Картинка;
		СтрокаТаблицы.Наименование = Представление;
		СтрокаТаблицы.ПостроениеОптимально = Истина;
		
	КонецЦикла;
	
	СписокИтогов.Сортировать("Наименование Возр");
	АгрегатыПоРегистрам.Сортировать("Наименование Возр");
	
КонецПроцедуры // ПрочитатьИнформациюПоРегистрам

&НаСервере
Процедура ОбновитьСписокИтоговНаСервере()
	
	Менеджер = Новый Массив;
	Менеджер.Добавить(РегистрыНакопления);
	Менеджер.Добавить(РегистрыБухгалтерии);
	
	Для Каждого СтрокаТаблицы Из СписокИтогов Цикл
		
		Регистр = Менеджер[СтрокаТаблицы.Тип][СтрокаТаблицы.ИмяМетаданного];
		СтрокаТаблицы.ИспользоватьИтоги = Регистр.ПолучитьИспользованиеИтогов();
		СтрокаТаблицы.РазделениеИтогов = Регистр.ПолучитьРежимРазделенияИтогов();
		Если СтрокаТаблицы.ОборотныйРег Тогда
			
			СтрокаТаблицы.ИспользоватьТекущиеИтоги = Регистр.ПолучитьИспользованиеТекущихИтогов();
			СтрокаТаблицы.ПериодИтогов = Регистр.ПолучитьПериодРассчитанныхИтогов();
			СтрокаТаблицы.АгрегатыИтоги = 2;
			
		Иначе
			
			СтрокаТаблицы.ИспользоватьТекущиеИтоги = Ложь;
			СтрокаТаблицы.ПериодИтогов = Неопределено;
			СтрокаТаблицы.АгрегатыИтоги = Регистр.ПолучитьРежимАгрегатов();
			Если СтрокаТаблицы.АгрегатыИтоги Тогда
				СтрокаТаблицы.ИспользоватьИтоги = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокИтоговНаСервере()

&НаСервере
Процедура ОбновитьАгрегатыПоРегистрамНаСервере()
	
	СписокАгрегатовРегистра.Очистить();
	
	Для Каждого СтрокаТаблицы Из АгрегатыПоРегистрам Цикл
		
		Менеджер = РегистрыНакопления[СтрокаТаблицы.ИмяМетаданного];
		МенеджерРегистра = Метаданные.РегистрыНакопления[СтрокаТаблицы.ИмяМетаданного];
		
		СтрокаТаблицы.РежимАгрегатов = Менеджер.ПолучитьРежимАгрегатов();
		СтрокаТаблицы.ИспользованиеАгрегатов = Менеджер.ПолучитьИспользованиеАгрегатов();

		Агрегаты = Менеджер.ПолучитьАгрегаты();
		СтрокаТаблицы.ДатаПостроения = Агрегаты.ДатаПостроения;
		СтрокаТаблицы.Размер = Агрегаты.Размер;
		СтрокаТаблицы.ОграничениеРазмера = Агрегаты.ОграничениеРазмера;
		СтрокаТаблицы.Эффект = Агрегаты.Эффект;
		
		Для Каждого Агрегат Из Агрегаты.Агрегаты Цикл
			
			СтрокаСпискаАгрРег = СписокАгрегатовРегистра.Добавить();
			СтрокаИзмерений = "";
			Для Каждого Измерения Из Агрегат.Измерения Цикл
				СтрокаИзмерений = СтрокаИзмерений + Измерения + ", ";
			КонецЦикла;
			СтрокаИзмерений = Сред(СтрокаИзмерений, 1, СтрДлина(СтрокаИзмерений)-2);
			СтрокаСпискаАгрРег.ИмяМетаданного = СтрокаТаблицы.ИмяМетаданного;
			СтрокаСпискаАгрРег.Периодичность = Строка(Агрегат.Периодичность);
			СтрокаСпискаАгрРег.Измерения = СтрокаИзмерений;
			СтрокаСпискаАгрРег.Использование = Агрегат.Использование;
			СтрокаСпискаАгрРег.НачалоПериода = Агрегат.НачалоПериода;
			СтрокаСпискаАгрРег.КонецПериода = Агрегат.КонецПериода;
			СтрокаСпискаАгрРег.Размер = Агрегат.Размер;
			
		КонецЦикла;
	КонецЦикла;
	
	СписокАгрегатовРегистра.Сортировать("Использование Убыв");
	
КонецПроцедуры // ОбновитьАгрегатыПоРегистрамНаСервере()

&НаКлиентеНаСервереБезКонтекста
Функция ОкончаниеПериода(Дата)
	
	Возврат КонецДня(КонецМесяца(Дата));
	
КонецФункции // ОкончаниеПериода()

&НаСервереБезКонтекста
Функция УстановитьПараметрыРегистраНаСервере(ВидРегистра, ИмяРегистра, знач Действие, Значение1, Значение2 = Неопределено, ПолеОшибки, СообщениеОбОшибке)
	
	Менеджеры = Новый Массив;
	Менеджеры.Добавить(РегистрыНакопления);
	Менеджеры.Добавить(РегистрыБухгалтерии);
	
	МенеджерыРегистров = Новый Массив;
	МенеджерыРегистров.Добавить(Метаданные.РегистрыНакопления);
	МенеджерыРегистров.Добавить(Метаданные.РегистрыБухгалтерии);
	
	Менеджер = Менеджеры[ВидРегистра][ИмяРегистра];
	МенеджерРегистра = МенеджерыРегистров[ВидРегистра][ИмяРегистра];
	Действие = НРег(Действие);
	
	ОК = Истина;
	
	Попытка
		
		
		Если Действие = "установитьиспользованиеитогов" Тогда
			
			Менеджер.УстановитьИспользованиеИтогов(Значение1);
			
		ИначеЕсли Действие = "использоватьтекущиеитоги" Тогда
			
			Менеджер.УстановитьИспользованиеТекущихИтогов(Значение1);
			
		ИначеЕсли Действие = "установитьразделениеитогов" Тогда
			
			Менеджер.УстановитьРежимРазделенияИтогов(Значение1);
			
		ИначеЕсли Действие = "установитьпериодитогов" Тогда
			
			Если ВидРегистра = 0 Тогда
				Дата = Значение1;
			ИначеЕсли ВидРегистра = 1 Тогда
				Дата = Значение2;
			КонецЕсли;
			
			Менеджер.УстановитьПериодРассчитанныхИтогов(Дата);
			
		ИначеЕсли Действие = "пересчитатьитоги" Тогда
			
			Менеджер.ПересчитатьИтоги();
			
		ИначеЕсли Действие = "пересчитатьтекущиеитоги" Тогда
			
			Менеджер.ПересчитатьТекущиеИтоги();
			
		ИначеЕсли Действие = "пересчитатьитогизапериод" Тогда
			
			Менеджер.ПересчитатьИтогиЗаПериод(Значение1, Значение2);
			
		Иначе
			ВызватьИсключение "Неправильное имя параметра(1): " + Действие;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке + Символы.ПС
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , ПолеОшибки);
		ОК = Ложь;
	КонецПопытки;
	
	Возврат ОК;
	
КонецФункции // УстановитьПараметрыРегистраНаСервере()

&НаСервереБезКонтекста
Функция ИзмеренияАгрегатовРавны(ОптимальныйАгрегат, КонфАгрегат)
	
	Если ОптимальныйАгрегат.Измерения.ВГраница() <> КонфАгрегат.Измерения.ВГраница() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Индекс1=0 По ОптимальныйАгрегат.Измерения.ВГраница() Цикл
		Найдено = Ложь;
		Для Индекс2=0 По КонфАгрегат.Измерения.ВГраница() Цикл
			Если ОптимальныйАгрегат.Измерения[Индекс1] = КонфАгрегат.Измерения[Индекс2].Имя Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ Найдено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьПараметрыАгрегатаНаСервере(ИмяРегистра, знач Действие, ЗначениеДействия1 = Истина, ЗначениеДействия2 = Неопределено, ПолеФормы, СообщениеОбОшибке = "", АдресФайлаВоВременномХранилище = "")
	
	Менеджер = РегистрыНакопления[ИмяРегистра];
	МенеджерРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	Действие = НРег(Действие);
	ОК = Истина;
	Попытка
		
		Если Действие = "установитьрежимагрегатов" Тогда
			
			Менеджер.УстановитьРежимАгрегатов(ЗначениеДействия1);
			
		ИначеЕсли Действие = "установитьиспользованиеагрегатов" Тогда
			
			Менеджер.УстановитьИспользованиеАгрегатов(ЗначениеДействия1);
			
		ИначеЕсли Действие = "заполнитьагрегаты" Тогда
			
			Менеджер.ОбновитьАгрегаты(Ложь);
			
		ИначеЕсли Действие = "перестроитьагрегаты" Тогда
			
			Менеджер.ПерестроитьИспользованиеАгрегатов(ЗначениеДействия1, ЗначениеДействия2);
			
		ИначеЕсли Действие = "очиститьагрегаты" Тогда
			
			Менеджер.ОчиститьАгрегаты();
			
		ИначеЕсли Действие = "получитьоптимальныеагрегаты" Тогда
			
			ОптимальныеАгрегаты = Менеджер.ОпределитьОптимальныеАгрегаты(ЗначениеДействия1);
			
			ЗначениеДействия1 = Ложь;
			
			НайденыеАгрегаты = Новый Соответствие;
			
			МетаданныеАгрегаты = МенеджерРегистра.Агрегаты;
			
			Для Индекс1=0 По ОптимальныеАгрегаты.Агрегаты.ВГраница() Цикл
				
				ЗначениеДействия1 = Ложь;
				Для Индекс2=0 По МетаданныеАгрегаты.Количество() - 1 Цикл
					
					Если ОптимальныеАгрегаты.Агрегаты[Индекс1].Периодичность = МетаданныеАгрегаты[Индекс2].Периодичность И
						НайденыеАгрегаты[Индекс2] = Неопределено И
						ИзмеренияАгрегатовРавны(ОптимальныеАгрегаты.Агрегаты[Индекс1], МетаданныеАгрегаты[Индекс2]) Тогда
						
						НайденыеАгрегаты.Вставить(Индекс2, Истина);
						ЗначениеДействия1 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеДействия1 Тогда
					
					Продолжить;
				КонецЕсли;
				
				Для Индекс2=0 По МетаданныеАгрегаты.Количество() - 1 Цикл
					Если ОптимальныеАгрегаты.Агрегаты[Индекс1].Периодичность = ПериодичностьАгрегатаРегистраНакопления.Авто И
						НайденыеАгрегаты[Индекс2] = Неопределено И
						ИзмеренияАгрегатовРавны(ОптимальныеАгрегаты.Агрегаты[Индекс1], МетаданныеАгрегаты[Индекс2]) Тогда
						
						НайденыеАгрегаты.Вставить(Индекс2, Истина);
						ЗначениеДействия1 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеДействия1 Тогда
					
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ЗаписьXML = Новый ЗаписьXML();
			ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОптимальныеАгрегаты);
			ЗаписьXML.Закрыть();
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
												Новый ДвоичныеДанные(ИмяВременногоФайла));
			УдалитьФайлы(ИмяВременногоФайла);
			
		Иначе
			
			ВызватьИсключение "Неправильное имя параметра: " + Действие;
			
		КонецЕсли;
		
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + " (" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + ")";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , ПолеФормы);
		ОК = Ложь;
	КонецПопытки;
	
	Возврат ОК;
	
КонецФункции // УстановитьПараметрыАгрегатаНаСервере()

&НаКлиенте
Процедура УстановитьФильтрСпискаАгрегатов()
	
	ТекущиеДанные = Элементы.АгрегатыПоРегистрам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Фильтр = Новый ФиксированнаяСтруктура("ИмяМетаданного", ТекущиеДанные.ИмяМетаданного);
		НовыйЗаголовок = Префикс() +  " " + ТекущиеДанные.Наименование;
	Иначе
		Фильтр = Новый ФиксированнаяСтруктура("ИмяМетаданного", "");
		НовыйЗаголовок = Префикс();
	КонецЕсли;
	
	Элементы.СписокАгрегатов.ОтборСтрок = Фильтр;
	
	Если Элементы.СписокАгрегатов.Заголовок <> НовыйЗаголовок Тогда
		Элементы.СписокАгрегатов.Заголовок = НовыйЗаголовок;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФильтрСпискаАгрегатов()

&НаКлиенте
Процедура УправлениеАгрегатом(ПараметрыСтруктуры)
	
	Результат = Истина;
	ОчиститьСообщения();
	Выбранные = ПараметрыСтруктуры.МассивСтрок;
	
	Если Выбранные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШагПроцесса = 100/Выбранные.Количество();
	Действие = НРег(ПараметрыСтруктуры.Действие);
	
	Если ПараметрыСтруктуры.Свойство("ГрупповаяОбработка") Тогда
		ТребуетсяПрерватьПослеОшибки = ?(ПараметрыСтруктуры.ГрупповаяОбработка, Ложь, ПрерыватьПриОшибке);
	Иначе
		ТребуетсяПрерватьПослеОшибки = ПрерыватьПриОшибке;
	КонецЕсли;
	
	Для Счетчик=1 По Выбранные.Количество() Цикл
		
		Если ТипЗнч(Выбранные[Счетчик-1]) = Тип("Число") Тогда
			ВыбраннаяСтрока = АгрегатыПоРегистрам.НайтиПоИдентификатору(Выбранные[Счетчик-1]);
		Иначе
			ВыбраннаяСтрока = Выбранные[Счетчик-1];
		КонецЕсли;
		
		ПолеСообщенияОбОшибке = ?(ПустаяСтрока(ПараметрыСтруктуры.Поле), "", "АгрегатыПоРегистрам[" + Выбранные[Счетчик-1] + "]."+ПараметрыСтруктуры.Поле);
		
		Если НЕ ВыбраннаяСтрока.РежимАгрегатов И НЕ (Действие = "установитьрежимагрегатов" ИЛИ Действие = "получитьоптимальныеагрегаты") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Операция невозможна в режиме итогов'"), , ПолеСообщенияОбОшибке);
			Продолжить;
		КонецЕсли;
		
		Состояние(ПараметрыСтруктуры.ОбрабатыватьЗаголовок, Счетчик*ШагПроцесса, ВыбраннаяСтрока.Наименование);
		
		АдресФайлаВоВременномХранилище = "";
		Значение1 = ПараметрыСтруктуры.Значение1;
		Значение2 = ПараметрыСтруктуры.Значение2;
		Результат = УстановитьПараметрыАгрегатаНаСервере(ВыбраннаяСтрока.ИмяМетаданного, ПараметрыСтруктуры.Действие, Значение1, Значение2, ПолеСообщенияОбОшибке, ПараметрыСтруктуры.ТекстСообщенияОбОшибке, АдресФайлаВоВременномХранилище);
		
		Если Результат И Действие = "получитьоптимальныеагрегаты" Тогда
			СохранитьОптимальныеНастройкиАгрегатов(ВыбраннаяСтрока.ИмяМетаданного, АдресФайлаВоВременномХранилище, "АгрегатыПоРегистрам[" + Выбранные[Счетчик-1] + "]."+ПараметрыСтруктуры.Поле);
			ВыбраннаяСтрока.ПостроениеОптимально = Значение1;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		Если НЕ Результат И ТребуетсяПрерватьПослеОшибки Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Действие = "установитьрежимагрегатов" ИЛИ Действие = "установитьиспользованиеагрегатов" Тогда
		ОбновитьСписокИтоговНаСервере();
	КонецЕсли;
	
	ОбновитьАгрегатыПоРегистрамНаСервере();
	
	Состояние(ПараметрыСтруктуры.ПослеПроцесса);
	УстановитьФильтрСпискаАгрегатов();
	
КонецПроцедуры // УправлениеАгрегатом()

&НаКлиенте
Процедура УправлениеИтогами(ПараметрыСтруктуры)
	
	Результат = Истина;
	ОчиститьСообщения();
	
	Выбранные = ПараметрыСтруктуры.МассивСтрок;
	Если Выбранные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШагПроцесса = 100/Выбранные.Количество();
	Действие = НРег(ПараметрыСтруктуры.Действие);
	
	Если ПараметрыСтруктуры.Свойство("ГрупповаяОбработка") Тогда
		ТребуетсяПрерватьПослеОшибки = ?(ПараметрыСтруктуры.ГрупповаяОбработка, Ложь, ПрерыватьПриОшибке);
	Иначе
		ТребуетсяПрерватьПослеОшибки = ПрерыватьПриОшибке;
	КонецЕсли;
	
	Для Счетчик=1 По Выбранные.Количество() Цикл
		
		Если ТипЗнч(Выбранные[Счетчик-1]) = Тип("Число") Тогда
			
			ВыбраннаяСтрока = СписокИтогов.НайтиПоИдентификатору(Выбранные[Счетчик-1]);
			
		Иначе
			
			ВыбраннаяСтрока = Выбранные[Счетчик-1];
			
		КонецЕсли;
		Состояние(ПараметрыСтруктуры.ОбрабатыватьЗаголовок, Счетчик*ШагПроцесса, ВыбраннаяСтрока.Наименование);
		
		Если Действие = "установитьиспользованиеитогов" Тогда
			
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
		ИначеЕсли Действие = "использоватьтекущиеитоги" Тогда
			
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 ИЛИ НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				
				Продолжить;
				
			КонецЕсли;
		ИначеЕсли Действие = "установитьпериодитогов" Тогда
			
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 ИЛИ НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				
				Продолжить;
				
			КонецЕсли;
		ИначеЕсли Действие = "установитьразделениеитогов" Тогда
			
			Если НЕ ВыбраннаяСтрока.РазрешитьРазделениеИтогов Тогда
				
				Продолжить;
				
			КонецЕсли;
		ИначеЕсли Действие = "пересчитатьитоги" Тогда
			
			Если ВыбраннаяСтрока.АгрегатыИтоги Тогда
				
				Продолжить;
				
			КонецЕсли;
		ИначеЕсли  Действие = "пересчитатьитогизапериод" Тогда
			
			Если ВыбраннаяСтрока.АгрегатыИтоги = 1 ИЛИ НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				
				Продолжить;
				
			КонецЕсли;
		ИначеЕсли Действие = "пересчитатьтекущиеитоги" Тогда
			
			Если НЕ ВыбраннаяСтрока.ОборотныйРег Тогда
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		Результат = УстановитьПараметрыРегистраНаСервере(ВыбраннаяСтрока.Тип, ВыбраннаяСтрока.ИмяМетаданного, ПараметрыСтруктуры.Действие, ПараметрыСтруктуры.Значение1, ПараметрыСтруктуры.Значение2, ?(ПустаяСтрока(ПараметрыСтруктуры.Поле), "", "СписокИтогов[" + Выбранные[Счетчик-1] + "]." + ПараметрыСтруктуры.Поле), ПараметрыСтруктуры.ТекстСообщенияОбОшибке);
		
		ОбработкаПрерыванияПользователя();
		Если НЕ Результат И ТребуетсяПрерватьПослеОшибки Тогда
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;

	ОбновитьСписокИтоговНаСервере();
	
	Состояние(ПараметрыСтруктуры.ПослеПроцесса);
	
КонецПроцедуры // УправлениеИтогами()

&НаКлиенте
Функция ПолучитьПараметрыПерестроения(РежимПерестроения)
	
	ПараметрыСтруктуры = Новый Структура;
	ПараметрыСтруктуры.Вставить("ОтносительныйРазмер", ?(РежимПерестроения, ОтносительныйРазмер, ОптимальныйОтносительныйРазмер));
	ПараметрыСтруктуры.Вставить("МинимальныйЭффект", ?(РежимПерестроения, МинимальныйЭффект, 0));
	ПараметрыСтруктуры.Вставить("РежимПерестроения", РежимПерестроения);
	
	Форма = ПолучитьФорму(ПутьКОбъектуМетаданных + ".Форма.ФормаПараметровПерестроения", ПараметрыСтруктуры);
	
	Результат = Форма.ОткрытьМодально();
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если РежимПерестроения Тогда
			ОтносительныйРазмер = Форма.ПараметрыПерестроения[0];
			МинимальныйЭффект = Форма.ПараметрыПерестроения[1];
		Иначе
			ОптимальныйОтносительныйРазмер = Форма.ПараметрыПерестроения[0];
		КонецЕсли;
		
		Возврат Форма.ПараметрыПерестроения;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ПолучитьПараметрыПерестроения()

&НаКлиенте
Функция СохранитьОптимальныеНастройкиАгрегатов(ИмяМетаданного, АдресФайлаВоВременномХранилище, Поле)
	
	Попытка
		ПолноеИмяФайла = ?(ПутьКОптимальнымАгрегатам = "web", "", ПутьКОптимальнымАгрегатам + "\") + ИмяМетаданного + ".xml";
#Если ВебКлиент Тогда
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолноеИмяФайла, Истина);
#Иначе
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ПолноеИмяФайла, Ложь);
#КонецЕсли
		УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
									НСтр("ru='Ошибка записи файла оптимальных агрегатов'")
								+ Символы.ПС
								+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
								
		УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРасширенныйРежим()
	
	Элементы.Операции.ТекущаяСтраница = ?(ПолныеВозможности, Элементы.РасширенныеВозможности, Элементы.БыстыйДоступ);
	
	Элементы.БыстыйДоступ.Видимость = НЕ ПолныеВозможности;
	Элементы.РасширенныеВозможности.Видимость = ПолныеВозможности;
	
	ТекстРежимаБезПолныхВозможностей = НСтр("ru='Часто используемые возможности'");
	ТекстРежимаСПолнымиВозможностями = НСтр("ru='Полные возможности'");
	
	Заголовок = НСтр("ru='Управление итогами'") + " - " + НРег(?(ПолныеВозможности, ТекстРежимаСПолнымиВозможностями, ТекстРежимаБезПолныхВозможностей));
	ТекстГиперСсылки = ?(ПолныеВозможности, ТекстРежимаБезПолныхВозможностей, ТекстРежимаСПолнымиВозможностями);
	
КонецПроцедуры // УстановитьРасширенныйРежим()

&НаКлиенте
Функция ВыборПутиККаталогу(ТекущийКаталог)
	
	Каталог = "";
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ВыборКаталога = Новый ДиалогВыбораФайла (РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.Каталог = ТекущийКаталог;
		ВыборКаталога.Заголовок = НСтр("ru='Выберите каталог для размещения файлов с оптимальными агрегатами'");
		Если ВыборКаталога.Выбрать() Тогда
			Каталог = ВыборКаталога.Каталог;
		КонецЕсли;
	Иначе
		Каталог = "web";
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции // ВыборПутиККаталогу()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СписокИтогов.Количество() = 0 Тогда
		Элементы.ГруппаИтогов.Доступность = Ложь;
		Элементы.УстановитьПериодРасчитанныхИтогов.Доступность = Ложь;
		Элементы.ВключитьИспользованиеИтогов.Доступность = Ложь;
	КонецЕсли;
	
	Если АгрегатыПоРегистрам.Количество() = 0 Тогда
		Элементы.ГруппаАгрегаты.Доступность = Ложь;
		Элементы.ПерестроитьИЗаполнитьАгрегаты.Доступность = Ложь;
		Элементы.ПолучитьОптимальныеАгрегаты.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.Операции.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	УстановитьРасширенныйРежим();
	
	РассчитатьИтогиНа = ТекущаяДата();
	ОписаниеУстановкиПериода = НСтр("ru='Установить период рассчитанных итогов для всех регистров накопления и бухгалтерии, у которых включены итоги. Для регистров накопления - на [1]. Для регистров бухгалтерии - на [2].'");
	ОписаниеУстановкиПериода = СтрЗаменить(ОписаниеУстановкиПериода, "[1]", Формат(ОкончаниеПериода(ДобавитьМесяц(РассчитатьИтогиНа, -1)), "DLF=D"));
	ОписаниеУстановкиПериода = СтрЗаменить(ОписаниеУстановкиПериода, "[2]", Формат(ОкончаниеПериода(РассчитатьИтогиНа), "DLF=D"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИтоговПриАктивизацииСтроки(Элемент)
	
	Элементы.ГруппаРазделениеИтогов.Доступность = Элементы.СписокИтогов.ТекущиеДанные.РазрешитьРазделениеИтогов;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИтоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяМетаданного = СписокИтогов.НайтиПоИдентификатору(ВыбраннаяСтрока).ИмяМетаданного;
	Если Поле.Имя = "ИтогиАгрегатыИтоги" Тогда
		
		СтандартнаяОбработка = Ложь;
		МассивРезультата = АгрегатыПоРегистрам.НайтиСтроки(Новый Структура("ИмяМетаданного", ИмяМетаданного));
		Если МассивРезультата.Количество() > 0 Тогда
			
			Индекс = АгрегатыПоРегистрам.Индекс(МассивРезультата[0]);
			ТекущийЭлемент = Элементы.АгрегатыПоРегистрам;
			Элементы.АгрегатыПоРегистрам.ТекущаяСтрока = Индекс;
			Элементы.АгрегатыПоРегистрам.ТекущийЭлемент = Элементы.АгрСписокНаименование;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение использования итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение использования итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьИспользованиеИтогов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ИспользоватьИтоги";
	ПараметрыСтруктуры.Значение1 = Истина;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения использования итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеТекущихИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение использования текущих итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение использования текущих итогов завершено'");
	ПараметрыСтруктуры.Действие = "ИспользоватьТекущиеИтоги";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ИспользоватьТекущиеИтоги";
	ПараметрыСтруктуры.Значение1 = Истина;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения использования текущих итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИспользованиеИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Выключение использования итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Выключение использования итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьИспользованиеИтогов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ИспользоватьИтоги";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка выключения использования итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИспользованиеТекущихИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Выключение использования текущих итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Выключение использования текущих итогов завершено'");
	ПараметрыСтруктуры.Действие = "ИспользоватьТекущиеИтоги";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ИспользоватьТекущиеИтоги";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка выключения использования текущих итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеИтогов()
	
	ОбновитьСписокИтоговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодИтогов()
	
	ПараметрыСтруктуры = Новый Структура("РегНакопления, РегБухгалтерии", Ложь, Ложь);
	Для Каждого Индекс Из Элементы.СписокИтогов.ВыделенныеСтроки Цикл
		ИнформацияПоРегистру = СписокИтогов.НайтиПоИдентификатору(Индекс);
		ПараметрыСтруктуры.РегНакопления = ?(ИнформацияПоРегистру.Тип = 0, Истина, ПараметрыСтруктуры.РегНакопления);
		ПараметрыСтруктуры.РегБухгалтерии = ?(ИнформацияПоРегистру.Тип = 1, Истина, ПараметрыСтруктуры.РегБухгалтерии);
	КонецЦикла;
	
	Форма = ПолучитьФорму(ПутьКОбъектуМетаданных + ".Форма.ФормаВыбораПериода", ПараметрыСтруктуры);
	
	Результат = Форма.ОткрытьМодально();
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Установка периода рассчитанных итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Установка периода рассчитанных итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьПериодИтогов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ПериодИтогов";
	ПараметрыСтруктуры.Значение1 = Форма.ПериодДляРегНакоп;
	ПараметрыСтруктуры.Значение2 = Форма.ПериодДляРегБухг;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка установки периода рассчитанных итогов.'");
	
	УправлениеИтогами(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ВключитьРазделениеИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение разделения итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение разделения итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьРазделениеИтогов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "РазделениеИтогов";
	ПараметрыСтруктуры.Значение1 = Истина;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения разделения итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРазделениеИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Выключение разделения итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Выключение разделения итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьРазделениеИтогов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "РазделениеИтогов";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка выключения разделения итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбАгрегатах()

	ОбновитьАгрегатыПоРегистрамНаСервере();
	УстановитьФильтрСпискаАгрегатов();
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегатыПоРегистрамПриАктивизацииСтроки(Элемент)
	
	УстановитьФильтрСпискаАгрегатов();
	
	Если Элементы.АгрегатыПоРегистрам.РежимВыделения = РежимВыделенияТаблицы.Одиночный Тогда
		ДоступностьЭлементов = Элементы.АгрегатыПоРегистрам.ТекущиеДанные.РежимАгрегатов;
	Иначе
		ДоступностьЭлементов = Истина;
	КонецЕсли;
	
	Элементы.АгрРегПерестроить.Доступность					= ДоступностьЭлементов;
	Элементы.АгрРегОчиститьАгрегатыПоРегистрам.Доступность	= ДоступностьЭлементов;
	Элементы.АгрРегЗаполнитьАгрегатыПоРегистрам.Доступность	= ДоступностьЭлементов;
	Элементы.АгрРегОптимальные.Доступность					= ДоступностьЭлементов;
	Элементы.АгрРегОтключитьИспользованиеАгрегатов.Доступность	= ДоступностьЭлементов;
	Элементы.АгрРегВключитьИспользованиеАгрегатов.Доступность	= ДоступностьЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимАгрегатов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение режима агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение режима агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьРежимАгрегатов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "РежимАгрегатов";
	ПараметрыСтруктуры.Значение1 = Истина;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения режима агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимИтогов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение режима итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение режима итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьРежимАгрегатов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "РежимАгрегатов";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения режима итогов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеАгрегатов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение использования агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение использования агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьИспользованиеАгрегатов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ИспользованиеАгрегатов";
	ПараметрыСтруктуры.Значение1 = Истина;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения использования агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ВыключитьИспользованиеАгрегатов()
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Выключение использования агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Выключение использования агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьИспользованиеАгрегатов";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "ИспользованиеАгрегатов";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка выключения использования агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ПерестроитьАгрегаты()
	
	Результат = ПолучитьПараметрыПерестроения(Истина);
	Если ТипЗнч(Результат) <> Тип("ФиксированныйМассив") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Перестроение агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Перестроение агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "ПерестроитьАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "Наименование";
	ПараметрыСтруктуры.Значение1 = Результат[0];
	ПараметрыСтруктуры.Значение2 = Результат[1];
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка перестроения агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАгрегатыПоРегистрам(Команда)
	
	Результат = Вопрос(НСтр("ru='Очистка агрегатов приведет к существенному замедлению отчетов'") + Символы.ПС + НСтр("ru='Выполнить очистку?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Очистка агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Очистка агрегатов завершена'");
	ПараметрыСтруктуры.Действие = "ОчиститьАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "Наименование";
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка очистки агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАгрегатыПоРегистрам(Команда)
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Заполнение агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Заполнение агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "ЗаполнитьАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "Наименование";
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка заполнения агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегатыОптимальные(Команда)
	
	Результат = ПолучитьПараметрыПерестроения(Ложь);
	
	Если ТипЗнч(Результат) <> Тип("ФиксированныйМассив") Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКОптимальнымАгрегатам = ВыборПутиККаталогу(ПутьКОптимальнымАгрегатам);
	
	Если ПустаяСтрока(ПутьКОптимальнымАгрегатам) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Получение списка оптимальных агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Получение списка оптимальных агрегатов завершено.'");
	ПараметрыСтруктуры.Действие = "ПолучитьОптимальныеАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = Элементы.АгрегатыПоРегистрам.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "Наименование";
	ПараметрыСтруктуры.Значение1 = Результат[0];
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка получения списка оптимальных агрегатов.'");
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСТекстомНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолныеВозможности = НЕ ПолныеВозможности;
	УстановитьРасширенныйРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодРасчитанныхИтогов(Команда)
	
	Результат = Истина;
	ОчиститьСообщения();
	
	МассивДействий = СписокИтогов.НайтиСтроки(Новый Структура("ОборотныйРег", Истина));
	
	Если МассивДействий.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Установка периода рассчитанных итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Установка периода рассчитанных итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьПериодИтогов";
	ПараметрыСтруктуры.МассивСтрок = МассивДействий;
	ПараметрыСтруктуры.Поле = "ПериодИтогов";
	ПараметрыСтруктуры.Значение1 = ОкончаниеПериода(ДобавитьМесяц(РассчитатьИтогиНа, -1));
	ПараметрыСтруктуры.Значение2 = ОкончаниеПериода(РассчитатьИтогиНа);
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка установки периода рассчитанных итогов.'");
	ПараметрыСтруктуры.Вставить("ГрупповаяОбработка", Истина);
	УправлениеИтогами(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеИтоговБыстрыйДоступ(Команда)
	
	Результат = Истина;
	ОчиститьСообщения();
	
	МассивДействий = СписокИтогов.НайтиСтроки(Новый Структура("ИспользоватьИтоги", Ложь));
	
	Если МассивДействий.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Включение использования итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Включение использования итогов завершено'");
	ПараметрыСтруктуры.Действие = "УстановитьИспользованиеИтогов";
	ПараметрыСтруктуры.МассивСтрок = МассивДействий;
	ПараметрыСтруктуры.Поле = "";
	ПараметрыСтруктуры.Значение1 = Истина;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка включения использования итогов'");
	ПараметрыСтруктуры.Вставить("ГрупповаяОбработка", Истина);
	УправлениеИтогами(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАгрегатыИВыполнитьПерестроение(Команда)
	
	ОчиститьСообщения();
	
	МассивДействий = АгрегатыПоРегистрам.НайтиСтроки(Новый Структура("РежимАгрегатов,ИспользованиеАгрегатов", Истина, Истина));
	
	Если МассивДействий.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.'"));
		Возврат;
	КонецЕсли;
	
	ШагПроцесса = 100/МассивДействий.Количество();
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Перестроение агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Перестроение агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "ПерестроитьАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = МассивДействий;
	ПараметрыСтруктуры.Поле = "";
	ПараметрыСтруктуры.Значение1 = 0;
	ПараметрыСтруктуры.Значение2 = 0;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка перестроения агрегатов'");
	ПараметрыСтруктуры.Вставить("ГрупповаяОбработка", Истина);
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Заполнение агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Заполнение агрегатов завершено'");
	ПараметрыСтруктуры.Действие = "ЗаполнитьАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = МассивДействий;
	ПараметрыСтруктуры.Поле = "";
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка заполнения агрегатов'");
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОптимальныеАгрегаты(Команда)
	
	Если АгрегатыПоРегистрам.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Отсутствуют регистры, для которых можно выполнить данную операцию.'"));
		Возврат;
	КонецЕсли;
	
	ПутьКОптимальнымАгрегатам = ВыборПутиККаталогу(ПутьКОптимальнымАгрегатам);
	Если ПустаяСтрока(ПутьКОптимальнымАгрегатам) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Получение списка оптимальных агрегатов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Получение списка оптимальных агрегатов завершено.'");
	ПараметрыСтруктуры.Действие = "ПолучитьОптимальныеАгрегаты";
	ПараметрыСтруктуры.МассивСтрок = АгрегатыПоРегистрам;
	ПараметрыСтруктуры.Поле = "";
	ПараметрыСтруктуры.Значение1 = 0;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка получения списка оптимальных агрегатов.'");
	ПараметрыСтруктуры.Вставить("ГрупповаяОбработка", Истина);
	УправлениеАгрегатом(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги(Команда)
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Пересчет итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Пересчет итогов завершен'");
	ПараметрыСтруктуры.Действие = "ПересчитатьИтоги";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "Наименование";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка пересчета итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТекущиеИтоги(Команда)
	
	ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
	ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Пересчет итогов ...'");
	ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Пересчет итогов завершен'");
	ПараметрыСтруктуры.Действие = "ПересчитатьТекущиеИтоги";
	ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
	ПараметрыСтруктуры.Поле = "Наименование";
	ПараметрыСтруктуры.Значение1 = Ложь;
	ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка пересчета итогов'");
	УправлениеИтогами(ПараметрыСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиЗаПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ПериодПерерасчетаРегистров;
	Если Диалог.Редактировать() Тогда
		
		ПериодПерерасчетаРегистров = Диалог.Период;
		ПараметрыСтруктуры = Новый Структура("ОбрабатыватьЗаголовок,ПослеПроцесса,Действие,МассивСтрок,Поле,Значение1,Значение2,ТекстСообщенияОбОшибке");
		ПараметрыСтруктуры.ОбрабатыватьЗаголовок = НСтр("ru='Пересчет итогов за период ...'");
		ПараметрыСтруктуры.ПослеПроцесса = НСтр("ru='Пересчет итогов завершен'");
		ПараметрыСтруктуры.Действие = "ПересчитатьИтогиЗаПериод";
		ПараметрыСтруктуры.МассивСтрок = Элементы.СписокИтогов.ВыделенныеСтроки;
		ПараметрыСтруктуры.Поле = "Наименование";
		ПараметрыСтруктуры.Значение1 = ПериодПерерасчетаРегистров.ДатаНачала;
		ПараметрыСтруктуры.Значение2 = ПериодПерерасчетаРегистров.ДатаОкончания;
		ПараметрыСтруктуры.ТекстСообщенияОбОшибке = НСтр("ru='Ошибка пересчета итогов'");
		УправлениеИтогами(ПараметрыСтруктуры);
		
	КонецЕсли;
		
КонецПроцедуры

Функция Префикс()
	
	Возврат НСтр("ru='Агрегаты регистра'");
	
КонецФункции