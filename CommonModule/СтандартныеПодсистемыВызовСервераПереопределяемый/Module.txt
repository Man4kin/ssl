// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Не предназначена для прямого вызова из клиентского кода. 
// Вместо нее следует использовать одноименную функцию из 
// модуля СтандартныеПодсистемыКлиентПовтИсп.
//
// Реализация:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	Если НЕ ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы
	
	// Для установки параметров инициализации системы можно использовать шаблон:
	//
	// Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
	//
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) 
	
	// БазоваяФункциональность
	Если НЕ СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиента(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Конец БазоваяФункциональность
	
	// Взаимодействия
	Параметры.Вставить("ИспользоватьВзаимодействия", ПолучитьФункциональнуюОпцию("ИспользоватьВзаимодействия"));
	// Конец Взаимодействия
	
	// ЗавершениеРаботыПользователей
	Параметры.Вставить("ПараметрыБлокировкиСеансов", Новый ФиксированнаяСтруктура(СоединенияИБ.ПараметрыБлокировкиСеансов()));
	// Конец ЗавершениеРаботыПользователей
	
	// ОбновлениеИнформационнойБазы
	Параметры.Вставить("ПервыйЗапуск", ОбновлениеИнформационнойБазы.ПервыйЗапуск());
	// Конец ОбновлениеИнформационнойБазы
	
	// ОбновлениеКонфигурации
	Параметры.Вставить("НастройкиОбновления", 
		Новый ФиксированнаяСтруктура(ОбновлениеКонфигурации.ПолучитьНастройкиОбновления()));
	// Конец ОбновлениеКонфигурации
	
	// ОбменДанными
	ОбменДаннымиСервер.ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры);
	// Конец ОбменДанными
	
	// ПроверкаЛегальностиПолученияОбновлений
	Параметры.Вставить("ЭтоГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	// Конец ПроверкаЛегальностиПолученияОбновлений
	
	// ПолучениеФайловИзИнтернета
	Параметры.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.ПолучитьНастройкуПроксиСервера());
	// Конец ПолучениеФайловИзИнтернета
	
	// ФайловыеФункции
	Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами",
		Новый ФиксированнаяСтруктура(ФайловыеФункцииПереопределяемый.ПолучитьПерсональныеНастройкиРаботыСФайлами()));
	// Конец ФайловыеФункции
	
	// ЭлектроннаяЦифроваяПодпись
	Параметры.Вставить("ПерсональныеНастройкиРаботыСЭЦП",
		Новый ФиксированнаяСтруктура(ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер()));
	// Конец ЭлектроннаяЦифроваяПодпись
	
	// РегламентныеЗадания
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Параметры.Вставить("ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий", 
			Новый ФиксированнаяСтруктура(РегламентныеЗаданияСервер.ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Истина)));
	КонецЕсли;
	// Конец РегламентныеЗадания
	
	// УправлениеДоступом
	Параметры.Вставить("УпрощенныйИнтерфейсНастройкиПравДоступа", УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа());
	// Конец УправлениеДоступом
	
	// РезервноеКопированиеИБ
	Параметры.Вставить("ПараметрыРезервногоКопированияИБ", РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования());
	// Конец РезервноеКопированиеИБ
	
	Возврат Истина;
	
КонецФункции

