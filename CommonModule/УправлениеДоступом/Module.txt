
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: программный интерфейс прикладного разработчика.

// Функция ЕстьРоль проверяет, что у текущего пользователя есть роль в
// в одном из профилей тех групп доступа в которые он входит,
// например, роль ПросмотрЖурналаРегистрации, роль ПечатьНепроведенныхДокументов, ...
//
// Параметры:
//  Роль         - Строка - имя роли.
//  НаборыЗначенийДоступа - ТаблицаЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа),
//                 пустую подготовленную таблицу можно получить с помощью функции
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено.
//                 Если не заполнено, тогда право проверяется для текущего пользователя.
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРоль(Знач Роль, Знач НаборыЗначенийДоступа = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",           Пользователь);
	Запрос.УстановитьПараметр("Роль",                   Роль);
	
	Если НаборыЗначенийДоступа = Неопределено ИЛИ НЕ ОграничиватьДоступНаУровнеЗаписей() Тогда
		// Проверка, что роль назначается пользователю через группу доступа по профилю.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
		|			И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль = &Роль)
		|			И ((НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления))";
	Иначе
		
		// Проверка, что роль назначается пользователю через группу доступа по профилю с разрешенными наборами значений доступа.
		
		Запрос.УстановитьПараметр("НаборыЗначенийДоступа", НаборыЗначенийДоступа);
		Запрос.УстановитьПараметр("СвойстваВидовДоступа",  СвойстваВидаДоступа());
		Запрос.УстановитьПараметр("ВидДоступаПользователи", ?(ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи"),
		                                                      ПланыВидовХарактеристик.ВидыДоступа.Пользователи,
		                                                      ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа
		|ПОМЕСТИТЬ НаборыЗначенийДоступаБезСвойств
		|ИЗ
		|	&НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваВидовДоступа.ВидДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа
		|ПОМЕСТИТЬ СвойстваВидовДоступа
		|ИЗ
		|	&СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения))
		|			ТОГДА ЕСТЬNULL(ТипыСсылок.ТипТаблицы, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипЗначенияДоступа,
		|	ТипыСсылок.Таблица
		|ПОМЕСТИТЬ НаборыЗначенийДоступа
		|ИЗ
		|	НаборыЗначенийДоступаБезСвойств КАК НаборыЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
		|		ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТипыСсылок.ТипТаблицы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|		ПО НаборыЗначенийДоступа.ВидДоступа = СвойстваВидовДоступа.ВидДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ПОМЕСТИТЬ ГруппыДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
		|			И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль = &Роль)
		|			И ((НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Наборы.НомерНабора
		|				ИЗ
		|					НаборыЗначенийДоступа КАК Наборы
		|				) КАК НомераНаборов
		|			ГДЕ
		|				(НЕ ЛОЖЬ В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ЛОЖЬ
		|						ИЗ
		|							НаборыЗначенийДоступа КАК НаборыЗначений
		|						ГДЕ
		|							НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
		|							И (НЕ ВЫБОР
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|										ТОГДА НаборыЗначений.ЗначениеДоступа <> НЕОПРЕДЕЛЕНО
		|									КОГДА НаборыЗначений.ТипЗначенияДоступа <> НЕОПРЕДЕЛЕНО
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы = НаборыЗначений.ТипЗначенияДоступа
		|													И НаборыЗначений.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ТаблицыГруппДоступаПроверкаПраваНаОбъект.ВидДоступаПравоДобавления, ТаблицыГруппДоступаПроверкаПраваНаОбъект.ВидДоступаПравоИзменения))
		|									КОГДА НаборыЗначений.ВидДоступаЧерезПраваПоЗначениямДоступа
		|										ТОГДА ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|															ПО
		|																ИерархияЗначений.ИспользоватьПраваСсылки
		|																	И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																	И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																	И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																	И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
		|																	И ПраваПоЗначениям.Чтение
		|																	И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|															ПО
		|																ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|																	И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
		|																	И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь)
		|												И (НЕ ЛОЖЬ В
		|														(ВЫБРАТЬ ПЕРВЫЕ 1
		|															ЛОЖЬ
		|														ИЗ
		|															РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|																ПО
		|																	ИерархияЗначений.ИспользоватьПраваСсылки
		|																		И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																		И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																		И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
		|																		И ПраваПоЗначениям.ЧтениеЗапрещено
		|																		И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|																ПО
		|																	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|																		И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
		|																		И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь))
		|									ИНАЧЕ (НаборыЗначений.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
		|											ИЛИ (НЕ ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ГруппыЗначенийДоступа КАК ВидыЗначений
		|													ГДЕ
		|														ВидыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|														И ВидыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|														И ВидыЗначений.ТолькоВидДоступа = ИСТИНА)))
		|											И ВЫБОР
		|												КОГДА НаборыЗначений.ВидДоступа = &ВидДоступаПользователи
		|															И ИСТИНА В
		|																(ВЫБРАТЬ ПЕРВЫЕ 1
		|																	ИСТИНА
		|																ИЗ
		|																	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|																ГДЕ
		|																	ПользователиИГруппыПользователей.ВидДоступа = &ВидДоступаПользователи
		|																	И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
		|																	И ПользователиИГруппыПользователей.ГруппаДоступа = НаборыЗначений.ЗначениеДоступа)
		|														ИЛИ ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступаБезГруппЗначенияДоступа
		|																ТОГДА ВЫБОР
		|																		КОГДА ИСТИНА В
		|																				(ВЫБРАТЬ
		|																					ИСТИНА
		|																				ИЗ
		|																					РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																				ГДЕ
		|																					Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																					И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																					И Значения.ТолькоВидДоступа = ЛОЖЬ
		|																					И Значения.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа)
		|																			ТОГДА ИСТИНА
		|																		ИНАЧЕ ЛОЖЬ
		|																	КОНЕЦ
		|															ИНАЧЕ ВЫБОР
		|																	КОГДА ИСТИНА В
		|																			(ВЫБРАТЬ ПЕРВЫЕ 1
		|																				ИСТИНА
		|																			ИЗ
		|																				РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																					ПО
		|																						ГруппыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И ГруппыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																							И Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																							И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И Значения.ТолькоВидДоступа = ГруппыЗначений.ТолькоВидДоступа
		|																							И Значения.ЗначениеДоступа = ГруппыЗначений.ГруппаДоступа)
		|																		ТОГДА ИСТИНА
		|																	ИНАЧЕ ЛОЖЬ
		|																КОНЕЦ
		|														КОНЕЦ = ВЫБОР
		|															КОГДА ИСТИНА В
		|																	(ВЫБРАТЬ
		|																		ИСТИНА
		|																	ИЗ
		|																		РегистрСведений.ЗначенияГруппДоступа КАК Виды
		|																	ГДЕ
		|																		Виды.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																		И Виды.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И Виды.ТолькоВидДоступа = ИСТИНА)
		|																ТОГДА ИСТИНА
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|													ТОГДА ИСТИНА
		|												ИНАЧЕ ЛОЖЬ
		|											КОНЕЦ
		|								КОНЕЦ))))";
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция ЕстьПравоПоЗначениюДоступа проверяет, что у пользователя есть право,
// устанавливаемое по значению доступа, например, по папке файлов могут устанавливаться
// права "УправлениеПравами", "ЧтениеПапокФайлов", "ЧтениеФайлов", которые являются
// как правами для папки файлов, так и правами для файлов или для двух элементов данных
// сразу - "ЧтениеПапокИФайлов".
//
// Параметры:
//  Право        - Строка.
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка, Неопределено - значение,
//                 для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено. Если не заполнено,
//                 тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьПравоПоЗначениюДоступа(Знач Право, Знач ЗначениеДоступа, Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Подготовка массива из ролей, хотя бы одна из которых требуется для права по значению доступа.
	ОписаниеПрава = ВозможныеПраваПоЗначениюДоступа(ЗначениеДоступа.Метаданные().ПолноеИмя()).Найти(Право, "Имя");
	Если ОписаниеПрава = Неопределено Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдено право ""%1"" таблицы ""%2""'"), Право, ЗначениеДоступа.Метаданные().ПолноеИмя()));
	КонецЕсли;
	
	// Проверка, что хотя бы одна из ролей назначается пользователю через профиль его групп доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|			И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль В (&Роли))
	|			И ((НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роли",         ОписаниеПрава.ТребуемаяРоль);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
	
	Если ЕстьПраво Тогда
	
		// Проверка, что по виду доступа ограничение установлено в каждой группе доступа пользователя.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(ГруппыДоступаПользователя.ГруппаДоступа) КАК КоличествоГруппДоступа,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначенияГруппДоступа.ГруппаДоступа ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоВключенныхОграничений
		|ИЗ
		|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
		|		ПО ГруппыДоступаПользователя.ГруппаДоступа = ЗначенияГруппДоступа.ГруппаДоступа
		|			И (ЗначенияГруппДоступа.ВидДоступа = &ВидДоступа)
		|			И (ЗначенияГруппДоступа.ТолькоВидДоступа)";
		Запрос.УстановитьПараметр("ВидДоступа", ВидыДоступаТаблицы(ЗначениеДоступа.Метаданные().ПолноеИмя())[0]);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		// Проверка права пользователя по значению доступа.
		Если Выборка.КоличествоГруппДоступа = Выборка.КоличествоВключенныхОграничений И
			 ЗначениеДоступа <> Неопределено И
			 ОграничиватьДоступНаУровнеЗаписей() Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИСТИНА КАК ЗначениеИстина
			|ГДЕ
			|	ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|					ПО
			|						ИерархияЗначений.ВидДоступа = &ВидДоступа
			|							И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|							И ИерархияЗначений.ИспользоватьПраваСсылки
			|							И ПраваПоЗначениям.Право = &Право
			|							И (НЕ ПраваПоЗначениям.Запрещено)
			|							И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
			|							И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|					ПО
			|						ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
			|							И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
			|							И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
			|							И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь)
			|	И (НЕ ЛОЖЬ В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ЛОЖЬ
			|				ИЗ
			|					РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|						ПО
			|							ИерархияЗначений.ВидДоступа = &ВидДоступа
			|								И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|								И ИерархияЗначений.ИспользоватьПраваСсылки
			|								И ПраваПоЗначениям.Право = &Право
			|								И ПраваПоЗначениям.Запрещено
			|								И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
			|								И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|						ПО
			|							ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
			|								И ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь
			|								И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
			|								И ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениям.Пользователь))";
			Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
			Запрос.УстановитьПараметр("Право",           Право);
			ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции // ЕстьПравоПоЗначениюДоступа()

// Функция РазрешеноУправлениеПравамиПоЗначениямДоступа проверяет у текущего пользователя
// есть право "УправлениеПравами", разрешающее изменять
// права заданного значения доступа для пользователей и групп пользователей
// или права различных значений доступа для заданного пользователя или группы пользователей.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей,
//                 или значение доступа СправочникСсылка, ПланВидовХарактеристикСсылка,
//                 для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//  ОписаниеОшибки - Строка, заполнена когда разрешения нет.
//  ТолькоПросмотр - Булево, только для внутренних нужд - не использовать.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешеноУправлениеПравамиПоЗначениямДоступа(Знач СсылкаНаОбъект, ОписаниеОшибки, ТолькоПросмотр = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоЗначениеДоступа = НЕ (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
	                         ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей") ИЛИ
	                         ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	                         ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") );
	
	РазрешеноУправлениеПравами = Истина;
	
	Если НЕ ЕстьПравоПоЗначениюДоступа("УправлениеПравами", СсылкаНаОбъект) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 ""%2"" недоступна для управления правами.'"), СсылкаНаОбъект.Метаданные().ПредставлениеОбъекта, СсылкаНаОбъект);
		РазрешеноУправлениеПравами = Ложь;
	КонецЕсли;
		
	Возврат РазрешеноУправлениеПравами;
	
КонецФункции // РазрешеноУправлениеПравамиПоЗначениямДоступа()

// Функция возвращает значение ПараметрСеанса.ОграничиватьДоступПоВиду,
// установленное по значению Константа.ОграничиватьДоступНаУровнеЗаписей.
//
Функция ОграничиватьДоступНаУровнеЗаписей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат(ПараметрыСеанса.ОграничиватьДоступПоВиду <> "");
	
КонецФункции // ОграничиватьДоступНаУровнеЗаписей()

// Функция НовоеОписаниеПрофиляГруппДоступа возвращает структуру для 
// удобства описания начальных профилей.
//  Чтобы задать предустановленный вид доступа,
// нужно в представлении задать строку Предустановленный.
//  Чтобы добавить значение доступа нужно задать
// полное имя предопределенного элемента, например,
// "Справочник.ГруппыПользователей.ВсеПользователи".
// 
Функция НовоеОписаниеПрофиляГруппДоступа() Экспорт
	
	Возврат( Новый Структура("Идентификатор,
	                         |Наименование,
	                         |Описание,
	                         |Роли,
	                         |ВидыДоступа,
	                         |ЗначенияДоступа",
	                         "",
	                         "",
	                         "",
	                         Новый Массив,
	                         Новый СписокЗначений,
	                         Новый СписокЗначений) );
	
КонецФункции

// Функция ТаблицаНаборыЗначенийДоступа возвращает пустую таблицу,
// которая заполняется для передачи в функцию ЕстьРоль() и в процедуры
// ЗаполнитьНаборыЗначенийДоступа(Таблица), определенные прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
Функция ТаблицаНаборыЗначенийДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерНабора",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ВидДоступа",      Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	Таблица.Колонки.Добавить("ЗначениеДоступа", Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип);
	Таблица.Колонки.Добавить("Чтение",          Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Добавление",      Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Изменение",       Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Удаление",        Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа объекта,
// используя процедуру ЗаполнитьНаборыЗначенийДоступа(Таблица),
// созданную прикладным разработчиком в модуле объекта,
// тип которого задан в одной из подписок на событие
// ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 Если передана ссылка, то по ней будет получен объект.
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 Неопределено, тогда будет создана таблица значений
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), содержащая поля:
//                     НомерНабора     - Число                                     (необязательно, если набор один),
//                     ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//                     ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//                     Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//  СсылкаНаПодчиненныйОбъект - ЛюбаяСсылка, используется, когда нужно заполнить наборы значений доступа объекта-владельца
//                 для подчиненного объекта.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Знач Объект, Таблица, Знач СсылкаНаПодчиненныйОбъект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передана ссылка, тогда получить объект.
	// Объект не изменяется, а используется для вызова метода ЗаполнитьНаборыЗначенийДоступа()
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) И
	     НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры!
				           |Тип объекта ""%1""
				           |не найден ни в одной из подписок на события
				           |""Записать наборы значений доступа"",
				           |""Записать зависимые наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Таблица = ?(Таблица = Неопределено, ТаблицаНаборыЗначенийДоступа(), Таблица);
	Объект.ЗаполнитьНаборыЗначенийДоступа(Таблица);
	
	Если Таблица.Количество() = 0 Тогда
		// Если это условие отключить, тогда зациклится регламентное задание
		// заполнения данных для ограничения доступа.
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект ""%1"" сформировал пустой набор значений доступа!'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если СсылкаНаПодчиненныйОбъект <> Неопределено Тогда
		// Добавление наборов проверки прав Чтения, Изменения "ведущего" объекта-владельца,
		// при формировании зависимых наборов значений в процедурах,
		// подготовленных прикладным разработчиком.
		//
		// Действие не требуется при заполнении конечного набора (даже включающего зависимые наборы),
		// т.к. в стандартных шаблонах проверка прав встроена в логику работы вида доступа "Объект".
		
		// Добавление пустого набора, чтобы установить все флажки прав и упорядочить строки наборов.
		ДобавитьНаборыЗначенийДоступа(Таблица, ТаблицаНаборыЗначенийДоступа());
		
		Если НЕ Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип.СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В измерении ""ЗначениеДоступа"" регистра сведений ""Наборы значений доступа""
				           |не задан тип ""%1"" для значения ""%2""'"),
				Строка(ТипЗнч(СсылкаНаОбъект)),
				Строка(СсылкаНаОбъект) ));
		КонецЕсли;
		
		// Подготовка наборов объекта по отдельным правам.
		НаборыЧтения     = ТаблицаНаборыЗначенийДоступа();
		НаборыДобавления = ТаблицаНаборыЗначенийДоступа();
		НаборыИзменения  = ТаблицаНаборыЗначенийДоступа();
		Для каждого Строка Из Таблица Цикл
			Если Строка.Чтение Тогда
				НоваяСтрока = НаборыЧтения.Добавить();
				НоваяСтрока.НомерНабора     = Строка.НомерНабора + 1;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
			Если Строка.Добавление Тогда
				НоваяСтрока = НаборыДобавления.Добавить();
				НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*2;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
			Если Строка.Изменение Тогда
				НоваяСтрока = НаборыИзменения.Добавить();
				НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*3;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗависимостиПравДоступа.ПриПроверкеПраваЧтение,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваДобавление,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваИзменение,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваУдаление,
		|	ЗависимостиПравДоступа.ОтключитьПроверкуПравВедущейТаблицы
		|ИЗ
		|	РегистрСведений.ЗависимостиПравДоступа КАК ЗависимостиПравДоступа
		|ГДЕ
		|	ЗависимостиПравДоступа.ПодчиненнаяТаблица = &ПодчиненнаяТаблица
		|	И ЗависимостиПравДоступа.ТипВедущейТаблицы = &ТипВедущейТаблицы");
		Запрос.УстановитьПараметр("ПодчиненнаяТаблица", СсылкаНаПодчиненныйОбъект.Метаданные().ПолноеИмя());
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СсылкаНаОбъект));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		Запрос.УстановитьПараметр("ТипВедущейТаблицы", ОписаниеТипов.ПривестиЗначение(Неопределено));
		ЗависимостиПрав = Запрос.Выполнить().Выгрузить();
		
		Таблица.Очистить();
		
		Если ЗависимостиПрав.Количество() = 0 Тогда
			
			// Добавление наборов по стандартному правилу.
			
			// Проверка права Чтения "ведущего" объекта-владельца наборов
			// при проверке права Чтения "подчиненного" объекта.
			Строка = Таблица.Добавить();
			Строка.НомерНабора     = 1;
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
			Строка.ЗначениеДоступа = СсылкаНаОбъект;
			Строка.Чтение          = Истина;
			
			// Проверка права Изменения "ведущего" объекта-владельца наборов
			// при проверке прав Добавления, Изменения, Удаления "подчиненного" объекта.
			Строка = Таблица.Добавить();
			Строка.НомерНабора     = 2;
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения;
			Строка.ЗначениеДоступа = СсылкаНаОбъект;
			Строка.Добавление      = Истина;
			Строка.Изменение       = Истина;
			Строка.Удаление        = Истина;
			
			// Пометка прав, требующих проверки наборов ограничения права чтения "ведущего" объекта-владельца.
			НаборыЧтения.ЗаполнитьЗначения(Истина, "Чтение");
			// Пометка прав, требующих проверки наборов ограничения права изменения "ведущего" объекта-владельца.
			НаборыИзменения.ЗаполнитьЗначения(Истина, "Добавление, Изменение, Удаление");
			
			ДобавитьНаборыЗначенийДоступа(НаборыЧтения, НаборыИзменения);
			ДобавитьНаборыЗначенийДоступа(Таблица, НаборыЧтения, Истина);
		Иначе
			// Проверка права Чтения "ведущего" объекта-владельца наборов
			// при проверке прав "подчиненного" объекта.
			
			ЗависимостиПрав = ЗависимостиПрав[0];
			НаборыПравДляУмножения        = Таблица.Скопировать();
			НаборыОграниченийДляУмножения = Таблица.Скопировать();
			
			ДобавитьНаборыДляПрава("Чтение",     ЗависимостиПрав, Таблица, НаборыПравДляУмножения, НаборыОграниченийДляУмножения, НаборыЧтения, НаборыДобавления, НаборыИзменения, СсылкаНаОбъект);
			ДобавитьНаборыДляПрава("Добавление", ЗависимостиПрав, Таблица, НаборыПравДляУмножения, НаборыОграниченийДляУмножения, НаборыЧтения, НаборыДобавления, НаборыИзменения, СсылкаНаОбъект);
			ДобавитьНаборыДляПрава("Изменение",  ЗависимостиПрав, Таблица, НаборыПравДляУмножения, НаборыОграниченийДляУмножения, НаборыЧтения, НаборыДобавления, НаборыИзменения, СсылкаНаОбъект);
			ДобавитьНаборыДляПрава("Удаление",   ЗависимостиПрав, Таблица, НаборыПравДляУмножения, НаборыОграниченийДляУмножения, НаборыЧтения, НаборыДобавления, НаборыИзменения, СсылкаНаОбъект);
			
			Если НаборыПравДляУмножения.Количество() > 0 Тогда
				ДобавитьНаборыЗначенийДоступа(НаборыПравДляУмножения, НаборыОграниченийДляУмножения, Истина);
				Если НаборыПравДляУмножения.Количество() > 0 Тогда
					ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПравДляУмножения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ДобавитьНаборыЗначенийДоступа позволяет добавить к одной таблице наборов
// значений доступа другую таблицу, либо логическим сложением, либо логическим умножением.
// Результат помещается в приемник.
//
// Параметры:
//  Приемник,
//  Источник     - ТабличнаяЧасть или ТаблицаЗначений
//                 с полями, как в таблице, возвращаемой функцией
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(),
//  Умножение    - Булево, определяет способ логического объединения наборов приемника и источника.
//  Упростить    - Булево, определяет требуется ли упрощение наборов после добавления.
//
Процедура ДобавитьНаборыЗначенийДоступа(Приемник, Знач Источник, Знач Умножение = Ложь, Знач Упростить = Ложь) Экспорт
	
	Если Источник.Количество() = 0 И Приемник.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли Умножение И ( Источник.Количество() = 0 ИЛИ  Приемник.Количество() = 0 ) Тогда
		Приемник.Очистить();
		Источник.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если Приемник.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Приемник", Источник);
		Запрос.УстановитьПараметр("Источник", Приемник);
	Иначе
		Запрос.УстановитьПараметр("Приемник", Приемник);
		Запрос.УстановитьПараметр("Источник", Источник);
	КонецЕсли;
	
	// Подготовка временных таблиц приемника.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приемник.НомерНабора + 1 КАК НомерНабора,
	|	Приемник.ВидДоступа,
	|	Приемник.ЗначениеДоступа,
	|	Приемник.Чтение,
	|	Приемник.Добавление,
	|	Приемник.Изменение,
	|	Приемник.Удаление
	|ПОМЕСТИТЬ Приемник
	|ИЗ
	|	&Приемник КАК Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваБезНормализации.НомерНабора,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Чтение
	|	КОНЕЦ КАК Чтение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Добавление
	|	КОНЕЦ КАК Добавление,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Изменение
	|	КОНЕЦ КАК Изменение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Удаление
	|	КОНЕЦ КАК Удаление,
	|	ПраваБезНормализации.ДлинаНабора
	|ПОМЕСТИТЬ ПраваНаборовПриемника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Приемник.НомерНабора КАК НомерНабора,
	|		МАКСИМУМ(Приемник.Чтение) КАК Чтение,
	|		МАКСИМУМ(Приемник.Добавление) КАК Добавление,
	|		МАКСИМУМ(Приемник.Изменение) КАК Изменение,
	|		МАКСИМУМ(Приемник.Удаление) КАК Удаление,
	|		КОЛИЧЕСТВО(Приемник.НомерНабора) КАК ДлинаНабора
	|	ИЗ
	|		Приемник КАК Приемник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Приемник.НомерНабора) КАК ПраваБезНормализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Приемник.НомерНабора) КАК НомерНабораПриемника
	|ПОМЕСТИТЬ Максимальный
	|ИЗ
	|	Приемник КАК Приемник";
	
	// Подготовка временных таблиц источника.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	Источник.НомерНабора + 1 КАК НомерНабора,
	|	Источник.ВидДоступа,
	|	Источник.ЗначениеДоступа,
	|	Источник.Чтение,
	|	Источник.Добавление,
	|	Источник.Изменение,
	|	Источник.Удаление
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Источник КАК Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваБезНормализации.НомерНабора,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Чтение
	|	КОНЕЦ КАК Чтение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Добавление
	|	КОНЕЦ КАК Добавление,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Изменение
	|	КОНЕЦ КАК Изменение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Удаление
	|	КОНЕЦ КАК Удаление,
	|	ПраваБезНормализации.ДлинаНабора
	|ПОМЕСТИТЬ ПраваНаборовИсточника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.НомерНабора КАК НомерНабора,
	|		МАКСИМУМ(Источник.Чтение) КАК Чтение,
	|		МАКСИМУМ(Источник.Добавление) КАК Добавление,
	|		МАКСИМУМ(Источник.Изменение) КАК Изменение,
	|		МАКСИМУМ(Источник.Удаление) КАК Удаление,
	|		МАКСИМУМ(Источник.НомерНабора) КАК ДлинаНабора
	|	ИЗ
	|		Источник КАК Источник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Источник.НомерНабора) КАК ПраваБезНормализации";
	
	// Выполнение операции логического сложения или логического умножения.
	Если Умножение Тогда
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	(Приемник.НомерНабора - 1) * Максимальный.НомерНабораПриемника + Источник.НомерНабора КАК НомерНабора,
		|	Приемник.НомерНабора КАК НомерНабораПриемника,
		|	Источник.НомерНабора КАК НомерНабораИсточника,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Чтение
		|				И ПраваНаборовИсточника.Чтение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Чтение,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Добавление
		|				И ПраваНаборовИсточника.Добавление
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Добавление,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Изменение
		|				И ПраваНаборовИсточника.Изменение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Изменение,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Удаление
		|				И ПраваНаборовИсточника.Удаление
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удаление,
		|	ПраваНаборовПриемника.ДлинаНабора + ПраваНаборовИсточника.ДлинаНабора КАК ДлинаНабора
		|ПОМЕСТИТЬ ПраваУмноженныхНаборов
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|			ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ПО (ПраваНаборовПриемника.Чтение
		|					И ПраваНаборовИсточника.Чтение
		|				ИЛИ ПраваНаборовПриемника.Добавление
		|					И ПраваНаборовИсточника.Добавление
		|				ИЛИ ПраваНаборовПриемника.Изменение
		|					И ПраваНаборовИсточника.Изменение
		|				ИЛИ ПраваНаборовПриемника.Удаление
		|					И ПраваНаборовИсточника.Удаление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
		Если НЕ Упростить Тогда
			Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
			"ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Приемник.ВидДоступа,
			|	Приемник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемник КАК Приемник
			|		ПО ПраваУмноженныхНаборов.НомерНабораПриемника = Приемник.НомерНабора
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Источник.ВидДоступа,
			|	Источник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
			|		ПО ПраваУмноженныхНаборов.НомерНабораИсточника = Источник.НомерНабора";
		Иначе
			Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
			"ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Приемник.ВидДоступа,
			|	Приемник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление,
			|	ПраваУмноженныхНаборов.ДлинаНабора
			|ПОМЕСТИТЬ ВсеНаборы
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемник КАК Приемник
			|		ПО ПраваУмноженныхНаборов.НомерНабораПриемника = Приемник.НомерНабора
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Источник.ВидДоступа,
			|	Источник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление,
			|	ПраваУмноженныхНаборов.ДлинаНабора
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
			|		ПО ПраваУмноженныхНаборов.НомерНабораИсточника = Источник.НомерНабора";
		КонецЕсли;
	ИначеЕсли НЕ Упростить Тогда
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Приемник.НомерНабора КАК НомерНабора,
		|	Приемник.ВидДоступа,
		|	Приемник.ЗначениеДоступа,
		|	ПраваНаборовПриемника.Чтение,
		|	ПраваНаборовПриемника.Добавление,
		|	ПраваНаборовПриемника.Изменение,
		|	ПраваНаборовПриемника.Удаление
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.НомерНабора + Максимальный.НомерНабораПриемника,
		|	Источник.ВидДоступа,
		|	Источник.ЗначениеДоступа,
		|	ПраваНаборовИсточника.Чтение,
		|	ПраваНаборовИсточника.Добавление,
		|	ПраваНаборовИсточника.Изменение,
		|	ПраваНаборовИсточника.Удаление
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|		ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
	Иначе
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Приемник.НомерНабора КАК НомерНабора,
		|	Приемник.ВидДоступа,
		|	Приемник.ЗначениеДоступа,
		|	ПраваНаборовПриемника.Чтение,
		|	ПраваНаборовПриемника.Добавление,
		|	ПраваНаборовПриемника.Изменение,
		|	ПраваНаборовПриемника.Удаление,
		|	ПраваНаборовПриемника.ДлинаНабора
		|ПОМЕСТИТЬ ВсеНаборы
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.НомерНабора + Максимальный.НомерНабораПриемника,
		|	Источник.ВидДоступа,
		|	Источник.ЗначениеДоступа,
		|	ПраваНаборовИсточника.Чтение,
		|	ПраваНаборовИсточника.Добавление,
		|	ПраваНаборовИсточника.Изменение,
		|	ПраваНаборовИсточника.Удаление,
		|	ПраваНаборовИсточника.ДлинаНабора
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|		ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если НЕ Упростить Тогда
		
		Если ТипЗнч(Приемник) = Тип("ТаблицаЗначений") Тогда
			// Подготовка результата с избавлением от типа NULL в колонках таблицы значений.
			НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			Приемник = НаборЗаписей.Выгрузить(, "НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление");
		Иначе
			Приемник.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Подготовка номеров всех наборов для определения копий наборов по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНаборы.НомерНабора,
	|	ВсеНаборы.Чтение,
	|	ВсеНаборы.Добавление,
	|	ВсеНаборы.Изменение,
	|	ВсеНаборы.Удаление,
	|	ВсеНаборы.ДлинаНабора
	|ПОМЕСТИТЬ ВсеНомераНаборов
	|ИЗ
	|	ВсеНаборы КАК ВсеНаборы";
	
	// Определение копий наборов в пределах прав.
	// "Копии" возникают из-за правил раскрытия скобок в логических выражениях:
	//  Для наборов в пределах права и наборов разных прав:
	//     X  И  X = X,
	//     X ИЛИ X = X, где X - набор строк-аргументов.
	//  Только для наборов в пределах права:
	//     (а И б И в) ИЛИ (а И б) = (а И б), где а,б,в - строки-аргументы наборов.
	// Исходя из этих правил одинаковые строки в наборе и одинаковые наборы можно удалить.
	//
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуЧтение
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Чтение)
	|			И (ВсеНомераНаборов2.Чтение)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Чтение
	|									И ВсеНаборы2.Чтение
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Чтение
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуДобавление
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Добавление)
	|			И (ВсеНомераНаборов2.Добавление)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Добавление
	|									И ВсеНаборы2.Добавление
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Добавление
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуИзменение
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Изменение)
	|			И (ВсеНомераНаборов2.Изменение)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Изменение
	|									И ВсеНаборы2.Изменение
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Изменение
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуУдаление
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Удаление)
	|			И (ВсеНомераНаборов2.Удаление)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Удаление
	|									И ВсеНаборы2.Удаление
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Удаление
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))";
	
	// Выбор номеров наборов копий по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерКопииНабора) КАК НомерКопииНабора,
	|	ИСТИНА КАК Чтение,
	|	ЛОЖЬ КАК Добавление,
	|	ЛОЖЬ КАК Изменение,
	|	ЛОЖЬ КАК Удаление
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравам
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуЧтение.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуЧтение.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуЧтение КАК НомераКопийВсехНаборовПоПравуЧтение
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуЧтение.НомерНабора, НомераКопийВсехНаборовПоПравуЧтение.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуЧтение КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуЧтение
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуДобавление.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуДобавление.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуДобавление КАК НомераКопийВсехНаборовПоПравуДобавление
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуДобавление.НомерНабора, НомераКопийВсехНаборовПоПравуДобавление.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуДобавление КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуДобавление
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуИзменение.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуИзменение.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуИзменение КАК НомераКопийВсехНаборовПоПравуИзменение
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуИзменение.НомерНабора, НомераКопийВсехНаборовПоПравуИзменение.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуИзменение КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуИзменение
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуУдаление.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуУдаление.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуУдаление КАК НомераКопийВсехНаборовПоПравуУдаление
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуУдаление.НомерНабора, НомераКопийВсехНаборовПоПравуУдаление.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуУдаление КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуУдаление
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерКопииНабора) ЕСТЬ NULL )";
	
	// Подготовка номеров всех наборов для определения копий наборов между правами.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКопийВсехНаборовПоПравам.НомерКопииНабора КАК НомерНабора,
	|	НомераКопийВсехНаборовПоПравам.Чтение,
	|	НомераКопийВсехНаборовПоПравам.Добавление,
	|	НомераКопийВсехНаборовПоПравам.Изменение,
	|	НомераКопийВсехНаборовПоПравам.Удаление
	|ПОМЕСТИТЬ ВсеНомераНаборовПоПравам
	|ИЗ
	|	НомераКопийВсехНаборовПоПравам КАК НомераКопийВсехНаборовПоПравам";
	
	// Определение копий наборов.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	ВсеНомераНаборовПоПравам1.НомерНабора,
	|	МИНИМУМ(ВсеНомераНаборовПоПравам2.НомерНабора) КАК НомерКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборов
	|ИЗ
	|	ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам2
	|		ПО ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборовПоПравам2.НомерНабора
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.НомерНабора = ВсеНомераНаборовПоПравам1.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборовПоПравам1.НомерНабора
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.НомерНабора = ВсеНомераНаборовПоПравам2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеНомераНаборовПоПравам1.НомерНабора";
	
	// Выбор номеров наборов со сжатием по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	НомераКопийВсехНаборов.НомерКопииНабора КАК НомерНабора,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Чтение) КАК Чтение,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Добавление) КАК Добавление,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Изменение) КАК Изменение,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Удаление) КАК Удаление
	|ПОМЕСТИТЬ НомераНаборовСПравами
	|ИЗ
	|	ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераКопийВсехНаборов КАК НомераКопийВсехНаборов
	|		ПО ВсеНомераНаборовПоПравам.НомерНабора = НомераКопийВсехНаборов.НомерНабора
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераКопийВсехНаборов.НомерКопииНабора";
	
	// Выбор наборов и помещение в приемник.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	НомераНаборовСПравами.НомерНабора,
	|	ВсеНаборы.ВидДоступа,
	|	ВсеНаборы.ЗначениеДоступа,
	|	НомераНаборовСПравами.Чтение,
	|	НомераНаборовСПравами.Добавление,
	|	НомераНаборовСПравами.Изменение,
	|	НомераНаборовСПравами.Удаление
	|ИЗ
	|	НомераНаборовСПравами КАК НомераНаборовСПравами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы
	|		ПО НомераНаборовСПравами.НомерНабора = ВсеНаборы.НомерНабора";
	
	Если ТипЗнч(Приемник) = Тип("ТаблицаЗначений") Тогда
		// Подготовка результата с избавлением от типа NULL в колонках таблицы значений.
		НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		Приемник = НаборЗаписей.Выгрузить(, "НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление");
	Иначе
		Приемник.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа обновляет
// поставляемые профили, и при необходимости обновляет группы доступа этих профилей.
//  Создаются не найденные поставляемые профили групп доступа.
// 
// Параметры:
//  ТолькоНеИзмененные - Булево, обновлять только те поставляемые профили групп доступа,
//                 у которых реквизит ПоставляемыйПрофильИзменен = Ложь.
//  ОбновлятьГруппыДоступа - Булево, обновлять группы доступа
//                 обновляемых профилей групп доступа.
//  УдаляемыеВидыДоступаБезНастройки - Булево, обновлять только те группы доступа,
//                 обновляемых профилей групп доступа, у которых настройки видов доступа
//                 остались неизменными, т.е. все значения, кроме указанных запрещены и
//                 список заданных значений пуст.
//
Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа(ТолькоНеИзмененные = Истина, ОбновлятьГруппыДоступа = Истина, УдаляемыеВидыДоступаБезНастройки = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен,
	|	ПрофилиГруппДоступа.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа");
	ТекущиеПрофили = Запрос.Выполнить().Выгрузить();
	
	ОписанияПрофилей = УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	ОбновленныеПрофили       = Новый Массив;
	ОбновленныеГруппыДоступа = Новый Массив;
	
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
	
		Профиль = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор));
		СтрокаТекущегоПрофиля = ТекущиеПрофили.Найти(Профиль, "Ссылка");
		ПрофильОбновлен = Ложь;
		
		Если СтрокаТекущегоПрофиля = Неопределено Тогда
			// Создание нового поставляемого профиля.
			ОбновитьПрофильГруппДоступа(ОписаниеПрофиля);
		ИначеЕсли НЕ СтрокаТекущегоПрофиля.ПоставляемыйПрофильИзменен ИЛИ НЕ ТолькоНеИзмененные Тогда
			// Обновление поставляемого профиля.
			ПрофильОбновлен = ОбновитьПрофильГруппДоступа(ОписаниеПрофиля, Истина);
		КонецЕсли;
		
		Если ОбновлятьГруппыДоступа Тогда
			ПрофильОбновлен = ПрофильОбновлен ИЛИ ОбновитьГруппыДоступаПрофиля(Профиль, УдаляемыеВидыДоступаБезНастройки);
		КонецЕсли;
		
		Если ПрофильОбновлен Тогда
			ОбновленныеПрофили.Добавить(Профиль);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление ролей пользователей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь
	|			И (ГруппыДоступаПользователи.Ссылка.Профиль В (&Профили))
	|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))");
	Запрос.УстановитьПараметр("Профили", ОбновленныеПрофили);
	ПользователиДляОбновления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	ОбновитьРолиПользователей(ПользователиДляОбновления);
	
КонецПроцедуры

// Процедура ОбновитьПереименованныеРоли позволяет
// выполнить обновление имен ролей в профилях групп доступа,
// если они были переименованы в конфигураторе, например,
// при обновлении информационной базы.
//
// Параметры:
//  ПереименованныеРоли - ТаблицаЗначений (СтароеИмяРоли, НовоеИмяРоли)
//                 если НовоеИмяРоли не задано, роль удаляется.
//
Процедура ОбновитьПереименованныеРоли(ПереименованныеРоли) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиГруппДоступаРоли.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль В(&СтарыеИменаРолей)");
	Запрос.УстановитьПараметр("СтарыеИменаРолей", ПереименованныеРоли.ВыгрузитьКолонку("СтароеИмяРоли"));
	ОбновляемыеПрофили = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого ОбновляемыйПрофиль Из ОбновляемыеПрофили Цикл
		ПрофильОбъект = ОбновляемыйПрофиль.ПолучитьОбъект();
		ПрофильОбъект.ОбменДанными.Загрузка = Истина;
		Для каждого ПереименованнаяРоль Из ПереименованныеРоли Цикл
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(ПереименованнаяРоль.СтароеИмяРоли, "Роль");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПереименованнаяРоль.НовоеИмяРоли) Тогда
					НайденнаяСтрока.Роль = ПереименованнаяРоль.НовоеИмяРоли;
				Иначе
					ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПрофильОбъект.Записать();
	КонецЦикла;
	
	Для каждого ОбновляемыйПрофиль Из ОбновляемыеПрофили Цикл
		ПрофильОбъект = ОбновляемыйПрофиль.ПолучитьОбъект();
		ПрофильОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура РучноеОбновлениеЗависимыхНаборовЗначенийДоступа регистрирует или
// отменяет регистрацию объектов, которые должны быть исключены из
// обновления зависимых наборов значений доступа в событии
// ПриИзмененииНаборовЗначенийДоступа
//  Как правило, процедура не потребуется, т.к. обновление наборов значений доступа не происходит
// если они действительно не изменены, а это можно использовать при проектировании зависимостей
//  Процедура может быть использована для предотвращения зацикливания в сложно зависимых
// наборах значений доступа
//  В основном имеет смысл только для объектов, использующих табличную часть НаборыЗначенийДоступа
// с шаблоном #ПоНаборамЗначений
//  Регистрация необходима, например в таких случаях, когда наборы значений доступа
// задачи зависят от бизнес-процесса и сохраняются в табличной части задачи
// НаборыЗначенийДоступа. При этом запись задачи завершающей бизнес-процесс
// вызывает запись бизнес-процесса, который в свою очередь пытается обновить
// наборы значений доступа задачи и, как следствие, пытается её перезаписать
// в транзакции ПриЗаписи самой задачи. Это может привести к ошибке, т.к. задачу
// заблокированную в форме нельзя повторно заблокировать.
//  Чтобы исключить эту ситуацию (или подобные) необходимо (пример):
//  1) ПередЗаписьюНаСервере в форме задачи
//     зарегистрировать ссылку на задачу для ручного обновления зависимых наборов,
//  2) ПослеЗаписиНаСервере в форме задачи
//     - отменить регистрацию ссылки на задачу для ручного обновления зависимых наборов
//     - вызвать процедуру УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(<Ссылка на задачу>)
//     - выполнить метод Прочитать() формы задачи, чтобы получить обновленную версию объекта
//  Если задача выполняется программно, то нужно (пример):
//  1) перед вызовом метода выполнить задачу
//     зарегистрировать ссылку на задачу для ручного обновления зависимых наборов
//  2) после вызова метода выполнить задачу
//     - отменить регистрацию ссылки на задачу для ручного обновления зависимых наборов
//     - вызвать процедуру УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(<Ссылка на задачу>)
//
// Параметры:
//  Ссылка       - СправочникСсылка.*, ДокументСсылка.*, ... 
//  Зарегистрировать - Булево - если Истина объект будет зарегистрирован, если Ложь, регистрация будет отменена
//
Процедура РучноеОбновлениеЗависимыхНаборовЗначенийДоступа(Ссылка, Зарегистрировать) Экспорт
	
	ХранилищеЗначения = ХранилищеОбщихНастроек.Загрузить("ОбъектыРучногоОбновленияЗависимыхНаборовЗначенийДоступа");
	ОбъектыРучногоОбновления = ?(ТипЗнч(ХранилищеЗначения) = Тип("ХранилищеЗначения"), ХранилищеЗначения.Получить(), Неопределено);
	
	Если ОбъектыРучногоОбновления = Неопределено Тогда
		ОбъектыРучногоОбновления = Новый ТаблицаЗначений;
		ОбъектыРучногоОбновления.Колонки.Добавить("КлючСеанса");
		ОбъектыРучногоОбновления.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	КлючСеанса = УправлениеДоступомСерверПовтИсп.КлючСеанса();
	
	Индекс = ОбъектыРучногоОбновления.Количество()-1;
	РегистрацияНеНайдена = Истина;
	
	Пока Индекс >= 0 Цикл
		Если ОбъектыРучногоОбновления[Индекс].КлючСеанса <> КлючСеанса Тогда
			ОбъектыРучногоОбновления.Удалить(Индекс);
			//
		ИначеЕсли ОбъектыРучногоОбновления[Индекс].Ссылка = Ссылка Тогда
			//
			Если Зарегистрировать Тогда
				РегистрацияНеНайдена = Ложь;
			Иначе
				ОбъектыРучногоОбновления.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если Зарегистрировать И РегистрацияНеНайдена Тогда
		Строка = ОбъектыРучногоОбновления.Добавить();
		Строка.КлючСеанса   = КлючСеанса;
		Строка.Ссылка       = Ссылка;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("ОбъектыРучногоОбновленияЗависимыхНаборовЗначенийДоступа", , Новый ХранилищеЗначения(ОбъектыРучногоОбновления));
	
КонецПроцедуры

// Функция проверяет предусмотрена ли для объекта метаданных
// процедура заполнения наборов значений доступа
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка
//
// Возвращаемое значение:
//  Булево.
//
Функция ВозможноЗаполнитьНаборыЗначенийДоступа(Ссылка) Экспорт
	
	ТипОбъекта = Тип(ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка) + "Объект." + Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Имя);
	
	НаборыЗаполняются = Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипОбъекта)
	                ИЛИ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипОбъекта);
	
	Возврат НаборыЗаполняются;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ общего назначения.

// Функция СвойстваВидаДоступа возвращает свойства вида доступа, используя функцию
// УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
//
// Параметры:
//  ВидДоступа   - ПланВидовХарактеристикСсылка.ВидыДоступа, Неопределено.
//
// Возвращаемое значение:
//  Неопределено - когда для вида доступа свойств не найдено,
//  ТаблицаЗначений или СтрокаТаблицыЗначений с полями:
//                 описание которых см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
//
// 
Функция СвойстваВидаДоступа(Знач ВидДоступа = Неопределено) Экспорт
	
	СвойстваВидовДоступа = УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().Скопировать();
	
	Если ВидДоступа = Неопределено Тогда
	
		Возврат СвойстваВидовДоступа;
	Иначе
		Возврат СвойстваВидовДоступа.Найти(ВидДоступа, "ВидДоступа");
	КонецЕсли;
	
КонецФункции

// Функция ВидыДоступаТаблицы возвращает массив видов доступа
// для таблицы с указанным именем.
//
// Параметры:
//  Таблица   - Строка, как в фукнции ПолноеИмя() объекта метаданных.
//
// Возвращаемое значение:
//  Массив       - элементы типа ПланВидовХарактеристикСсылка.ВидыДоступа.
//
Функция ВидыДоступаТаблицы(Знач Таблица) Экспорт
	
	ВидыДоступа = Новый Массив;
	
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа() Цикл
	
		Если СвойстваВидаДоступа.Таблицы.Найти(Таблица) <> Неопределено Тогда
		
			ВидыДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДоступа;
	
КонецФункции

// Функция ВозможныеПраваПоЗначениюДоступа возвращает описание возможных прав
// по значению доступа имя таблицы которого, передается в качестве параметра.
//  Подробнее о возможных правах см. в комментарии к функции
// УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//
// Параметры:
//  Таблица      - Строка, Неопределено - полное имя таблицы значений доступа,
//                 для которых нужно получить описание возможных прав,
//                 когда Неопределено, возвращается таблица всех описаний,
//                 заданных прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с полями,
//                 описание которых см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//                 Если задан параметр Таблица, возвращаются только её описания.
//
Функция ВозможныеПраваПоЗначениюДоступа(Таблица = Неопределено) Экспорт
	
	ВозможныеПрава = УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа();
	
	Если Таблица = Неопределено Тогда
		Строки = Неопределено;
	Иначе
		Строки = ВозможныеПрава.НайтиСтроки(Новый Структура("ВладелецПрав", Таблица));
	КонецЕсли;
	
	Возврат ВозможныеПрава.Скопировать(Строки);
	
КонецФункции

// Процедура ОбновитьРолиПользователей обновляет список ролей пользователей
// информационной базы по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  Пользователи - Массив элементов СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
//  ЕстьОшибки - Булево. Возвращает истина, когда были ошибки, записанные в журнал регистрации.
//
Процедура ОбновитьРолиПользователей(Знач Пользователи, ЕстьОшибки = Ложь) Экспорт
	
	Если НЕ ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		// Роли устанавливаются механизмами подсистем Пользователи и ВнешниеПользователи.
		Возврат;
	КонецЕсли;
	
	Если Пользователи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ПОМЕСТИТЬ ВсеПользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Пользователи)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.Ссылка В(&Пользователи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА (НЕ Пользователи.Ссылка ЕСТЬ NULL )
	|			ТОГДА Пользователи.ИдентификаторПользователяИБ
	|		КОГДА (НЕ ВнешниеПользователи.Ссылка ЕСТЬ NULL )
	|			ТОГДА ВнешниеПользователи.ИдентификаторПользователяИБ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	ВсеПользователи КАК ВсеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ВсеПользователи.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ПО (ВнешниеПользователи.Ссылка = ВсеПользователи.Пользователь)");
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	ОбновляемыеПользователи = Запрос.Выполнить().Выгрузить();
	
	// Подготовка таблицы старых ролей пользователей.
	СтарыеРолиПользователей = Новый ТаблицаЗначений;
	СтарыеРолиПользователей.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи"));
	СтарыеРолиПользователей.Колонки.Добавить("Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	
	ТекущийНомер = ОбновляемыеПользователи.Количество() - 1;
	Пока ТекущийНомер >= 0 Цикл
		// Проверка необходимости обработки пользователя.
		ИдентификаторПользователяИБ = ОбновляемыеПользователи[ТекущийНомер].ИдентификаторПользователяИБ;
		Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		Если ПользовательИБ = Неопределено ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда
			ОбновляемыеПользователи.Удалить(ОбновляемыеПользователи[ТекущийНомер]);
		Иначе
			Для каждого Роль Из ПользовательИБ.Роли Цикл
				СтараяРольПользователя = СтарыеРолиПользователей.Добавить();
				СтараяРольПользователя.Пользователь = ОбновляемыеПользователи[ТекущийНомер].Пользователь;
				СтараяРольПользователя.Роль = Роль.Имя;
			КонецЦикла;
		КонецЕсли;
		ТекущийНомер = ТекущийНомер - 1;
	КонецЦикла;
	
	// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь,
	|	СтарыеРолиПользователей.Роль
	|ПОМЕСТИТЬ СтарыеРолиПользователей
	|ИЗ
	|	&СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДоступныеРоли.Имя КАК Имя
	|ПОМЕСТИТЬ ВсеДоступныеРоли
	|ИЗ
	|	&ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ПОМЕСТИТЬ Администраторы
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|	И ГруппыДоступаПользователи.Пользователь В(&ОбновляемыеПользователи)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|ГДЕ
	|	СтарыеРолиПользователей.Роль = ""ПолныеПрава""
	|	И (НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|				ГДЕ
	|					ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|					И ГруппыДоступаПользователи.Пользователь В (&ОбновляемыеПользователи)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ПОМЕСТИТЬ СнятыеАдминистраторы
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|ГДЕ
	|	СтарыеРолиПользователей.Роль = ""ПолныеПрава""
	|	И (НЕ СтарыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					Администраторы.Пользователь
	|				ИЗ
	|					Администраторы КАК Администраторы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь,
	|	Роли.Ссылка КАК Профиль,
	|	Роли.Роль
	|ПОМЕСТИТЬ ВсеНовыеРолиПользователей
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|			ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|				И (ПользователиИГруппыПользователей.ЗначениеДоступа В (&ОбновляемыеПользователи))
	|				И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|				И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|				И ((НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления))
	|		ПО Роли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль
	|			И ((НЕ Роли.Ссылка.ПометкаУдаления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНовыеРолиПользователей.Пользователь,
	|	ВсеНовыеРолиПользователей.Роль
	|ПОМЕСТИТЬ НовыеРолиПользователей
	|ИЗ
	|	ВсеНовыеРолиПользователей КАК ВсеНовыеРолиПользователей
	|ГДЕ
	|	ВсеНовыеРолиПользователей.Роль <> ""ПолныеПрава""
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЗначениеИстина
	|			ИЗ
	|				ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|			ГДЕ
	|				ВсеДоступныеРоли.Имя = ВсеНовыеРолиПользователей.Роль)
	|	И (НЕ ВсеНовыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					Администраторы.Пользователь
	|				ИЗ
	|					Администраторы КАК Администраторы))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Администраторы.Пользователь,
	|	""ПолныеПрава""
	|ИЗ
	|	Администраторы КАК Администраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеРолиПользователей.Пользователь
	|ПОМЕСТИТЬ ИзмененныеПользователи
	|ИЗ
	|	СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиПользователей КАК НовыеРолиПользователей
	|		ПО (НовыеРолиПользователей.Пользователь = СтарыеРолиПользователей.Пользователь)
	|			И (НовыеРолиПользователей.Роль = СтарыеРолиПользователей.Роль)
	|ГДЕ
	|	НовыеРолиПользователей.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НовыеРолиПользователей.Пользователь
	|ИЗ
	|	НовыеРолиПользователей КАК НовыеРолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиПользователей КАК СтарыеРолиПользователей
	|		ПО НовыеРолиПользователей.Пользователь = СтарыеРолиПользователей.Пользователь
	|			И НовыеРолиПользователей.Роль = СтарыеРолиПользователей.Роль
	|ГДЕ
	|	СтарыеРолиПользователей.Роль ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СнятыеАдминистраторы.Пользователь
	|ИЗ
	|	СнятыеАдминистраторы КАК СнятыеАдминистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНовыеРолиПользователей.Пользователь,
	|	ВсеНовыеРолиПользователей.Профиль,
	|	ВсеНовыеРолиПользователей.Роль
	|ИЗ
	|	ВсеНовыеРолиПользователей КАК ВсеНовыеРолиПользователей
	|ГДЕ
	|	(НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					ВсеДоступныеРоли КАК ВсеДоступныеРоли
	|				ГДЕ
	|					ВсеДоступныеРоли.Имя = ВсеНовыеРолиПользователей.Роль))";
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВсеДоступныеРоли", ПользователиСерверПовтИсп.ВсеРоли());
	Запрос.УстановитьПараметр("ОбновляемыеПользователи", ОбновляемыеПользователи);
	Запрос.УстановитьПараметр("СтарыеРолиПользователей", СтарыеРолиПользователей);
	
	// Регистрация ошибок имен ролей в профилях групп доступа.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Роль не найдена в метаданных'"),
		                         УровеньЖурналаРегистрации.Ошибка,
		                         ,
		                         ,
		                         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                              НСтр("ru= 'При обновлении ролей пользователя ""<%1>"" роль ""<%2>"" профиля групп доступа ""<%3>"" не найдена в метаданных!'"),
		                              СокрЛП(Выборка.Пользователь.Наименование),
		                              Выборка.Роль,
		                              Выборка.Профиль),
		                         РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	// Обновление ролей пользователейИБ.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль
	|ПОМЕСТИТЬ ИзмененныеПользователиИРоли
	|ИЗ
	|	(ВЫБРАТЬ
	|		НовыеРолиПользователей.Пользователь КАК Пользователь,
	|		НовыеРолиПользователей.Роль КАК Роль
	|	ИЗ
	|		НовыеРолиПользователей КАК НовыеРолиПользователей
	|	ГДЕ
	|		НовыеРолиПользователей.Пользователь В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Пользователи.Ссылка,
	|		""""
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.Ссылка В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.Ссылка,
	|		""""
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|	ГДЕ
	|		ВнешниеПользователи.Ссылка В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователи.Пользователь
	|				ИЗ
	|					ИзмененныеПользователи КАК ИзмененныеПользователи)) КАК ИзмененныеПользователиИРоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль
	|ИЗ
	|	ИзмененныеПользователиИРоли КАК ИзмененныеПользователиИРоли
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА (ИзмененныеПользователиИРоли.Пользователь, ""ПолныеПрава"") В
	|				(ВЫБРАТЬ
	|					ИзмененныеПользователиИРоли.Пользователь,
	|					ИзмененныеПользователиИРоли.Роль
	|				ИЗ
	|					ИзмененныеПользователиИРоли КАК ИзмененныеПользователиИРоли)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИзмененныеПользователиИРоли.Пользователь,
	|	ИзмененныеПользователиИРоли.Роль";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПользовательИБ = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Роль) Тогда
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбновляемыеПользователи.Найти(Выборка.Пользователь, "Пользователь").ИдентификаторПользователяИБ);
			ПользовательИБ.Роли.Очистить();
		Иначе
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
		КонецЕсли;
	КонецЦикла;
	Если ПользовательИБ <> Неопределено Тогда
		ПользовательИБ.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура УстановитьПараметрыСеансаОграниченияДоступа устанавливает
// параметры сеанса по текущим настройкам констант и групп доступа пользователей.
//  Вызывается ПриНачалеРаботыСистемы
//
Процедура УстановитьПараметрыСеансаОграниченияДоступа(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (Лев(ИмяПараметра, СтрДлина("ОграничиватьДоступПоВиду")) = "ОграничиватьДоступПоВиду" ИЛИ
	         Лев(ИмяПараметра, СтрДлина("ВидыДоступа"))              = "ВидыДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() Тогда
		// Для корректной работы препроцессора в ограничениях доступа, требуется инициализации всех
		// параметров сеанса, которые могут быть востребованы в работе препроцессора.
		Если ИмяПараметра = "ВидыДоступаЕдинственныеДляТипаЗначенияДоступа" ИЛИ
		     ИмяПараметра = "ВидыДоступаБезГруппЗначенияДоступа" Тогда
			ПараметрыСеанса[ИмяПараметра] = Новый ФиксированныйМассив(Новый Массив);
		Иначе
			ПараметрыСеанса[ИмяПараметра] = "";
		КонецЕсли;
		УстановленныеПараметры.Добавить(ИмяПараметра);
		Возврат;
	КонецЕсли;
	
	// Следующие виды доступа не самостоятельные,
	// поэтому не учитываются при расчете необходимости ограничения в целом.
	// В стандартных шаблонах проверка по этим видам доступа всегда выполняется,
	// а в препроцессоре проверка использования не выполнятся.
	ПараметрыСеанса.ОграничиватьДоступПоВидуУсловие = "";
	ПараметрыСеанса.ОграничиватьДоступПоВидуОбъект  = "";
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВидуУсловие");
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВидуОбъект");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДоступаПрофилейГруппДоступа.ВидДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофилейГруппДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|				ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|					И (ПользователиИГруппыПользователей.ЗначениеДоступа = &ТекущийПользователь)
	|					И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|					И (ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь)
	|			ПО ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка
	|				И ((НЕ ГруппыДоступа.ПометкаУдаления))
	|		ПО (ГруппыДоступа.Профиль = ВидыДоступаПрофилейГруппДоступа.Ссылка)
	|			И ((НЕ ВидыДоступаПрофилейГруппДоступа.Ссылка.ПометкаУдаления))");
	Запрос.УстановитьПараметр("ТекущийПользователь", ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь),
	                                                   ПараметрыСеанса.ТекущийПользователь,
	                                                   ПараметрыСеанса.ТекущийВнешнийПользователь));
	ОграничиваемыеВидыДоступа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДоступа");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка КАК ВидДоступа
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КаждыйВидЕдинственный = Истина;
	КаждыйВидБезГрупп     = Истина;
	
	ВидыДоступаБезОграничения                     = Новый Массив;
	ВидыДоступаЕдинственныеДляТипаЗначенияДоступа = Новый Массив;
	ВидыДоступаБезГруппЗначенияДоступа            = Новый Массив;
	ВидыДоступаЧерезПраваПоЗначениямДоступа       = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваВидаДоступа = СвойстваВидаДоступа(Выборка.ВидДоступа);
		
		Если  СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда Тогда
			// Такие виды доступа не самостоятельные, поэтому не учитываются при расчете
			// необходимости ограничения в целом.
			// В стандартных шаблонах проверка по этим видам доступа всегда выполняется,
			// а в препроцессоре проверка использования не выполнятся.
			ОписаниеВидаДоступа = "";
			
		ИначеЕсли НЕ СвойстваВидаДоступа.ВидДоступаИспользуется Тогда
			ОписаниеВидаДоступа = "";
			ВидыДоступаБезОграничения.Добавить(Выборка.ВидДоступа);
			
		ИначеЕсли ОграничиваемыеВидыДоступа.Найти(Выборка.ВидДоступа) = Неопределено Тогда
			ОписаниеВидаДоступа = "";
			ВидыДоступаБезОграничения.Добавить(Выборка.ВидДоступа);
			
		ИначеЕсли СвойстваВидаДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			ОписаниеВидаДоступа = "ЧерезПраваПоЗначениямДоступа";
			ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(Выборка.ВидДоступа);
		Иначе
			Если СвойстваВидаДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа Тогда
				ОписаниеВидаДоступа   = "ЕдинственныйВид,  ";
				ВидыДоступаЕдинственныеДляТипаЗначенияДоступа.Добавить(Выборка.ВидДоступа);
			Иначе
				ОписаниеВидаДоступа   = "ОдинИзМногихВидов,";
				КаждыйВидЕдинственный = Ложь;
			КонецЕсли;
			Если СвойстваВидаДоступа.ВидДоступаБезГруппЗначенияДоступа Тогда
				ОписаниеГрупп = "БезГрупп";
				ВидыДоступаБезГруппЗначенияДоступа.Добавить(Выборка.ВидДоступа);
			Иначе
				ОписаниеГрупп = ?(СвойстваВидаДоступа.ВидДоступаСОднойГруппойЗначенияДоступа, "ОднаГруппа", "МножествоГрупп");
				КаждыйВидБезГрупп = Ложь;
			КонецЕсли;
			ОписаниеВидаДоступа = ОписаниеВидаДоступа + ОписаниеГрупп;
		КонецЕсли;
		ИмяВидаДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(Выборка.ВидДоступа);
		ПараметрыСеанса["ОграничиватьДоступПоВиду" + ИмяВидаДоступа] = ОписаниеВидаДоступа;
		УстановленныеПараметры.Добавить("ОграничиватьДоступПоВиду" + ИмяВидаДоступа);
	КонецЦикла;
	
	ПараметрыСеанса.ВидыДоступаБезОграничения = Новый ФиксированныйМассив(ВидыДоступаБезОграничения);
	УстановленныеПараметры.Добавить("ВидыДоступаБезОграничения");
	
	ПараметрыСеанса.ВидыДоступаЕдинственныеДляТипаЗначенияДоступа = Новый ФиксированныйМассив(ВидыДоступаЕдинственныеДляТипаЗначенияДоступа);
	УстановленныеПараметры.Добавить("ВидыДоступаЕдинственныеДляТипаЗначенияДоступа");
	
	ПараметрыСеанса.ВидыДоступаБезГруппЗначенияДоступа = Новый ФиксированныйМассив(ВидыДоступаБезГруппЗначенияДоступа);
	УстановленныеПараметры.Добавить("ВидыДоступаБезГруппЗначенияДоступа");
	
	ПараметрыСеанса.ВидыДоступаЧерезПраваПоЗначениямДоступа = ?(ВидыДоступаЧерезПраваПоЗначениямДоступа.Количество() = 0,
	                                                            "",
	                                                            Новый ФиксированныйМассив(ВидыДоступаЧерезПраваПоЗначениямДоступа));
	УстановленныеПараметры.Добавить("ВидыДоступаЧерезПраваПоЗначениямДоступа");
	
	Если КаждыйВидЕдинственный И КаждыйВидБезГрупп Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидЕдинственный, КаждыйВидБезГрупп";
	ИначеЕсли КаждыйВидЕдинственный Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидЕдинственный";
	ИначеЕсли КаждыйВидБезГрупп Тогда
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "КаждыйВидБезГрупп";
	Иначе
		ПараметрыСеанса.ОграничиватьДоступПоВиду = "Да";
	КонецЕсли;
	УстановленныеПараметры.Добавить("ОграничиватьДоступПоВиду");
	
КонецПроцедуры // УстановитьПараметрыСеансаОграниченияДоступа()

// Процедура ОбновитьТаблицыГруппДоступа проверяет и, если нужно,
// обновляет состав РегистрСведений.ТаблицыГруппДоступа для одной
// или всех групп доступа пользователей, в которых есть пользователи.
//  Процедура использует таблицу Справочник.ПрофилиГруппДоступ.ТаблицыРолей.
//
// Параметры:
//  ГруппаДоступа - СправочникСсылка.ГруппыДоступа.
//
Процедура ОбновитьТаблицыГруппДоступа(Знач ГруппаДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицыПрофиля.Таблица,
	|	ПользователиГрупп.Пользователь,
	|	ТаблицыПрофиля.Добавление КАК Добавление,
	|	ТаблицыПрофиля.Изменение КАК Изменение,
	|	ТаблицыПрофиля.Удаление КАК Удаление,
	|	ТаблицыПрофиля.ТипТаблицы КАК ТипТаблицы,
	|	ВЫБОР
	|		КОГДА ТаблицыПрофиля.Добавление
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоступаПравоДобавления,
	|	ВЫБОР
	|		КОГДА ТаблицыПрофиля.Изменение
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДоступаПравоИзменения
	|ПОМЕСТИТЬ ТаблицыПользователейГруппы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицыРолей.Таблица КАК Таблица,
	|		МАКСИМУМ(ТаблицыРолей.Добавление) КАК Добавление,
	|		МАКСИМУМ(ТаблицыРолей.Изменение) КАК Изменение,
	|		МАКСИМУМ(ТаблицыРолей.Удаление) КАК Удаление,
	|		МАКСИМУМ(ТаблицыРолей.ТипТаблицы) КАК ТипТаблицы
	|	ИЗ
	|		Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК ТаблицыРолей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|			ПО (ГруппыДоступа.Профиль = ТаблицыРолей.Ссылка)
	|				И (ГруппыДоступа.Ссылка = &ГруппаДоступа)
	|				И ((НЕ ГруппыДоступа.ПометкаУдаления))
	|				И ((НЕ ТаблицыРолей.Ссылка.ПометкаУдаления))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицыРолей.Таблица) КАК ТаблицыПрофиля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ПользователиГрупп
	|		ПО (ПользователиГрупп.Ссылка = &ГруппаДоступа)
	|			И ((НЕ ПользователиГрупп.Ссылка.ПометкаУдаления))
	|			И ((НЕ ПользователиГрупп.Пользователь В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|		ПО (ТаблицыПользователейГруппы.Таблица = ТаблицыГруппДоступа.Таблица)
	|			И (ТаблицыПользователейГруппы.Пользователь = ТаблицыГруппДоступа.Пользователь)
	|			И (ТаблицыПользователейГруппы.Добавление = ТаблицыГруппДоступа.Добавление)
	|			И (ТаблицыПользователейГруппы.Изменение = ТаблицыГруппДоступа.Изменение)
	|			И (ТаблицыПользователейГруппы.Удаление = ТаблицыГруппДоступа.Удаление)
	|			И (ТаблицыПользователейГруппы.ТипТаблицы = ТаблицыГруппДоступа.ТипТаблицы)
	|			И (ТаблицыПользователейГруппы.ВидДоступаПравоДобавления = ТаблицыГруппДоступа.ВидДоступаПравоДобавления)
	|			И (ТаблицыПользователейГруппы.ВидДоступаПравоИзменения = ТаблицыГруппДоступа.ВидДоступаПравоИзменения)
	|ГДЕ
	|	ТаблицыГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|	И ТаблицыПользователейГруппы.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|		ПО ТаблицыПользователейГруппы.Таблица = ТаблицыГруппДоступа.Таблица
	|			И ТаблицыПользователейГруппы.Пользователь = ТаблицыГруппДоступа.Пользователь
	|			И (ТаблицыГруппДоступа.ГруппаДоступа = &ГруппаДоступа)
	|			И ТаблицыПользователейГруппы.Добавление = ТаблицыГруппДоступа.Добавление
	|			И ТаблицыПользователейГруппы.Изменение = ТаблицыГруппДоступа.Изменение
	|			И ТаблицыПользователейГруппы.Удаление = ТаблицыГруппДоступа.Удаление
	|			И ТаблицыПользователейГруппы.ТипТаблицы = ТаблицыГруппДоступа.ТипТаблицы
	|			И ТаблицыПользователейГруппы.ВидДоступаПравоДобавления = ТаблицыГруппДоступа.ВидДоступаПравоДобавления
	|			И ТаблицыПользователейГруппы.ВидДоступаПравоИзменения = ТаблицыГруппДоступа.ВидДоступаПравоИзменения
	|ГДЕ
	|	ТаблицыГруппДоступа.Таблица ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицыПользователейГруппы.Таблица,
		|	ТаблицыПользователейГруппы.Пользователь,
		|	&ГруппаДоступа КАК ГруппаДоступа,
		|	ТаблицыПользователейГруппы.Добавление,
		|	ТаблицыПользователейГруппы.Изменение,
		|	ТаблицыПользователейГруппы.Удаление,
		|	ТаблицыПользователейГруппы.ТипТаблицы,
		|	ТаблицыПользователейГруппы.ВидДоступаПравоДобавления,
		|	ТаблицыПользователейГруппы.ВидДоступаПравоИзменения
		|ИЗ
		|	ТаблицыПользователейГруппы КАК ТаблицыПользователейГруппы";
		НаборЗаписей = РегистрыСведений.ТаблицыГруппДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаписатьЗначенияГруппДоступа перезаписывает в РегистрСведений.ЗначенияГруппДоступа
// ЗначенияДоступа разрешенные/запрещенные для группы доступа.
//  Производится проверка на необходимость записи - если различий нет, запись не выполняется.
//
// Параметры:
//  ГруппаДоступа - СправочникСсылка.ГруппыДоступа.
//
Процедура ЗаписатьЗначенияГруппДоступа(Знач ГруппаДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.УстановитьПараметр("ПрофильГруппыДоступа", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаДоступа, "Профиль"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоступаПрофиля.ВидДоступа КАК ВидДоступа,
	|	ИСТИНА КАК ТолькоВидДоступа,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияГруппы
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофиля
	|ГДЕ
	|	(НЕ ВидыДоступаПрофиля.ДоступРазрешен)
	|	И ВидыДоступаПрофиля.Ссылка = &ПрофильГруппыДоступа
	|	И ВидыДоступаПрофиля.Предустановленный
	|	И (НЕ ВидыДоступаПрофиля.Ссылка.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыДоступа.ВидДоступа,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПредустановленныеВидыДоступа
	|		ПО ВидыДоступа.Ссылка.Профиль = ПредустановленныеВидыДоступа.Ссылка
	|			И ВидыДоступа.ВидДоступа = ПредустановленныеВидыДоступа.ВидДоступа
	|			И ((НЕ ВидыДоступа.Ссылка.ПометкаУдаления))
	|			И ((НЕ ПредустановленныеВидыДоступа.Ссылка.ПометкаУдаления))
	|ГДЕ
	|	(НЕ ВидыДоступа.ДоступРазрешен)
	|	И ВидыДоступа.Ссылка = &ГруппаДоступа
	|	И (НЕ ПредустановленныеВидыДоступа.Предустановленный)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияДоступаПрофиля.ВидДоступа,
	|	ЛОЖЬ,
	|	ЗначенияДоступаПрофиля.ЗначениеДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ВидыДоступаПрофиля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ЗначенияДоступа КАК ЗначенияДоступаПрофиля
	|		ПО (ВидыДоступаПрофиля.Предустановленный)
	|			И ((НЕ ВидыДоступаПрофиля.Ссылка.ПометкаУдаления))
	|			И (ВидыДоступаПрофиля.Ссылка = &ПрофильГруппыДоступа)
	|			И (ЗначенияДоступаПрофиля.Ссылка = &ПрофильГруппыДоступа)
	|			И ВидыДоступаПрофиля.ВидДоступа = ЗначенияДоступаПрофиля.ВидДоступа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияДоступа.ВидДоступа,
	|	ЛОЖЬ,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ВидыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПредустановленныеВидыДоступа
	|		ПО ВидыДоступа.Ссылка.Профиль = ПредустановленныеВидыДоступа.Ссылка
	|			И ВидыДоступа.ВидДоступа = ПредустановленныеВидыДоступа.ВидДоступа
	|			И ((НЕ ПредустановленныеВидыДоступа.Ссылка.ПометкаУдаления))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ЗначенияДоступа
	|		ПО (ВидыДоступа.Ссылка = &ГруппаДоступа)
	|			И (ЗначенияДоступа.Ссылка = &ГруппаДоступа)
	|			И ВидыДоступа.ВидДоступа = ЗначенияДоступа.ВидДоступа
	|			И ((НЕ ПредустановленныеВидыДоступа.Предустановленный))
	|			И ((НЕ ЗначенияДоступа.Ссылка.ПометкаУдаления))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияГруппы КАК ЗначенияГруппы
	|		ПО (ЗначенияГруппы.ВидДоступа = ЗначенияГруппДоступа.ВидДоступа)
	|			И (ЗначенияГруппы.ТолькоВидДоступа = ЗначенияГруппДоступа.ТолькоВидДоступа)
	|			И (ЗначенияГруппы.ЗначениеДоступа = ЗначенияГруппДоступа.ЗначениеДоступа)
	|ГДЕ
	|	ЗначенияГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|	И ЗначенияГруппы.ВидДоступа ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ЗначенияГруппы КАК ЗначенияГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|		ПО (ЗначенияГруппДоступа.ГруппаДоступа = &ГруппаДоступа)
	|			И ЗначенияГруппы.ВидДоступа = ЗначенияГруппДоступа.ВидДоступа
	|			И ЗначенияГруппы.ТолькоВидДоступа = ЗначенияГруппДоступа.ТолькоВидДоступа
	|			И ЗначенияГруппы.ЗначениеДоступа = ЗначенияГруппДоступа.ЗначениеДоступа
	|ГДЕ
	|	ЗначенияГруппДоступа.ВидДоступа ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ГруппаДоступа КАК ГруппаДоступа,
	|	ЗначенияГруппы.ВидДоступа,
	|	ЗначенияГруппы.ТолькоВидДоступа,
	|	ЗначенияГруппы.ЗначениеДоступа
	|ИЗ
	|	ЗначенияГруппы КАК ЗначенияГруппы";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.ЗначенияГруппДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаДоступа.Установить(ГруппаДоступа);
		НаборЗаписей.Загрузить(РезультатыЗапроса[2].Выгрузить());
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция ПоставляемыйПрофильИзменен проверяет изменен ли поставляемый профиль
// по сравнению с описанием из функции
// УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа()
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//
// Возвращаемое значение:
//  Строка.
//
Функция ОписаниеПоставляемогоПрофиля(Профиль) Экспорт
	
	ОписанияПрофилей = УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	Текст = "";
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			Текст = ОписаниеПрофиля.Описание;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Функция РодительПерсональныхГруппДоступа возвращает
// ссылку на группу-родителя персональных групп доступа.
//  Если родитель не найден он будет создан.
//
// Параметры:
//  НеСоздавать  - Булево, если задан Истина, родитель не будет автоматически создан,
//                 а функция вернет Неопределено, если родитель не найден
//
// Возвращаемое значение:
//  СправочникСсылка.ГруппыДоступа
//
Функция РодительПерсональныхГруппДоступа(Знач НеСоздавать = Ложь, НаименованиеГруппыЭлементов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеГруппыЭлементов = НСтр("ru = 'Персональные группы доступа'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеГруппыЭлементов", НаименованиеГруппыЭлементов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Наименование ПОДОБНО &НаименованиеГруппыЭлементов
	|	И ГруппыДоступа.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ГруппаЭлементов = Выборка.Ссылка;
	ИначеЕсли НеСоздавать Тогда
		ГруппаЭлементов = Неопределено;
	Иначе
		ГруппаЭлементовОбъект = Справочники.ГруппыДоступа.СоздатьГруппу();
		ГруппаЭлементовОбъект.Наименование = НаименованиеГруппыЭлементов;
		ГруппаЭлементовОбъект.Записать();
		ГруппаЭлементов = ГруппаЭлементовОбъект.Ссылка;
	КонецЕсли;
	
	Возврат ГруппаЭлементов;
	
КонецФункции

// Функция ПользовательПрофиляЕдинственный проверяет
// наличие только одного заданного пользователя среди
// пользователей групп доступа заданного профиля.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
//
// Возвращаемое значение:
//  Булево
//
Функция ПользовательПрофиляЕдинственный(Профиль, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Профиль",      Профиль);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ГруппыДоступаПользователи.Пользователь = &Пользователь
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоПрочихПользователей
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль = &Профиль";
	
	Возврат Профиль <> Справочники.ПрофилиГруппДоступа.Администратор
	      И Запрос.Выполнить().Выгрузить()[0].КоличествоПрочихПользователей = 0;
	
КонецФункции

// Функция ЗаголовокПодчиненнойФормы параметризирует заголовок подчиненной формы,
// например, НСтр("ru = 'Права доступа: %1 (%2)'" -> "Права доступа: Иванов (Пользователь)"
//
// Параметры:
//  СсылкаНаВладельца - ссылка на объект-владелец.
//
Функция ЗаголовокПодчиненнойФормы(СтрокаЗаголовкаСПараметрами, СсылкаНаВладельца) Экспорт
	
	МетаданныеВладельца   = СсылкаНаВладельца.Метаданные();
	НаименованиеВладельца = Строка(СсылкаНаВладельца);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаЗаголовкаСПараметрами,
					НаименованиеВладельца,
					НазваниеОбъектаИзМетаданных(МетаданныеВладельца) );
	
КонецФункции

// Функция НазваниеОбъектаИзМетаданных получает из объекта
// метаданных название с учетом порядка:
//  - РасширенноеПредставлениеОбъекта, если не задано, тогда
//  - ПредставлениеОбъекта, если не задано, тогда
//  - Синоним, если не задан, тогда
//  - Имя
//
// Параметры:
//  МетаданныеОбъекта - ОбъектМетаданных
//
// Возвращаемое значение:
//  Строка
//
Функция НазваниеОбъектаИзМетаданных(МетаданныеОбъекта) Экспорт
	
	Если ЗначениеЗаполнено(МетаданныеОбъекта.РасширенноеПредставлениеОбъекта) Тогда
		НазваниеОбъекта = МетаданныеОбъекта.РасширенноеПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(МетаданныеОбъекта.ПредставлениеОбъекта) Тогда
		НазваниеОбъекта = МетаданныеОбъекта.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(МетаданныеОбъекта.Синоним) Тогда
		НазваниеОбъекта = МетаданныеОбъекта.Синоним;
	Иначе
		НазваниеОбъекта = МетаданныеОбъекта.Имя;
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

// Процедура ОбновитьРолиПользователейПриИзмененииГруппыДоступа вызывается
// из обработчика ПриЗаписи группы доступа
//  Процедура только для внутреннего использования
//
Процедура ОбновитьРолиПользователейПриИзмененииГруппыДоступа(ГруппаДоступа, СтарыеУчастникиГруппыДоступа, ЕстьОшибки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновление ролей для добавленных, оставшихся и удаленных пользователей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.УстановитьПараметр("СтарыеУчастникиГруппыДоступа", СтарыеУчастникиГруппыДоступа);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|ГДЕ
	|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
	|	И ПользователиИГруппыПользователей.ГруппаДоступа В(&СтарыеУчастникиГруппыДоступа)
	|	И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПользователиИГруппыПользователей.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
	|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
	|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
	|			И ГруппыДоступаПользователи.Пользователь = ПользователиИГруппыПользователей.ГруппаДоступа
	|			И (ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа)
	|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))";
	СтарыеИНовыеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Если ГруппаДоступа = Справочники.ГруппыДоступа.Администраторы Тогда
		// Добавление пользователей, связанных с пользователямиИБ, имеющих роль ПолныеПрава
		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
				Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
					Пользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
				КонецЕсли;
				Если ЗначениеЗаполнено(Пользователь)
				   И СтарыеИНовыеПользователи.Найти(Пользователь) = Неопределено Тогда
					СтарыеИНовыеПользователи.Добавить(Пользователь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьРолиПользователей(СтарыеИНовыеПользователи, ЕстьОшибки);
	
КонецПроцедуры

// Процедура ОбновитьНаборыЗначенийДоступа выполняет обновление
// наборов значений доступа объекта, если они изменились.
//  Наборы обновляются в табличной части (если используется) и
// в регистре сведений НаборыЗначенийДоступа
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка, ...
//
Процедура ОбновитьНаборыЗначенийДоступа(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры!
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи наборов значений доступа:
				           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
				           |не задан тип %1'"),
				Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ПолноеИмя()));
	КонецЕсли;
	
	Если Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
		// Изменение объекта не требуется
		ЗаписатьНаборыЗначенийДоступа(Объект);
	Иначе
		// Изменение объекта требуется
		Таблица = УправлениеДоступомСобытия.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
		Если НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаОбъект, Таблица) Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
			Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает значение константы
// ВключатьРуководителейВГруппыДоступаПодчиненных
//
Функция ВключатьРуководителейВГруппыДоступаПодчиненных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Константы.ВключатьРуководителейВГруппыДоступаПодчиненных КАК Значение
	|ИЗ
	|	Константы КАК Константы");
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Значение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: начальное заполнение.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьПоставляемыеПрофилиИГруппыДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьТаблицыРолейПрофилейГруппДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьЗависимостиПравДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьТаблицыПравПоЗначениямДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.3";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьПодчиненностьПользователей_1_1_2_3";
	
КонецПроцедуры

// Процедура ЕстьНачальноеЗаполнениеПрофиляГруппДоступа определяет наличие начального
// заполнения для профиля групп доступа в переопределяемом модуле.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//  
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьНачальноеЗаполнениеПрофиляГруппДоступа(Знач Профиль) Экспорт
	
	ОписанияПрофилей = УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОписаниеНайдено = Ложь;
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеНайдено;
	
КонецФункции

// Процедура НачальноеЗаполнениеПрофилейГруппДоступа создает элементы
// в справочнике ПрофилиГруппДоступа, свойственные прикладному решению,
// и позволяет восстановить ранее заполненный элемент по его уникальному идентификатору,
// если для него предусмотрено начальное заполнение.
//  Поиск начального заполнения осуществляется по строке уникального идентификатора профиля.
//
// Параметры:
//  Профиль      - Неопределено, СправочникСсылка.ПрофилиГруппДоступа.
//                 Если для указанного профиля описание начального заполнения найдено,
//                 содержимое профиля полностью замещается.
// ОбновитьГруппыДоступа
//               - Булево, если Истина, виды доступа групп доступа профиля будут обновлены.
// НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа
//               - Булево, если Истина, группы доступа не будут
//                 обновлены, если в них есть хотя бы один удаляемый вид доступа,
//                 по которому заданы значения доступа.
//
Процедура НачальноеЗаполнениеПрофилейГруппДоступа(Знач Профиль = Неопределено, ОбновитьГруппыДоступа = Ложь, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа = Истина) Экспорт
	
	ОписанияПрофилей = УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если Профиль = Неопределено ИЛИ ОписаниеПрофиля.Идентификатор = Строка(Профиль.УникальныйИдентификатор()) Тогда
			ОбновитьПрофильГруппДоступа(ОписаниеПрофиля);
			Если ОбновитьГруппыДоступа Тогда
				ОбновитьГруппыДоступаПрофиля(Профиль, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция ОбновитьПрофильГруппДоступа замещает имеющийся или
// создает новый профиль групп доступа по его начальному описанию.
//
// Параметры:
//  ОписаниеПрофиля - Структура (см. функцию НовоеОписаниеПрофиляГруппДоступа()).
// 
// Возвращаемое значение:
//  Булево. Истина - профиль изменен.
//
Функция ОбновитьПрофильГруппДоступа(ОписаниеПрофиля, НеОбновлятьРолиПользователей = Ложь) Экспорт
	
	ПрофильИзменен = Ложь;
	
	УникальныйИдентификаторПрофиля = Новый УникальныйИдентификатор(ОписаниеПрофиля.Идентификатор);
	ПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ПрофильСсылка);
	Если Запрос.Выполнить().Пустой() Тогда
		// Элемента данных нет, нужно создать новый.
		ПрофильОбъект = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
		ПрофильОбъект.УстановитьСсылкуНового(Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля));
		ПрофильИзменен = Истина;
	Иначе
		ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		ПрофильИзменен = УправлениеДоступомСобытия.ПоставляемыйПрофильИзменен(ПрофильОбъект);
	КонецЕсли;
	
	
	Если ПрофильИзменен Тогда
		ЗаблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка, ПрофильОбъект.ВерсияДанных);
		
		ПрофильОбъект.Наименование = ОписаниеПрофиля.Наименование;
		
		ПрофильОбъект.Роли.Очистить();
		Для каждого Роль Из ОписаниеПрофиля.Роли Цикл
			Строка = ПрофильОбъект.Роли.Добавить();
			Строка.Роль = Роль;
		КонецЦикла;
		
		ПрофильОбъект.ВидыДоступа.Очистить();
		Для каждого ОписаниеВидаДоступа Из ОписаниеПрофиля.ВидыДоступа Цикл
			Строка = ПрофильОбъект.ВидыДоступа.Добавить();
			Строка.ВидДоступа        = ПланыВидовХарактеристик.ВидыДоступа[ОписаниеВидаДоступа.Значение];
			Строка.Предустановленный = ОписаниеВидаДоступа.Представление = "Предустановленный";
			Строка.ДоступРазрешен    = ОписаниеВидаДоступа.Представление = "ВначалеВсеРазрешены";
		КонецЦикла;
		
		ПрофильОбъект.ЗначенияДоступа.Очистить();
		Для каждого ОписаниеЗначенияДоступа Из ОписаниеПрофиля.ЗначенияДоступа Цикл
			СтрокаЗначения = ПрофильОбъект.ЗначенияДоступа.Добавить();
			СтрокаЗначения.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа[ОписаниеЗначенияДоступа.Значение];
			Запрос = Новый Запрос(СтрЗаменить("Выбрать Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.Представление));
			СтрокаЗначения.ЗначениеДоступа = Запрос.Выполнить().Выгрузить()[0].Значение;
		КонецЦикла;
		
		Если НеОбновлятьРолиПользователей Тогда
			ПрофильОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
		КонецЕсли;
		ПрофильОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка);
	КонецЕсли;
	
	Возврат ПрофильИзменен;
	
КонецФункции

// Процедура ОбновитьТаблицыРолейПрофилейГруппДоступа обновляет
// ТаблицыРолей каждого ПрофильГруппДоступа.
//
Процедура ОбновитьТаблицыРолейПрофилейГруппДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПраваОМДРолей", УправлениеДоступомСерверПовтИсп.ОграничиваемыеПраваОбъектовМетаданныхРолей());
	Запрос.УстановитьПараметр("ТипыСсылок",    УправлениеДоступомСерверПовтИсп.ТипыСсылок());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПраваОМДРолей.Роль,
	|	ПраваОМДРолей.Таблица,
	|	ПраваОМДРолей.Добавление,
	|	ПраваОМДРолей.Изменение,
	|	ПраваОМДРолей.Удаление,
	|	ПраваОМДРолей.ТипТаблицы
	|ПОМЕСТИТЬ ПраваОМДРолей
	|ИЗ
	|	&ПраваОМДРолей КАК ПраваОМДРолей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыСсылок.Таблица,
	|	ТипыСсылок.ТипТаблицы
	|ПОМЕСТИТЬ НовыеТипыСсылок
	|ИЗ
	|	&ТипыСсылок КАК ТипыСсылок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор) КАК Профиль
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК СтарыеТипыСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеТипыСсылок КАК НовыеТипыСсылок
	|		ПО (НовыеТипыСсылок.Таблица = СтарыеТипыСсылок.Таблица)
	|			И (НовыеТипыСсылок.ТипТаблицы = СтарыеТипыСсылок.ТипТаблицы)
	|ГДЕ
	|	СтарыеТипыСсылок.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|	И НовыеТипыСсылок.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|ИЗ
	|	НовыеТипыСсылок КАК НовыеТипыСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК СтарыеТипыСсылок
	|		ПО (СтарыеТипыСсылок.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))
	|			И НовыеТипыСсылок.Таблица = СтарыеТипыСсылок.Таблица
	|			И НовыеТипыСсылок.ТипТаблицы = СтарыеТипыСсылок.ТипТаблицы
	|ГДЕ
	|	СтарыеТипыСсылок.Таблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТипыСсылок.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
	|ГДЕ
	|	ТипыСсылок.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК ТаблицыРолей
	|ГДЕ
	|	ТаблицыРолей.Ссылка = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтарыеТаблицы.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК СтарыеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РолиПрофиля.Ссылка КАК Профиль,
	|			ПраваОМДРолей.Роль КАК Роль,
	|			ПраваОМДРолей.Таблица КАК Таблица,
	|			ПраваОМДРолей.Добавление КАК Добавление,
	|			ПраваОМДРолей.Изменение КАК Изменение,
	|			ПраваОМДРолей.Удаление КАК Удаление,
	|			ПраваОМДРолей.ТипТаблицы КАК ТипТаблицы
	|		ИЗ
	|			ПраваОМДРолей КАК ПраваОМДРолей
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофиля
	|				ПО ПраваОМДРолей.Роль = РолиПрофиля.Роль) КАК НовыеТаблицы
	|		ПО (НовыеТаблицы.Профиль = СтарыеТаблицы.Ссылка)
	|			И (НовыеТаблицы.Роль = СтарыеТаблицы.Роль)
	|			И (НовыеТаблицы.Таблица = СтарыеТаблицы.Таблица)
	|			И (НовыеТаблицы.Добавление = СтарыеТаблицы.Добавление)
	|			И (НовыеТаблицы.Изменение = СтарыеТаблицы.Изменение)
	|			И (НовыеТаблицы.Удаление = СтарыеТаблицы.Удаление)
	|			И (НовыеТаблицы.ТипТаблицы = СтарыеТаблицы.ТипТаблицы)
	|ГДЕ
	|	НовыеТаблицы.Роль ЕСТЬ NULL 
	|	И СтарыеТаблицы.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НовыеТаблицы.Профиль
	|ИЗ
	|	(ВЫБРАТЬ
	|		РолиПрофиля.Ссылка КАК Профиль,
	|		ПраваОМДРолей.Роль КАК Роль,
	|		ПраваОМДРолей.Таблица КАК Таблица,
	|		ПраваОМДРолей.Добавление КАК Добавление,
	|		ПраваОМДРолей.Изменение КАК Изменение,
	|		ПраваОМДРолей.Удаление КАК Удаление,
	|		ПраваОМДРолей.ТипТаблицы КАК ТипТаблицы
	|	ИЗ
	|		ПраваОМДРолей КАК ПраваОМДРолей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофиля
	|			ПО ПраваОМДРолей.Роль = РолиПрофиля.Роль) КАК НовыеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТаблицыРолей КАК СтарыеТаблицы
	|		ПО НовыеТаблицы.Профиль = СтарыеТаблицы.Ссылка
	|			И НовыеТаблицы.Роль = СтарыеТаблицы.Роль
	|			И НовыеТаблицы.Таблица = СтарыеТаблицы.Таблица
	|			И НовыеТаблицы.Добавление = СтарыеТаблицы.Добавление
	|			И НовыеТаблицы.Изменение = СтарыеТаблицы.Изменение
	|			И НовыеТаблицы.Удаление = СтарыеТаблицы.Удаление
	|			И НовыеТаблицы.ТипТаблицы = СтарыеТаблицы.ТипТаблицы
	|ГДЕ
	|	СтарыеТаблицы.Роль ЕСТЬ NULL 
	|	И НовыеТаблицы.Профиль <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Профиль.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, Объект.ВерсияДанных);
		Объект.ДополнительныеСвойства.Вставить("НеОбновлятьРеквизитПоставляемыйПрофильИзменен");
		Объект.Записать();
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура ОбновитьЗависимостиПравДоступа обновляет
// содержимое регистра сведений ЗависимостиПравДоступа,
// если прикладной разработчик изменил зависимости.
//
Процедура ОбновитьЗависимостиПравДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЗависимостиПравДоступа.СоздатьНаборЗаписей();
	УправлениеДоступомПереопределяемый.ЗаполнитьЗависимостиПравДоступа(НаборЗаписей);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НовыеЗаписи.ПодчиненнаяТаблица,
	|	НовыеЗаписи.ТипВедущейТаблицы,
	|	НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы,
	|	НовыеЗаписи.ПриПроверкеПраваЧтение,
	|	НовыеЗаписи.ПриПроверкеПраваДобавление,
	|	НовыеЗаписи.ПриПроверкеПраваИзменение,
	|	НовыеЗаписи.ПриПроверкеПраваУдаление
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗависимостиПравДоступа КАК СтарыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписи КАК НовыеЗаписи
	|		ПО СтарыеЗаписи.ПодчиненнаяТаблица = НовыеЗаписи.ПодчиненнаяТаблица
	|			И СтарыеЗаписи.ТипВедущейТаблицы = НовыеЗаписи.ТипВедущейТаблицы
	|			И СтарыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы = НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы
	|			И СтарыеЗаписи.ПриПроверкеПраваЧтение = НовыеЗаписи.ПриПроверкеПраваЧтение
	|			И СтарыеЗаписи.ПриПроверкеПраваДобавление = НовыеЗаписи.ПриПроверкеПраваДобавление
	|			И СтарыеЗаписи.ПриПроверкеПраваИзменение = НовыеЗаписи.ПриПроверкеПраваИзменение
	|			И СтарыеЗаписи.ПриПроверкеПраваУдаление = НовыеЗаписи.ПриПроверкеПраваУдаление
	|ГДЕ
	|	НовыеЗаписи.ПодчиненнаяТаблица ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеЗаписи КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗависимостиПравДоступа КАК СтарыеЗаписи
	|		ПО НовыеЗаписи.ПодчиненнаяТаблица = СтарыеЗаписи.ПодчиненнаяТаблица
	|			И НовыеЗаписи.ТипВедущейТаблицы = СтарыеЗаписи.ТипВедущейТаблицы
	|			И НовыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы = СтарыеЗаписи.ОтключитьПроверкуПравВедущейТаблицы
	|			И НовыеЗаписи.ПриПроверкеПраваЧтение = СтарыеЗаписи.ПриПроверкеПраваЧтение
	|			И НовыеЗаписи.ПриПроверкеПраваДобавление = СтарыеЗаписи.ПриПроверкеПраваДобавление
	|			И НовыеЗаписи.ПриПроверкеПраваИзменение = СтарыеЗаписи.ПриПроверкеПраваИзменение
	|			И НовыеЗаписи.ПриПроверкеПраваУдаление = СтарыеЗаписи.ПриПроверкеПраваУдаление
	|ГДЕ
	|	СтарыеЗаписи.ПодчиненнаяТаблица ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("НовыеЗаписи", НаборЗаписей);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура ОбновитьТаблицыВозможныхПравПоЗначениямДоступа выполняет
// обновление таблиц в регистре сведений ПраваПоЗначенияДоступа,
// когда изменена процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа
// модуля УправлениеДоступомПереопределяемый
// 
Процедура ОбновитьТаблицыПравПоЗначениямДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозможныеПрава = УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа();
	
	ТаблицыПрав = Новый ТаблицаЗначений;
	ТаблицыПрав.Колонки.Добавить("ВладелецПрав", Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.ЗначениеДоступа.Тип);
	ТаблицыПрав.Колонки.Добавить("Право",        Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.Право.Тип);
	ТаблицыПрав.Колонки.Добавить("Таблица",      Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.Таблица.Тип);
	ТаблицыПрав.Колонки.Добавить("Чтение",       Новый ОписаниеТипов("Булево"));
	ТаблицыПрав.Колонки.Добавить("Добавление",   Новый ОписаниеТипов("Булево"));
	ТаблицыПрав.Колонки.Добавить("Изменение",    Новый ОписаниеТипов("Булево"));
	ТаблицыПрав.Колонки.Добавить("Удаление",     Новый ОписаниеТипов("Булево"));
	
	Для каждого ОписаниеПрава Из ВозможныеПрава Цикл
		ВладелецПрав = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеПрава.ВладелецПрав).ПустаяСсылка();
		Если ТаблицыПрав.Колонки.ВладелецПрав.ТипЗначения.СодержитТип(ТипЗнч(ВладелецПрав)) Тогда
			Для каждого Таблица Из ОписаниеПрава.ЧтениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Чтение       = Истина;
			КонецЦикла;
			Для каждого Таблица Из ОписаниеПрава.ДобавлениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Добавление   = Истина;
			КонецЦикла;
			Для каждого Таблица Из ОписаниеПрава.ИзменениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Изменение    = Истина;
			КонецЦикла;
			Для каждого Таблица Из ОписаниеПрава.УдалениеВТаблицах Цикл
				НоваяТаблица = ТаблицыПрав.Добавить();
				НоваяТаблица.ВладелецПрав = ВладелецПрав;
				НоваяТаблица.Право        = ОписаниеПрава.Имя;
				НоваяТаблица.Таблица      = Таблица;
				НоваяТаблица.Удаление     = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицыПрав", ТаблицыПрав);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицыПрав.ВладелецПрав,
	|	ТаблицыПрав.Право,
	|	ТаблицыПрав.Таблица,
	|	ТаблицыПрав.Чтение,
	|	ТаблицыПрав.Добавление,
	|	ТаблицыПрав.Изменение,
	|	ТаблицыПрав.Удаление
	|ПОМЕСТИТЬ ТаблицыПрав
	|ИЗ
	|	&ТаблицыПрав КАК ТаблицыПрав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаписи.ЗначениеДоступа,
	|	НовыеЗаписи.Пользователь,
	|	НовыеЗаписи.Право,
	|	НовыеЗаписи.Таблица,
	|	НовыеЗаписи.Запрещено,
	|	НовыеЗаписи.РаспространяетсяВИерархии,
	|	НовыеЗаписи.Чтение,
	|	НовыеЗаписи.ЧтениеЗапрещено,
	|	НовыеЗаписи.Добавление,
	|	НовыеЗаписи.ДобавлениеЗапрещено,
	|	НовыеЗаписи.Изменение,
	|	НовыеЗаписи.ИзменениеЗапрещено,
	|	НовыеЗаписи.Удаление,
	|	НовыеЗаписи.УдалениеЗапрещено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПраваПоЗначениям.ЗначениеДоступа КАК ЗначениеДоступа,
	|		ПраваПоЗначениям.Пользователь КАК Пользователь,
	|		ПраваПоЗначениям.Право КАК Право,
	|		ПраваПоЗначениям.Запрещено КАК Запрещено,
	|		ПраваПоЗначениям.РаспространяетсяВИерархии КАК РаспространяетсяВИерархии,
	|		ЕСТЬNULL(ТаблицыПрав.Таблица, """") КАК Таблица,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|		КОНЕЦ КАК Чтение,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЧтениеЗапрещено,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|		КОНЕЦ КАК Добавление,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ДобавлениеЗапрещено,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|		КОНЕЦ КАК Изменение,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИзменениеЗапрещено,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|		КОНЕЦ КАК Удаление,
	|		ВЫБОР
	|			КОГДА ПраваПоЗначениям.Запрещено
	|				ТОГДА ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК УдалениеЗапрещено
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПраваПоЗначениямДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
	|			ПраваПоЗначениямДоступа.Пользователь КАК Пользователь,
	|			ПраваПоЗначениямДоступа.Право КАК Право,
	|			МАКСИМУМ(ПраваПоЗначениямДоступа.Запрещено) КАК Запрещено,
	|			МАКСИМУМ(ПраваПоЗначениямДоступа.РаспространяетсяВИерархии) КАК РаспространяетсяВИерархии
	|		ИЗ
	|			РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПраваПоЗначениямДоступа.ЗначениеДоступа,
	|			ПраваПоЗначениямДоступа.Пользователь,
	|			ПраваПоЗначениямДоступа.Право) КАК ПраваПоЗначениям
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПрав КАК ТаблицыПрав
	|			ПО (ТИПЗНАЧЕНИЯ(ПраваПоЗначениям.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТаблицыПрав.ВладелецПрав))
	|				И ПраваПоЗначениям.Право = ТаблицыПрав.Право) КАК НовыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоЗначениямДоступа КАК ТекущиеЗаписи
	|		ПО НовыеЗаписи.ЗначениеДоступа = ТекущиеЗаписи.ЗначениеДоступа
	|			И НовыеЗаписи.Пользователь = ТекущиеЗаписи.Пользователь
	|			И НовыеЗаписи.Право = ТекущиеЗаписи.Право
	|			И НовыеЗаписи.Таблица = ТекущиеЗаписи.Таблица
	|			И НовыеЗаписи.Запрещено = ТекущиеЗаписи.Запрещено
	|			И НовыеЗаписи.РаспространяетсяВИерархии = ТекущиеЗаписи.РаспространяетсяВИерархии
	|			И НовыеЗаписи.Чтение = ТекущиеЗаписи.Чтение
	|			И НовыеЗаписи.ЧтениеЗапрещено = ТекущиеЗаписи.ЧтениеЗапрещено
	|			И НовыеЗаписи.Добавление = ТекущиеЗаписи.Добавление
	|			И НовыеЗаписи.ДобавлениеЗапрещено = ТекущиеЗаписи.ДобавлениеЗапрещено
	|			И НовыеЗаписи.Изменение = ТекущиеЗаписи.Изменение
	|			И НовыеЗаписи.ИзменениеЗапрещено = ТекущиеЗаписи.ИзменениеЗапрещено
	|			И НовыеЗаписи.Удаление = ТекущиеЗаписи.Удаление
	|			И НовыеЗаписи.УдалениеЗапрещено = ТекущиеЗаписи.УдалениеЗапрещено
	|ГДЕ
	|	ТекущиеЗаписи.ЗначениеДоступа ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗаписи.ЗначениеДоступа,
	|	НовыеЗаписи.Пользователь,
	|	НовыеЗаписи.Право,
	|	НовыеЗаписи.Таблица
	|ИЗ
	|	РегистрСведений.ПраваПоЗначениямДоступа КАК ТекущиеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПраваПоЗначениям.ЗначениеДоступа КАК ЗначениеДоступа,
	|			ПраваПоЗначениям.Пользователь КАК Пользователь,
	|			ПраваПоЗначениям.Право КАК Право,
	|			ПраваПоЗначениям.Запрещено КАК Запрещено,
	|			ПраваПоЗначениям.РаспространяетсяВИерархии КАК РаспространяетсяВИерархии,
	|			ЕСТЬNULL(ТаблицыПрав.Таблица, """") КАК Таблица,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|			КОНЕЦ КАК Чтение,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Чтение, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ЧтениеЗапрещено,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|			КОНЕЦ КАК Добавление,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Добавление, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ДобавлениеЗапрещено,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|			КОНЕЦ КАК Изменение,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Изменение, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ИзменениеЗапрещено,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|			КОНЕЦ КАК Удаление,
	|			ВЫБОР
	|				КОГДА ПраваПоЗначениям.Запрещено
	|					ТОГДА ЕСТЬNULL(ТаблицыПрав.Удаление, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК УдалениеЗапрещено
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПраваПоЗначениямДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
	|				ПраваПоЗначениямДоступа.Пользователь КАК Пользователь,
	|				ПраваПоЗначениямДоступа.Право КАК Право,
	|				МАКСИМУМ(ПраваПоЗначениямДоступа.Запрещено) КАК Запрещено,
	|				МАКСИМУМ(ПраваПоЗначениямДоступа.РаспространяетсяВИерархии) КАК РаспространяетсяВИерархии
	|			ИЗ
	|				РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПраваПоЗначениямДоступа.ЗначениеДоступа,
	|				ПраваПоЗначениямДоступа.Пользователь,
	|				ПраваПоЗначениямДоступа.Право) КАК ПраваПоЗначениям
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицыПрав КАК ТаблицыПрав
	|				ПО (ТИПЗНАЧЕНИЯ(ПраваПоЗначениям.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТаблицыПрав.ВладелецПрав))
	|					И ПраваПоЗначениям.Право = ТаблицыПрав.Право) КАК НовыеЗаписи
	|		ПО НовыеЗаписи.ЗначениеДоступа = ТекущиеЗаписи.ЗначениеДоступа
	|			И НовыеЗаписи.Пользователь = ТекущиеЗаписи.Пользователь
	|			И НовыеЗаписи.Право = ТекущиеЗаписи.Право
	|			И НовыеЗаписи.Таблица = ТекущиеЗаписи.Таблица
	|			И НовыеЗаписи.Запрещено = ТекущиеЗаписи.Запрещено
	|			И НовыеЗаписи.РаспространяетсяВИерархии = ТекущиеЗаписи.РаспространяетсяВИерархии
	|			И НовыеЗаписи.Чтение = ТекущиеЗаписи.Чтение
	|			И НовыеЗаписи.ЧтениеЗапрещено = ТекущиеЗаписи.ЧтениеЗапрещено
	|			И НовыеЗаписи.Добавление = ТекущиеЗаписи.Добавление
	|			И НовыеЗаписи.ДобавлениеЗапрещено = ТекущиеЗаписи.ДобавлениеЗапрещено
	|			И НовыеЗаписи.Изменение = ТекущиеЗаписи.Изменение
	|			И НовыеЗаписи.ИзменениеЗапрещено = ТекущиеЗаписи.ИзменениеЗапрещено
	|			И НовыеЗаписи.Удаление = ТекущиеЗаписи.Удаление
	|			И НовыеЗаписи.УдалениеЗапрещено = ТекущиеЗаписи.УдалениеЗапрещено
	|ГДЕ
	|	НовыеЗаписи.ЗначениеДоступа ЕСТЬ NULL ";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Для каждого ОписаниеУдаляемойЗаписи ИЗ РезультатыЗапроса[2].Выгрузить() Цикл
		МенеджерЗаписи = РегистрыСведений.ПраваПоЗначениямДоступа.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ОписаниеУдаляемойЗаписи);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ПраваПоЗначениямДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(РезультатыЗапроса[1].Выгрузить());
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриИзмененииОграниченияДоступаНаУровнеЗаписей вызывается из
// обработчика ПриЗаписи констант. При необходимости включает заполнение
// данных для ограничения доступа.
//
Процедура ПриИзмененииОграниченияДоступаНаУровнеЗаписей(ОграничениеДоступаНаУровнеЗаписейВключено, ОграничениеДоступаНаУровнеЗаписейИзменено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОграничениеДоступаНаУровнеЗаписейВключено Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'"), 
			УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато заполнение данных для ограничения доступа'"), 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Дополнительно обновим таблицы прав, т.к. они будут использоваться
		// в процедуре заполнения регистра сведений ТаблицыГруппДоступа.
		ОбновитьТаблицыРолейПрофилейГруппДоступа();
		
		// Обновим РегистрСведений.ТаблицыГруппДоступа,
		// и       РегистрСведений.ЗначенияГруппДоступа.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ГруппыДоступа.Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступа КАК ГруппыДоступа
			|ГДЕ
			|	(НЕ ГруппыДоступа.ЭтоГруппа)");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбновитьТаблицыГруппДоступа(Выборка.Ссылка);
			ЗаписатьЗначенияГруппДоступа(Выборка.Ссылка);
		КонецЦикла;
		
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
		Задание.Использование = Истина;
		Задание.Записать();
	КонецЕсли;
	
	Если ОграничениеДоступаНаУровнеЗаписейИзменено Тогда
		// Обновление параметров сеанса.
		// Требуется для того, чтобы администратор не выполнял перезапуск.
		УстановленныеПараметры = Новый Массив;
		УстановитьПараметрыСеансаОграниченияДоступа("ОграничиватьДоступПоВиду", УстановленныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления на БСП_1_1_2_3
Процедура ОбновитьПодчиненностьПользователей_1_1_2_3() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ВключатьРуководителейВГруппыДоступаПодчиненных.Установить(Ложь);
	Константы.ВключатьРуководителейВГруппыДоступаПодчиненных.Установить(Истина);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: обработчики подписок на события и регламентного задания

// Процедура ЗаписатьГруппыИВидыДоступа перезаписывает группы и виды доступа ЗначенияДоступа,
// в РегистрСведений.ГруппыЗначенийДоступа, используя объект или ссылку на объект.
//  Процедура вызывается из УправлениеДоступомСобытия.ЗаписатьГруппыДоступа(),
// но может быть вызвана из любого места, например, при включении ограничения доступа на уровне записи.
//
// Параметры:
//  Объект - объект или ссылка на объект (обычно Справочник<Объект|Ссылка>).
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//                 Ссылка объекта должна быть типа ОписаниеТипов измерения Значение
//                 в РегистрСведений.ГруппыЗначенийДоступа.
// 
Процедура ЗаписатьГруппыИВидыДоступа(Знач Объект, Отказ = Ложь, ЕстьОшибки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей") ИЛИ
	     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
		// Проверка, что тип объектов авторизации совпадает с использованным в группах доступа
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПРЕДСТАВЛЕНИЕ(ГруппыДоступаПользователи.Ссылка) КАК СсылкаПредставление,
			|	ГруппыДоступаПользователи.Ссылка.ТипПользователей
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|		ПО (ГруппыДоступаПользователи.Пользователь = &ВнешнийПользователь)
			|			И (ВнешниеПользователи.Ссылка = &ВнешнийПользователь)
			|			И (ГруппыДоступаПользователи.Ссылка.ТипПользователей <> НЕОПРЕДЕЛЕНО)
			|			И (ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> ТИПЗНАЧЕНИЯ(ГруппыДоступаПользователи.Ссылка.ТипПользователей))");
			Запрос.УстановитьПараметр("ВнешнийПользователь", СсылкаНаОбъект);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПредставлениеДругогоТипаОбъектаАвторизации = Метаданные.НайтиПоТипу(ТипЗнч(Выборка.ТипОбъектовАвторизации)).Синоним;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внешний пользователь ""%1"" используется в группе доступа ""%2"" с другим типом объектов информационной базы ""%3""!'"), Строка(СсылкаНаОбъект), Выборка.СсылкаПредставление, ПредставлениеДругогоТипаОбъектаАвторизации), , , , Отказ);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПРЕДСТАВЛЕНИЕ(ГруппыДоступаПользователи.Ссылка) КАК СсылкаПредставление,
			|	ГруппыДоступаПользователи.Ссылка.ТипПользователей
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|		ПО (ГруппыДоступаПользователи.Пользователь = &ГруппаВнешнихПользователей)
			|			И (ГруппыВнешнихПользователей.Ссылка = &ГруппаВнешнихПользователей)
			|			И (ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> НЕОПРЕДЕЛЕНО)
			|			И (ГруппыДоступаПользователи.Ссылка.ТипПользователей <> НЕОПРЕДЕЛЕНО)
			|			И (ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> ГруппыДоступаПользователи.Ссылка.ТипПользователей)");
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", СсылкаНаОбъект);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПредставлениеДругогоТипаОбъектаАвторизации = Метаданные.НайтиПоТипу(ТипЗнч(Выборка.ТипПользователей)).Синоним;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Группа внешних пользователей ""%1"" используется в группе доступа ""%2"" с другим типом объектов информационной базы ""%3""!'"), Строка(СсылкаНаОбъект), Выборка.СсылкаПредставление, ПредставлениеДругогоТипаОбъектаАвторизации), , , , Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ИзмененныеПользователи = Новый Массив;
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ
		     ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			
			ИзмененныеПользователи.Добавить(СсылкаНаОбъект);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка таблицы подчиненности пользователей.
		Если НЕ ВключатьРуководителейВГруппыДоступаПодчиненных()
		 ИЛИ НЕ УправлениеДоступомПереопределяемый.ТаблицаПодчиненностиПользователей(Запрос.МенеджерВременныхТаблиц) Тогда
			//
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	Пользователи.Ссылка КАК ПодчиненныйПользователь
			|ПОМЕСТИТЬ ТаблицаПодчиненностиПользователей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ";
			Запрос.Выполнить();
		КонецЕсли;
		
		// 1. Подготовка данных для отбора групп доступа авторизованного пользователя в шаблоне ограничения доступа.
		//
		//    <состав поля ЗначениеДоступа>             <cостав поля ГруппаДоступа>
		//
		//    Пользователь                              - тот же Пользователь
		//                                              - ГруппыПользователей            того же пользователя
		//                                              - ПодчиненныеПользователи        того же пользователя
		//                                              - ГруппыПодчиненныхПользователей того же пользователя
		//    {cравнение с &ТекущийПользователь}        {cравнение с ГруппыДоступаУчастники.Пользователь}
		//
		//    ВнешнийПользователь                       - тот же ВнешнийПользователь
		//                                              - ГруппыВнешнихПользователей            того же внешнего пользователя
		//                                              - ПодчиненныеВнешниеПользователи        того же внешнего пользователя
		//                                              - ГруппыПодчиненныхВнешнихПользователей того же внешнего пользователя
		//    {cравнение с &ТекущийВнешнийПользователь} {cравнение с ГруппыДоступаУчастники.Пользователь}
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПодчиненностиПользователей.Пользователь КАК ЗначениеДоступа,
		|	СоставГруппПользователей.ГруппаПользователей КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеДанныеДляОтбораГруппДоступа
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|		ПО ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь = СоставГруппПользователей.Пользователь
		|			И (ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи))
		|			И (ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.Пользователи))
		|			И (ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставГруппПользователей.Пользователь,
		|	СоставГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаПодчиненностиПользователей.Пользователь,
		|	СоставГруппПользователей.ГруппаПользователей
		|ИЗ
		|	ТаблицаПодчиненностиПользователей КАК ТаблицаПодчиненностиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|		ПО ТаблицаПодчиненностиПользователей.ПодчиненныйПользователь = СоставГруппПользователей.Пользователь
		|			И (ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи))
		|			И (ТИПЗНАЧЕНИЯ(ТаблицаПодчиненностиПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи))
		|			И (ТаблицаПодчиненностиПользователей.Пользователь <> ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставГруппПользователей.Пользователь,
		|	СоставГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПодчиненностиПользователей";
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("ВсеПустыеСсылки", УправлениеДоступомСерверПовтИсп.ВсеПустыеСсылки());
		
		// 2. Подготовка данных для работы ограничений по видам доступа Пользователи и ВнешниеПользователи
		//    (данные не учитывают подчиненность пользователей)
		//
		//    <состав поля ЗначениеДоступа>             <cостав поля ГруппаДоступа>
		//
		//    а) для вида доступа Пользователи
		//    {cравнение с Т.<поле>}                    {cравнение со ЗначенияГруппДоступа.ЗначениеДоступа}
		//                                              {cравнение с &ТекущийПользователь}
		//
		//    Пользователь                              - тот же Пользователь
		//                                              - ГруппыПользователей того же пользователя
		//
		//    ГруппаПользователей                       - та же ГруппаПользователей
		//
		//    ГруппаИсполнителей                        - Пользователи                       той же группы исполнителей
		//                                              - Группы пользователей               той же группы исполнителей
		//                                              - Группы пользователей пользователей той же группы исполнителей
		//                                              - Пользователи групп пользователей   той же группы исполнителей
		//
		//    б) для вида доступа ВнешниеПользователи
		//    {cравнение с Т.<поле>}                    {cравнение со ЗначенияГруппДоступа.ЗначениеДоступа}
		//                                              {cравнение с &ТекущийВнешнийПользователь}
		//
		//    ВнешнийПользователь                       - тот же ВнешнийПользователь
		//                                              - ГруппыВнешнихПользователей того же внешнего пользователя
		//
		//    ГруппаВнешнихПользователей                - та же ГруппаВнешнихПользователей
		//
		//    ОбъектАвторизации                         - ВнешнийПользователь                              того же объекта авторизации
		//                                              - ГруппыВнешнихПользователей внешнего пользователя того же объекта авторизации
		//
		//    ГруппаИсполнителей                        - Внешние пользователи                               той же группы исполнителей
		//                                              - Группы внешних пользователей                       той же группы исполнителей
		//                                              - Группы внешних пользователей внешних пользователей той же группы исполнителей
		//                                              - Внешние пользователи групп внешних пользователей   той же группы исполнителей
		
		// Подготовка таблицы дополнительных групп пользователей - групп доступа исполнителей (например, задач).
		Если НЕ УправлениеДоступомПереопределяемый.ТаблицаГруппИсполнителей(Запрос.МенеджерВременныхТаблиц) Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК ГруппаИсполнителей,
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ВсеПользователиГруппИсполнителей
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВнешниеПользователи.Ссылка КАК ГруппаИсполнителей,
			|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь
			|ПОМЕСТИТЬ ВсеВнешниеПользователиГруппИсполнителей
			|ИЗ
			|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|ГДЕ
			|	ЛОЖЬ";
		Иначе
			// Получение всех пользователей групп исполнителей:
			//   пользователи                       групп исполнителей
			// + группы пользователей               групп исполнителей
			// + группы пользователей пользователей групп исполнителей
			// + пользователи групп пользователей   групп исполнителей
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаГруппИсполнителей.ГруппаИсполнителей,
			|	ТаблицаГруппИсполнителей.Пользователь
			|ПОМЕСТИТЬ ПользователиГруппИсполнителей
			|ИЗ
			|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыПользователей)
			|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.Пользователи)
			|	И (НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ВсеПустыеСсылки))
			|	И (НЕ(ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.ГруппыПользователей)
			|				И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.Пользователи)))
			|	И (НЕ ТаблицаГруппИсполнителей.Пользователь В (&ВсеПустыеСсылки))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаГруппИсполнителей.ГруппаИсполнителей КАК ГруппаИсполнителей,
			|	ТаблицаГруппИсполнителей.Пользователь КАК ВнешнийПользователь
			|ПОМЕСТИТЬ ВнешниеПользователиГруппИсполнителей
			|ИЗ
			|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыВнешнихПользователей)
			|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ВнешниеПользователи)
			|	И (НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ВсеПустыеСсылки))
			|	И (НЕ(ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.ГруппыВнешнихПользователей)
			|				И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) <> ТИП(Справочник.ВнешниеПользователи)))
			|	И (НЕ ТаблицаГруппИсполнителей.Пользователь В (&ВсеПустыеСсылки))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаГруппИсполнителей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	ПользователиГруппИсполнителей.Пользователь
			|ПОМЕСТИТЬ ВсеПользователиГруппИсполнителей
			|ИЗ
			|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставГруппПользователей.ГруппаПользователей
			|ИЗ
			|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО ПользователиГруппИсполнителей.Пользователь = СоставГруппПользователей.Пользователь
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставГруппПользователей.Пользователь
			|ИЗ
			|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО ПользователиГруппИсполнителей.Пользователь = СоставГруппПользователей.ГруппаПользователей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиГруппИсполнителей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь
			|ПОМЕСТИТЬ ВсеВнешниеПользователиГруппИсполнителей
			|ИЗ
			|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставГруппПользователей.ГруппаПользователей
			|ИЗ
			|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь = СоставГруппПользователей.Пользователь
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
			|	СоставГруппПользователей.Пользователь
			|ИЗ
			|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|		ПО ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь = СоставГруппПользователей.ГруппаПользователей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВнешниеПользователиГруппИсполнителей";
		КонецЕсли;
		// Подготовка всех новых данных
		Запрос.Текст = Запрос.Текст + ";
		|" +
		"ВЫБРАТЬ
		|	СоставГруппПользователей.Пользователь КАК ЗначениеДоступа,
		|	СоставГруппПользователей.ГруппаПользователей КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеЗаписиПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставГруппПользователей.ГруппаПользователей,
		|	СоставГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВсеПользователиГруппИсполнителей.ГруппаИсполнителей,
		|	ВсеПользователиГруппИсполнителей.Пользователь
		|ИЗ
		|	ВсеПользователиГруппИсполнителей КАК ВсеПользователиГруппИсполнителей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи),
		|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеПользователиГруппИсполнителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставГруппПользователей.Пользователь КАК ЗначениеДоступа,
		|	СоставГруппПользователей.ГруппаПользователей КАК ГруппаДоступа
		|ПОМЕСТИТЬ НовыеЗаписиВнешнихПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СоставГруппПользователей.ГруппаПользователей,
		|	СоставГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СоставГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации,
		|	СоставГруппПользователей.ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СоставГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
		|	И (НЕ ВЫРАЗИТЬ(СоставГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации В (&ВсеПустыеСсылки))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВсеВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
		|	ВсеВнешниеПользователиГруппИсполнителей.ВнешнийПользователь
		|ИЗ
		|	ВсеВнешниеПользователиГруппИсполнителей КАК ВсеВнешниеПользователиГруппИсполнителей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи),
		|	ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеВнешниеПользователиГруппИсполнителей";
		Запрос.Выполнить();
		
		// Получение записей для удаления.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеДанныеДляОтбораГруппДоступа КАК НовыеДанныеДляОтбораГруппДоступа
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеДанныеДляОтбораГруппДоступа.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписиПользователей КАК НовыеЗаписиПользователей
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиПользователей.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиПользователей.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеЗаписиПользователей.ЗначениеДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПользователиИГруппыПользователей.ВидДоступа,
		|	ПользователиИГруппыПользователей.ЗначениеДоступа,
		|	ПользователиИГруппыПользователей.ТолькоВидДоступа,
		|	ПользователиИГруппыПользователей.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписиВнешнихПользователей КАК НовыеЗаписиВнешнихПользователей
		|		ПО ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиВнешнихПользователей.ЗначениеДоступа
		|			И ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиВнешнихПользователей.ГруппаДоступа
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи)
		|	И ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ
		|	И НовыеЗаписиВнешнихПользователей.ЗначениеДоступа ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		МенеджерЗаписи = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьМенеджерЗаписи();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			Если ( ТипЗнч(МенеджерЗаписи.ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи") ИЛИ
				   ТипЗнч(МенеджерЗаписи.ЗначениеДоступа) = Тип("СправочникСсылка.ВнешниеПользователи") ) И
			     ИзмененныеПользователи.Найти(МенеджерЗаписи.ЗначениеДоступа) = Неопределено Тогда
				
				ИзмененныеПользователи.Добавить(МенеджерЗаписи.ЗначениеДоступа);
			КонецЕсли;
			
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		// Получение записей для добавления.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка) КАК ВидДоступа,
		|	НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа,
		|	ЛОЖЬ КАК ТолькоВидДоступа,
		|	НовыеДанныеДляОтбораГруппДоступа.ГруппаДоступа
		|ИЗ
		|	НовыеДанныеДляОтбораГруппДоступа КАК НовыеДанныеДляОтбораГруппДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеДанныеДляОтбораГруппДоступа.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеДанныеДляОтбораГруппДоступа.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи),
		|	НовыеЗаписиПользователей.ЗначениеДоступа,
		|	ЛОЖЬ,
		|	НовыеЗаписиПользователей.ГруппаДоступа
		|ИЗ
		|	НовыеЗаписиПользователей КАК НовыеЗаписиПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиПользователей.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиПользователей.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
		|	НовыеЗаписиВнешнихПользователей.ЗначениеДоступа,
		|	ЛОЖЬ,
		|	НовыеЗаписиВнешнихПользователей.ГруппаДоступа
		|ИЗ
		|	НовыеЗаписиВнешнихПользователей КАК НовыеЗаписиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = НовыеЗаписиВнешнихПользователей.ЗначениеДоступа)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = НовыеЗаписиВнешнихПользователей.ГруппаДоступа)
		|ГДЕ
		|	ПользователиИГруппыПользователей.ВидДоступа ЕСТЬ NULL ";
		
		НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для каждого Запись Из НаборЗаписей Цикл
			Если ( ТипЗнч(Запись.ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи") ИЛИ
			       ТипЗнч(Запись.ЗначениеДоступа) = Тип("СправочникСсылка.ВнешниеПользователи") ) И
			     ИзмененныеПользователи.Найти(Запись.ЗначениеДоступа) = Неопределено Тогда
				
				ИзмененныеПользователи.Добавить(Запись.ЗначениеДоступа);
			КонецЕсли;
		КонецЦикла;
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		// Обновление ролей пользователей, для которых роли могли быть изменены.
		Если СсылкаНаОбъект = Справочники.ГруппыПользователей.ВсеПользователи ИЛИ
		     СсылкаНаОбъект = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СоставГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
			|ГДЕ
			|	СоставГруппПользователей.ГруппаПользователей = &ПредопределеннаяГруппа");
			Запрос.УстановитьПараметр("ПредопределеннаяГруппа", СсылкаНаОбъект);
			
			ИзмененныеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
		
		ОбновитьРолиПользователей(ИзмененныеПользователи, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Объект.ДополнительныеСвойства.Вставить("ЕстьОшибки");
		КонецЕсли;
	Иначе
		
		ВидыДоступа  = ВидыДоступаТаблицы(СсылкаНаОбъект.Метаданные().ПолноеИмя());
		ВидДоступаЧерезПраваПоЗначениямДоступа = (ВидыДоступа.Количество() = 1) И СвойстваВидаДоступа(ВидыДоступа[0]).ВидДоступаЧерезПраваПоЗначениямДоступа;
		
		Если ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			
			ВидДоступа = ВидыДоступа[0];
			
			// Подготовка групп доступа (родителей) значения доступа.
			НаборЗаписей = РодителиЗначенияДоступа(СсылкаНаОбъект, ВидДоступа);
			
			// Проверка изменения состава родителей.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НовыеРодители.ТолькоВидДоступа,
			|	НовыеРодители.ГруппаДоступа
			|ПОМЕСТИТЬ НовыеРодители
			|ИЗ
			|	&НовыеРодители КАК НовыеРодители
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтарыеРодители.ТолькоВидДоступа,
			|	СтарыеРодители.ГруппаДоступа
			|ПОМЕСТИТЬ СтарыеРодители
			|ИЗ
			|	РегистрСведений.ГруппыЗначенийДоступа КАК СтарыеРодители
			|ГДЕ
			|	СтарыеРодители.ВидДоступа = &ВидДоступа
			|	И СтарыеРодители.ЗначениеДоступа = &ЗначениеДоступа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	СтарыеРодители КАК СтарыеРодители
			|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРодители КАК НовыеРодители
			|		ПО (НовыеРодители.ТолькоВидДоступа = СтарыеРодители.ТолькоВидДоступа)
			|			И (НовыеРодители.ГруппаДоступа = СтарыеРодители.ГруппаДоступа)
			|ГДЕ
			|	НовыеРодители.ГруппаДоступа ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	НовыеРодители КАК НовыеРодители
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРодители КАК СтарыеРодители
			|		ПО НовыеРодители.ТолькоВидДоступа = СтарыеРодители.ТолькоВидДоступа
			|			И НовыеРодители.ГруппаДоступа = СтарыеРодители.ГруппаДоступа
			|ГДЕ
			|	СтарыеРодители.ГруппаДоступа ЕСТЬ NULL ");
			Запрос.УстановитьПараметр("ВидДоступа",      ВидДоступа);
			Запрос.УстановитьПараметр("ЗначениеДоступа", СсылкаНаОбъект);
			Запрос.УстановитьПараметр("НовыеРодители",   НаборЗаписей.Выгрузить(, "ТолькоВидДоступа, ГруппаДоступа"));
			СоставРодителейИзменился = НЕ Запрос.Выполнить().Пустой();
			
			Если СоставРодителейИзменился Тогда
				
				НаборЗаписей.Записать();
				
				// Обновление состава родителей элементов в иерархии текущего значения.
				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ
				|	ТаблицаСИерархией.Ссылка КАК ПодчиненнаяСсылка
				|ИЗ
				|	ПодставляемаяТаблица КАК ТаблицаСИерархией
				|ГДЕ
				|	ТаблицаСИерархией.Ссылка В ИЕРАРХИИ(&ЗначениеДоступа)
				|	И ТаблицаСИерархией.Ссылка <> &ЗначениеДоступа", "ПодставляемаяТаблица", СсылкаНаОбъект.Метаданные().ПолноеИмя()));
				Запрос.УстановитьПараметр("ЗначениеДоступа", СсылкаНаОбъект);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					РодителиЗначенияДоступа(Выборка.ПодчиненнаяСсылка, ВидДоступа).Записать();
				КонецЦикла;
			КонецЕсли;
			
		Иначе
		
			НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
			
			Если ОграничиватьДоступНаУровнеЗаписей() Тогда
				// Заполнение группы значений для каждого вида доступа.
				Для каждого ВидДоступа Из ВидыДоступа Цикл
					Свойства = СвойстваВидаДоступа(ВидДоступа);
					ПостфиксИмени = ?(Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, "", ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(ВидДоступа));
					
					Если НЕ Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа И Объект["ВидДоступа" + ПостфиксИмени] <> Истина Тогда
						// Когда значение не разрешено по виду доступа.
						Запись = НаборЗаписей.Добавить();
						Запись.ВидДоступа       = ВидДоступа;
						Запись.ЗначениеДоступа  = СсылкаНаОбъект;
						Запись.ТолькоВидДоступа = Истина;
						Запись.ГруппаДоступа    = Неопределено;
					ИначеЕсли Свойства.ВидДоступаСОднойГруппойЗначенияДоступа Тогда
						Запись = НаборЗаписей.Добавить();
						Запись.ВидДоступа       = ВидДоступа;
						Запись.ЗначениеДоступа  = СсылкаНаОбъект;
						Запись.ТолькоВидДоступа = Ложь;
						Запись.ГруппаДоступа    = Объект["ГруппаДоступа" + ПостфиксИмени];
					Иначе
						Для каждого СтрокаТЧ Из Объект["ГруппыДоступа" + ПостфиксИмени] Цикл
							Запись = НаборЗаписей.Добавить();
							Запись.ВидДоступа       = ВидДоступа;
							Запись.ЗначениеДоступа  = СсылкаНаОбъект;
							Запись.ТолькоВидДоступа = Ложь;
							Запись.ГруппаДоступа    = СтрокаТЧ["ГруппаДоступа" + ПостфиксИмени];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если НаборЗаписей.Количество() = 0 Тогда
					// Если это условие отключить, тогда зациклится регламентное задание
					// "Заполнение данных для ограничения доступа".
					ВызватьИсключение(НСтр("ru = 'Попытка записать пустой набор групп доступа или видов доступа!'"));
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписей.Отбор.ЗначениеДоступа.Установить(СсылкаНаОбъект);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьГруппыИВидыДоступа()

// Процедура ЗаписатьНаборыЗначенийДоступа перезаписывает наборы значений доступа проверяемого объекта
// в РегистрСведений.НаборыЗначенийДоступа, используя процедуру УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа().
//
//  Процедура вызывается из УправлениеДоступомСобытия.ЗаписатьНаборыЗначенийДоступа(),
// но может быть вызвана из любого места, например, при включении ограничения доступа на уровне записей.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//
Процедура ЗаписатьНаборыЗначенийДоступа(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры!
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи наборов значений доступа:
				           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
				           |не задан тип %1'"),
				Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ПолноеИмя()));
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
	
	Если ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		Если Метаданные.НайтиПоТипу(ТипЗначенияОбъект).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
			ЗаполнитьНаборыЗначенийДоступа(Объект, НаборЗаписей);
			ДобавитьНаборыЗначенийДоступа(НаборЗаписей, ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
		Иначе
			// Записан объект с уже заполненной табличной частью НаборыЗначенийДоступа
			НаборЗаписей.Загрузить(Объект.НаборыЗначенийДоступа.Выгрузить());
		КонецЕсли;
		
		НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
		ПодготовкаНаборовЗначенийДоступаПередЗаписью(СсылкаНаОбъект, НаборЗаписей);
		Если НаборыЗначенийДоступаРегистраИзменены(СсылкаНаОбъект, НаборЗаписей) Тогда
			НаборЗаписей.Записать();
			ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|ГДЕ
		|	НаборыЗначенийДоступа.Объект = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			// Очистка устаревшего набора.
			// Запись нового набора будет выполнена регламентным заданием,
			// после включения ограничения на уровне записей.
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
			НаборЗаписей.Записать();
			
			// Очистка устаревших зависимых наборов.
			ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаписатьЗависимыеНаборыЗначенийДоступа, так же как и процедура
// УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа вызывает процедуру прикладного разработчика
// УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(),
// которая используется для перезаписи зависимых наборов значений доступа.
//
//  Процедура вызывается из УправлениеДоступомСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа(),
// состав типов подписки дополняет (без пересечения) состав типов подписки ЗаписатьНаборыЗначенийДоступа,
// теми типами, для которых выполнять запись наборов в регистр сведений НаборыЗначенийДоступа
// не требуется, но сами наборы входят в состав других наборов, например, наборы некоторых файлов
// из справочника "Файлы" могут входить в состав некоторых бизнес-процессов "Задание", созданных
// на основании файлов, при этом наборы файлов записывать в регистр не требуется.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//
Процедура ЗаписатьЗависимыеНаборыЗначенийДоступа(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры!
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать зависимые наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект);
	
КонецПроцедуры

// Процедура ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания напрямую
// из регламентного задания ЗаполнениеДанныхДляОграниченияДоступа
// Используется для переадресации вызова процедуре с параметром:
// ЗаполнениеДанныхДляОграниченияДоступа()
//
Процедура ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания() Экспорт
	
	ЗаполнениеДанныхДляОграниченияДоступа();
	
КонецПроцедуры

// Процедура ЗаполнениеДанныхДляОграниченияДоступа вызывается из регламентного задания
// ЗаполнениеДанныхДляОграниченияДоступа через обработчик
// ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания
//  Процедура выполняет последовательное заполнение данных, необходимых для работы
// подсистемы УправленияДоступом в режиме ограничения доступа на уровне записей,
// в связи с чем, запускается после включения этого режима и работает до окончания заполнения
//  Сведения о состоянии работы, процедура записываются в журнал регистрации
//  Заполнение реализуется порциями за счет удаления вторичных данных
// в отключенном режиме ограничения доступа на уровне записей, поэтому все данные актуальны
//  При отсутствии ограничения на уровне записей, выполняется только обновление вторичных данных
//  Возможно вызывать программно, например, при обновлении информационной базы
// Также для целей обновления есть форма Справочник.ГруппыДоступа.ОбновлениеДанныхОграниченияДоступа,
// с помощью которой можно сделать интерактивное обновление данных ограничения доступа
// при обновлении информационной базы
//
Процедура ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных = 0) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		ЗаписатьГруппыИВидыДоступа(Справочники.ГруппыПользователей.ВсеПользователи);
		
		// Заполнение РегистрСведений.ГруппыЗначенийДоступа.
		Для каждого Тип Из Метаданные.ПодпискиНаСобытия.ЗаписатьГруппыИВидыДоступа.Источник.Типы() Цикл
			
			Если Тип = Тип("ПланВидовХарактеристикОбъект.ВидыДоступа") Тогда
				Продолжить;
			КонецЕсли;
			
			Таблица = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			
			ВидыДоступа = ВидыДоступаТаблицы(Таблица);
			Если ВидыДоступа.Количество() = 1 И
			     ( ВидыДоступа[0] = ПланыВидовХарактеристик.ВидыДоступа.Пользователи ИЛИ 
			       ВидыДоступа[0] = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоДанных < 1000 И Тип <> Тип("Строка") Тогда
				
				Запрос = Новый Запрос(СтрЗаменить(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
				|	Таблица.Ссылка
				|ИЗ
				|	ПодставляемаяТаблица КАК Таблица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК РегистрСведенийГруппыЗначенийДоступа
				|		ПО Таблица.Ссылка = РегистрСведенийГруппыЗначенийДоступа.ЗначениеДоступа
				|ГДЕ
				|	РегистрСведенийГруппыЗначенийДоступа.ЗначениеДоступа ЕСТЬ NULL ", "ПодставляемаяТаблица", Таблица));
				Выгрузка = Запрос.Выполнить().Выгрузить();
				КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
				
				Для каждого СтрокаТЧ Из Выгрузка Цикл
					ЗаписатьГруппыИВидыДоступа(СтрокаТЧ.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоДанных < 1000 Тогда
			
			// Заполнение РегистрСведений.НаборыЗначенийДоступа.
			Для каждого Тип Из Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.Типы() Цикл
				
				Если Тип = Тип("ПланВидовХарактеристикОбъект.ВидыДоступа") Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьТабличнуюЧасть = Метаданные.НайтиПоТипу(Тип).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") <> Неопределено;
				
				Если КоличествоДанных < 1000 И Тип <> Тип("Строка") Тогда
				
					Запрос = Новый Запрос(СтрЗаменить(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
					|	Таблица.Ссылка
					|ИЗ
					|	ПодставляемаяТаблица КАК Таблица
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыЗначенийДоступа КАК РегистрСведенийНаборыЗначенийДоступа
					|		ПО Таблица.Ссылка = РегистрСведенийНаборыЗначенийДоступа.Объект
					|ГДЕ
					|	РегистрСведенийНаборыЗначенийДоступа.Объект ЕСТЬ NULL ", "ПодставляемаяТаблица", Метаданные.НайтиПоТипу(Тип).ПолноеИмя()));
					Выгрузка = Запрос.Выполнить().Выгрузить();
					КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
					
					Для каждого СтрокаТЧ Из Выгрузка Цикл
						Если ЗаполнитьТабличнуюЧасть Тогда
							// Запись наборов табличной части и наборов регистра (без зависимых наборов).
							Объект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
							Объект.ОбменДанными.Загрузка = Истина;
							Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
							Объект.Записать();
						Иначе
							// Запись только наборов регистра (без зависимых наборов).
							ЗаписатьНаборыЗначенийДоступа(СтрокаТЧ.Ссылка);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоДанных < 1000 Тогда
		// Обновление вторичных данных в наборах значений доступа: свойств видов доступа , и других.
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвойстваВидовДоступа.ВидДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа
		|ПОМЕСТИТЬ ТаблицаСвойств
		|ИЗ
		|	&СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	НаборыЗначенийДоступа.Объект,
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	НаборыЗначенийДоступа.Чтение,
		|	НаборыЗначенийДоступа.Добавление,
		|	НаборыЗначенийДоступа.Изменение,
		|	НаборыЗначенийДоступа.Удаление,
		|	ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа, ЛОЖЬ) КАК ВидДоступаБезГруппЗначенияДоступа,
		|	ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, ЛОЖЬ) КАК ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа, ЛОЖЬ) КАК ВидДоступаЧерезПраваПоЗначениямДоступа,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.Чтение
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДоступаПравоЧтения,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.Добавление
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДоступаПравоДобавления,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.Изменение
		|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|	КОНЕЦ КАК ВидДоступаПравоИзменения,
		|	НаборыЗначенийДоступа.ТипОбъекта,
		|	ЕСТЬNULL(ТипыСсылок.ТипТаблицы, НЕОПРЕДЕЛЕНО) КАК ТипЗначенияДоступа
		|ИЗ
		|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойств КАК СвойстваВидовДоступа
		|		ПО НаборыЗначенийДоступа.ВидДоступа = СвойстваВидовДоступа.ВидДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
		|		ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(ТипыСсылок.ТипТаблицы))
		|			И (НаборыЗначенийДоступа.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)))
		|ГДЕ
		|	(НЕ(НаборыЗначенийДоступа.ВидДоступаБезГруппЗначенияДоступа = ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа, ЛОЖЬ)
		|				И НаборыЗначенийДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, ЛОЖЬ)
		|				И НаборыЗначенийДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа = ЕСТЬNULL(СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа, ЛОЖЬ)
		|				И НаборыЗначенийДоступа.ТипЗначенияДоступа = ЕСТЬNULL(ТипыСсылок.ТипТаблицы, НЕОПРЕДЕЛЕНО)
		|				И НаборыЗначенийДоступа.ВидДоступаПравоЧтения = ВЫБОР
		|					КОГДА НаборыЗначенийДоступа.Чтение
		|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|				КОНЕЦ
		|				И НаборыЗначенийДоступа.ВидДоступаПравоДобавления = ВЫБОР
		|					КОГДА НаборыЗначенийДоступа.Добавление
		|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|				КОНЕЦ
		|				И НаборыЗначенийДоступа.ВидДоступаПравоИзменения = ВЫБОР
		|					КОГДА НаборыЗначенийДоступа.Изменение
		|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|				КОНЕЦ))");
		Запрос.УстановитьПараметр("СвойстваВидовДоступа", СвойстваВидаДоступа());
		Выгрузка = Запрос.Выполнить().Выгрузить();
		КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
		
		Для каждого СтрокаТЧ Из Выгрузка Цикл
			МенеджерЗаписи = РегистрыСведений.НаборыЗначенийДоступа.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,
									 СтрокаТЧ,
									 "Объект,
									 |НомерНабора,
									 |ВидДоступа,
									 |ЗначениеДоступа,
									 |Чтение,
									 |Добавление,
									 |Изменение,
									 |Удаление,
									 |ВидДоступаБезГруппЗначенияДоступа,
									 |ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
									 |ВидДоступаЧерезПраваПоЗначениямДоступа,
									 |ВидДоступаПравоЧтения,
									 |ВидДоступаПравоДобавления,
									 |ВидДоступаПравоИзменения,
									 |ТипОбъекта,
									 |ТипЗначенияДоступа");
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоДанных < 1000 Тогда
		// Обновление вторичных данных в наборах значений доступа: ТипОбъекта
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТипыОбъектов.Объект
		|ИЗ
		|	(ВЫБРАТЬ
		|		НаборыЗначенийДоступа.Объект КАК Объект,
		|		ВЫБОР
		|			КОГДА НаборыЗначенийДоступа.ТипОбъекта <> НЕОПРЕДЕЛЕНО
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ТипЗадан,
		|		ВЫБОР
		|			КОГДА НаборыЗначенийДоступа.ТипОбъекта <> НЕОПРЕДЕЛЕНО
		|					И НаборыЗначенийДоступа.ТипОбъекта <> ТипыСсылок.ТипТаблицы
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК НеверныйТип
		|	ИЗ
		|		РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ТипыСсылок КАК ТипыСсылок
		|			ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.Объект) = ТИПЗНАЧЕНИЯ(ТипыСсылок.ТипТаблицы))) КАК ТипыОбъектов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТипыОбъектов.Объект
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТипыОбъектов.ТипЗадан) <> 1
		|		ИЛИ СУММА(ТипыОбъектов.НеверныйТип) <> 0)");
		Выгрузка = Запрос.Выполнить().Выгрузить();
		КоличествоДанных = КоличествоДанных + Выгрузка.Количество();
		
		НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
		Для каждого СтрокаТЧ Из Выгрузка Цикл
		
			НаборЗаписей.Отбор.Объект.Установить(СтрокаТЧ.Объект);
			НаборЗаписей.Прочитать();
			ПерваяЗапись = Истина;
			
			Для каждого Запись Из НаборЗаписей Цикл
				
				Если ПерваяЗапись Тогда
					ТипыОбъекта = Новый Массив;
					ТипыОбъекта.Добавить(ТипЗнч(Запись.Объект));
					ОписаниеТипаОбъекта = Новый ОписаниеТипов(ТипыОбъекта);
					
					Запись.ТипОбъекта = ОписаниеТипаОбъекта.ПривестиЗначение(Неопределено);
					ПерваяЗапись = Ложь;
				Иначе
					Запись.ТипОбъекта = Неопределено;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоДанных < 1000 Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'"), 
			УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Завершено заполнение данных для ограничения доступа'"), 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
		Задание.Использование = Ложь;
		Задание.Записать();
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'"),
			УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Выполнена запись порции данных для ограничения доступа'"), 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
		Задание.Использование = Истина;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция СформироватьДанныеВыбораЗначенияДоступа возвращает список
// значений доступа не помеченных на удаление.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст        - Строка, символы введенные пользователем.
//  ВключаяГруппы - Булево, если Истина, включать группы пользователей и внешних пользователей.
//  ВидДоступа   - ПланыВидовХарактеристикСсылка.ВидыДоступа, значения доступа которого выбираются.
//
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредставленияПеречислений.Ссылка,
	|	ПредставленияПеречислений.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПредставленияПеречислений
	|ИЗ
	|	&ПредставленияПеречислений КАК ПредставленияПеречислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	"""" КАК Наименование
	|ГДЕ
	|	ЛОЖЬ";
	
	ЗапросПредставленийПеречислений = Новый Запрос;
	ЗапросПредставленийПеречислений.Текст =
	"ВЫБРАТЬ
	|	"""" КАК Ссылка,
	|	"""" КАК Наименование
	|ГДЕ
	|	ЛОЖЬ";
	
	Для каждого Тип Из ВидДоступа.ТипЗначения.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		
		ПолноеИмяТаблицы = МетаданныеТипа.ПолноеИмя();
		
		Если (     Метаданные.Справочники.Содержит(МетаданныеТипа)
		       ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) )
		   И МетаданныеТипа.Иерархический
		   И МетаданныеТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
		   И НЕ ВключаяГруппы Тогда
			
			УсловиеДляГруппы = "НЕ Таблица.ЭтоГруппа";
		Иначе
			УсловиеДляГруппы = "Истина";
		КонецЕсли;
		
		Если Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
			//
			ЗапросПредставленийПеречислений.Текст = ЗапросПредставленийПеречислений.Текст + Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
			ЗапросПредставленийПеречислений.Текст = ЗапросПредставленийПеречислений.Текст + СтрЗаменить(
			"ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Наименование
			|ИЗ
			|	&ПолноеИмяТаблицы КАК Таблица", "&ПолноеИмяТаблицы", ПолноеИмяТаблицы);
		Иначе
			Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
			Запрос.Текст = Запрос.Текст + СтрЗаменить(СтрЗаменить(
			"ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	Таблица.Наименование
			|ИЗ
			|	&ПолноеИмяТаблицы КАК Таблица
			|ГДЕ
			|	(НЕ Таблица.ПометкаУдаления)
			|	И Таблица.Наименование ПОДОБНО &Текст
			|	И &УсловиеДляГруппы", "&ПолноеИмяТаблицы", ПолноеИмяТаблицы), "&УсловиеДляГруппы", УсловиеДляГруппы);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПредставленияПеречислений", ЗапросПредставленийПеречислений.Выполнить().Выгрузить());
	Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ПредставленияПеречислений.Ссылка,
	|	ПредставленияПеречислений.Наименование
	|ИЗ
	|	ПредставленияПеречислений КАК ПредставленияПеречислений
	|ГДЕ
	|	ПредставленияПеречислений.Наименование ПОДОБНО &Текст";
	
	ДанныеВыбора = Новый СписокЗначений;
	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняется перед записью в регистр НаборыЗначенийДоступа или
// перед записью объекта с табличной частью НаборыЗначенийДоступа
// Заполняет вторичные данные, ускоряющие работу шаблонов ограничений доступа
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.*, ДокументСсылка.*, ...
//  Таблица        - ТабличнаяЧасть (или ТаблицаЗначений), РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа
//
Процедура ПодготовкаНаборовЗначенийДоступаПередЗаписью(СсылкаНаОбъект, Таблица) Экспорт
	
	ПодготовкаНабораЗаписей = ТипЗнч(Таблица) = Тип("РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа");
	
	// Нормализация ресурсов Чтение, Добавление, Изменение, Удаление.
	НомерНабора = -1;
	Для каждого Строка Из Таблица Цикл
		
		Если ПодготовкаНабораЗаписей Тогда
			// Установка значения измерения Объект
			Строка.Объект = СсылкаНаОбъект;
			// Заполнение свойств вида доступа:
			//   ВидДоступаБезГруппЗначенияДоступа,
			//   ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
			//   ВидДоступаЧерезПраваПоЗначениямДоступа
			СвойстваВидаДоступа = СвойстваВидаДоступа(Строка.ВидДоступа);
			Если СвойстваВидаДоступа <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Строка, СвойстваВидаДоступа(Строка.ВидДоступа));
			КонецЕсли;
			// Установка типа объекта для одной строки всех наборов (в качестве типа пустая ссылка)
			Если НомерНабора = -1 Тогда
				ТипыОбъекта = Новый Массив;
				ТипыОбъекта.Добавить(ТипЗнч(СсылкаНаОбъект));
				ОписаниеТипаОбъекта = Новый ОписаниеТипов(ТипыОбъекта);
				Строка.ТипОбъекта = ОписаниеТипаОбъекта.ПривестиЗначение(Неопределено);
			КонецЕсли;
			// Установка типа значения доступа для значений доступа по видам доступа
			// ПравоЧтения, ПравоДобавления, ПравоИзменения (в качестве типа пустая ссылка)
			Если Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения
			 ИЛИ Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления
			 ИЛИ Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения Тогда
				МенеджерОбъекта = ?(Строка.ЗначениеДоступа <> Неопределено, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Строка.ЗначениеДоступа), Неопределено);
				Если МенеджерОбъекта <> Неопределено Тогда
					Строка.ТипЗначенияДоступа = МенеджерОбъекта.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Очистка флажков прав и соответствующих им вторичных данных
		// для всех строк каждого набора, кроме первой строки
		Если НомерНабора = Строка.НомерНабора Тогда
			Строка.Чтение     = Ложь;
			Строка.Добавление = Ложь;
			Строка.Изменение  = Ложь;
			Строка.Удаление   = Ложь;
		Иначе
			НомерНабора = Строка.НомерНабора;
		КонецЕсли;
		
		Если ПодготовкаНабораЗаписей Тогда
			// Описание прав Чтение, Добавление, Изменение через ссылки видов доступа для
			// оптимизации работы механизма зависимостей по правам в шаблоне ограничения доступа
			Строка.ВидДоступаПравоЧтения     = ?(Строка.Чтение,     ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения,     ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка());
			Строка.ВидДоступаПравоДобавления = ?(Строка.Добавление, ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления, ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка());
			Строка.ВидДоступаПравоИзменения  = ?(Строка.Изменение,  ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения,  ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция РодителиЗначенияДоступа заполняет НаборЗаписей,
// родителями значения доступа, включая себя, как родителя.
//
// Параметры:
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка.
//  ВидДоступа   - ПланВидовХарактеристикСсылка.ВидыДоступа - для заполнения.
//
// Возвращаемое значение:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ГруппыЗначенийДоступа.
//
Функция РодителиЗначенияДоступа(ЗначениеДоступа, ВидДоступа)
	
	// Получение флажка наследования права родителей для значения доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыЗначенийДоступа.НаследоватьПраваРодителей
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
	|ГДЕ
	|	ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступа
	|	И ГруппыЗначенийДоступа.ЗначениеДоступа = &ЗначениеДоступа
	|	И ГруппыЗначенийДоступа.ГруппаДоступа = &ЗначениеДоступа");
	Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
	Запрос.УстановитьПараметр("ВидДоступа", ВидДоступа);
	Выборка = Запрос.Выполнить().Выбрать();
	НаследоватьПраваРодителей = ?(Выборка.Следующий(), Выборка.НаследоватьПраваРодителей, Истина);
	
	НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
	НаборЗаписей.Отбор.ЗначениеДоступа.Установить(ЗначениеДоступа);
	
	ТекущийРодитель = ЗначениеДоступа;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
	
		Запись = НаборЗаписей.Добавить();
		Запись.ВидДоступа                = ВидДоступа;
		Запись.ЗначениеДоступа           = ЗначениеДоступа;
		Запись.ГруппаДоступа             = ТекущийРодитель;
		Запись.НаследоватьПраваРодителей = ?(ЗначениеДоступа = Запись.ГруппаДоступа, НаследоватьПраваРодителей, Ложь);
		Запись.ИспользоватьПраваСсылки   = ?(ЗначениеДоступа = Запись.ГруппаДоступа, Истина, НаследоватьПраваРодителей);
		Запись.СвязьСРодителем           = ЗначениеДоступа <> Запись.ГруппаДоступа;
		
		ТекущийРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийРодитель, "Родитель");
	КонецЦикла;
	
	Возврат НаборЗаписей;
	
КонецФункции // ЗаполнитьРодителейЗначенияДоступа()

// Процедура предназначена для внутреннего использования
Процедура ДобавитьНаборыДляПрава(Право, ЗависимостиПрав, Таблица, НаборыПравДляУмножения, НаборыОграниченийДляУмножения, НаборыЧтения, НаборыДобавления, НаборыИзменения, СсылкаНаВедущийОбъект)
	
	// Определение права, которое требуется проверить.
	ВидДоступаПроверяемогоПрава = Неопределено;
	// Определение наборов ограничения, которые требуется использовать.
	НаборыОграничений = Неопределено;
	
	Если      ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Чтение" Тогда
		НаборыОграничений           = НаборыЧтения;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
		
	ИначеЕсли ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Добавление" Тогда
		НаборыОграничений           = НаборыДобавления;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления;
	
	ИначеЕсли ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Изменение" Тогда
		НаборыОграничений           = НаборыИзменения;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения;
	КонецЕсли;
	
	Если ЗависимостиПрав.ОтключитьПроверкуПравВедущейТаблицы Тогда
		ВидДоступаПроверяемогоПрава = Неопределено;
	КонецЕсли;
	
	Если ВидДоступаПроверяемогоПрава <> Неопределено И НаборыОграничений <> Неопределено Тогда
		
		Строка = НаборыПравДляУмножения.Добавить();
		Строка.НомерНабора     = НаборыПравДляУмножения.Количество();
		Строка.ВидДоступа      = ВидДоступаПроверяемогоПрава;
		Строка.ЗначениеДоступа = СсылкаНаВедущийОбъект;
		Строка[Право] = Истина;
		
		НовыеНаборы = НаборыОграничений.Скопировать();
		НовыеНаборы.ЗаполнитьЗначения(Истина, Право);
		ДобавитьНаборыЗначенийДоступа(НаборыОграниченийДляУмножения, НовыеНаборы);
		
	ИначеЕсли ВидДоступаПроверяемогоПрава <> Неопределено Тогда
		
		НовыеНаборы = НаборыПравДляУмножения.Скопировать();
		НовыеНаборы.Очистить();
		Строка.НомерНабора     = НаборыПравДляУмножения.Количество();
		Строка.ВидДоступа      = ВидДоступаПроверяемогоПрава;
		Строка.ЗначениеДоступа = СсылкаНаВедущийОбъект;
		Строка[Право] = Истина;
		ДобавитьНаборыЗначенийДоступа(Таблица, НовыеНаборы);
		
	ИначеЕсли НаборыОграничений <> Неопределено Тогда
		
		НовыеНаборы = НаборыОграничений.Скопировать();
		НовыеНаборы.ЗаполнитьЗначения(Истина, Право);
		ДобавитьНаборыЗначенийДоступа(Таблица, НовыеНаборы);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция ОбновитьГруппыДоступаПрофиля выполняет
// обновление видов доступа групп доступа указанного профиля.
// При этом возможно не удалять виды доступа из группы доступа,
// которые удалены в профиле этой группы доступа, в случае
// когда в группе доступа назначены значения доступа по
// удаляемому виду доступа.
// 
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//  НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа - Булево
//
// Возвращаемое значение:
//  Булево - когда Истина, группа доступа была изменена,
//           когда Ложь никаких изменений не было выполнено.
//
Функция ОбновитьГруппыДоступаПрофиля(Профиль, НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа) Экспорт
	
	ГруппаДоступаОбновлена = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	(ГруппыДоступа.Профиль = &Профиль
	|			ИЛИ &Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|				И ГруппыДоступа.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы))");
	
	Запрос.УстановитьПараметр("Профиль", Профиль.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Проверка необходимости/возможности обновления группы доступа.
		ГруппаДоступа = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ГруппаДоступа.Ссылка = Справочники.ГруппыДоступа.Администраторы
		   И ГруппаДоступа.Профиль <> Справочники.ПрофилиГруппДоступа.Администратор Тогда
			// Установка профиля Администратор, если не задан.
			ГруппаДоступа.Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
		КонецЕсли;
		
		// Проверка состава видов доступа.
		СоставВидовДоступаИзменен                           = Ложь;
		ЕстьУдаляемыеВидыДоступаСЗаданнымиЗначениямиДоступа = Ложь;
		Если ГруппаДоступа.ВидыДоступа.Количество() <> Профиль.ВидыДоступа.НайтиСтроки(Новый Структура("Предустановленный", Ложь)).Количество() Тогда
			СоставВидовДоступаИзменен = Истина;
		Иначе
			Для каждого СтрокаВидаДоступа Из ГруппаДоступа.ВидыДоступа Цикл
				Если Профиль.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа, Предустановленный", СтрокаВидаДоступа.ВидДоступа, Ложь)).Количество() = 0 Тогда
					СоставВидовДоступаИзменен = Истина;
					Если ГруппаДоступа.ЗначенияДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") <> Неопределено Тогда
						ЕстьУдаляемыеВидыДоступаСЗаданнымиЗначениямиДоступа = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СоставВидовДоступаИзменен
		   И (     НЕ НеУдалятьВидыДоступаКогдаЗаданыЗначенияДоступа
		       ИЛИ НЕ ЕстьУдаляемыеВидыДоступаСЗаданнымиЗначениямиДоступа ) Тогда
			// Обновление группы доступа.
			// 1. Удаление лишних видов доступа и значений доступа (если есть).
			ТекущийНомерСтроки = ГруппаДоступа.ВидыДоступа.Количество()-1;
			Пока ТекущийНомерСтроки >= 0 Цикл
				ТекущийВидДоступа = ГруппаДоступа.ВидыДоступа[ТекущийНомерСтроки].ВидДоступа;
				Если Профиль.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа, Предустановленный", ТекущийВидДоступа, Ложь)).Количество() = 0 Тогда
					СтрокиЗначенийВидаДоступа = ГруппаДоступа.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа));
					Для каждого СтрокаЗначения Из СтрокиЗначенийВидаДоступа Цикл
						ГруппаДоступа.ЗначенияДоступа.Удалить(СтрокаЗначения);
					КонецЦикла;
					ГруппаДоступа.ВидыДоступа.Удалить(ТекущийНомерСтроки);
				КонецЕсли;
				ТекущийНомерСтроки = ТекущийНомерСтроки - 1;
			КонецЦикла;
			// 2. Добавление новых видов доступа (если есть).
			Для каждого СтрокаВидаДоступа Из Профиль.ВидыДоступа Цикл
				Если НЕ СтрокаВидаДоступа.Предустановленный 
				   И ГруппаДоступа.ВидыДоступа.Найти(СтрокаВидаДоступа.ВидДоступа, "ВидДоступа") = Неопределено Тогда
					
					НоваяСтрока = ГруппаДоступа.ВидыДоступа.Добавить();
					НоваяСтрока.ВидДоступа     = СтрокаВидаДоступа.ВидДоступа;
					НоваяСтрока.ДоступРазрешен = СтрокаВидаДоступа.ДоступРазрешен;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ГруппаДоступа.Модифицированность() Тогда
			ЗаблокироватьДанныеДляРедактирования(ГруппаДоступа.Ссылка, ГруппаДоступа.ВерсияДанных);
			ГруппаДоступа.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
			ГруппаДоступа.Записать();
			ГруппаДоступаОбновлена = Истина;
			РазблокироватьДанныеДляРедактирования(ГруппаДоступа.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГруппаДоступаОбновлена;
	
КонецФункции

// Только для внутреннего использования
Процедура ПриИзмененииНаборовЗначенийДоступа(Знач СсылкаНаОбъект)
	
	СсылкиНаЗависимыеОбъекты = Новый Массив;
	УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект, СсылкиНаЗависимыеОбъекты);
	
	Для каждого СсылкаНаЗависимыйОбъект Из СсылкиНаЗависимыеОбъекты Цикл
		//
		Если Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаЗависимыйОбъект)).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
			// Изменение объекта не требуется
			ЗаписатьНаборыЗначенийДоступа(СсылкаНаЗависимыйОбъект);
		Иначе
			// Изменение объекта требуется
			Объект = СсылкаНаЗависимыйОбъект.ПолучитьОбъект();
			Таблица = УправлениеДоступомСобытия.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
			Если НЕ НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаЗависимыйОбъект, Таблица) Тогда
				Продолжить;
			КонецЕсли;
			Если ЭтоОбъектРучногоОбновленияЗависимыхНаборовЗначенийДоступа(СсылкаНаЗависимыйОбъект) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ЗаблокироватьДанныеДляРедактирования(СсылкаНаЗависимыйОбъект, Объект.ВерсияДанных);
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
				Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
				Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
				Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
				Объект.Записать();
				РазблокироватьДанныеДляРедактирования(СсылкаНаЗависимыйОбъект);
			Исключение
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При обновлении зависимого набора значений доступа объекта
						           |""%1"" возникла ошибка:
						           |
						           |%2'"),
						Строка(СсылкаНаЗависимыйОбъект),
						КраткоеПредставлениеОшибки));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЭтоОбъектРучногоОбновленияЗависимыхНаборовЗначенийДоступа(Ссылка)
	
	ХранилищеЗначения = ХранилищеОбщихНастроек.Загрузить("ОбъектыРучногоОбновленияЗависимыхНаборовЗначенийДоступа");
	ОбъектыРучногоОбновления = ?(ТипЗнч(ХранилищеЗначения) = Тип("ХранилищеЗначения"), ХранилищеЗначения.Получить(), Неопределено);
	
	Если ОбъектыРучногоОбновления = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючСеанса = УправлениеДоступомСерверПовтИсп.КлючСеанса();
	Отбор = Новый Структура("КлючСеанса, Ссылка", КлючСеанса, Ссылка);
	
	Возврат ОбъектыРучногоОбновления.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

// Только для внутреннего использования
Функция НаборыЗначенийДоступаРегистраИзменены(СсылкаНаОбъект, НаборЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("НовыеНаборы",    НаборЗаписей.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеНаборы.Объект,
	|	НовыеНаборы.НомерНабора,
	|	НовыеНаборы.ВидДоступа,
	|	НовыеНаборы.ЗначениеДоступа,
	|	НовыеНаборы.Чтение,
	|	НовыеНаборы.Добавление,
	|	НовыеНаборы.Изменение,
	|	НовыеНаборы.Удаление,
	|	НовыеНаборы.ВидДоступаБезГруппЗначенияДоступа,
	|	НовыеНаборы.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
	|	НовыеНаборы.ВидДоступаЧерезПраваПоЗначениямДоступа,
	|	НовыеНаборы.ВидДоступаПравоЧтения,
	|	НовыеНаборы.ВидДоступаПравоДобавления,
	|	НовыеНаборы.ВидДоступаПравоИзменения,
	|	НовыеНаборы.ТипОбъекта,
	|	НовыеНаборы.ТипЗначенияДоступа
	|ПОМЕСТИТЬ НовыеНаборы
	|ИЗ
	|	&НовыеНаборы КАК НовыеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеНаборы КАК НовыеНаборы
	|		ПО НаборыЗначенийДоступа.Объект = НовыеНаборы.Объект
	|			И НаборыЗначенийДоступа.НомерНабора = НовыеНаборы.НомерНабора
	|			И НаборыЗначенийДоступа.ВидДоступа = НовыеНаборы.ВидДоступа
	|			И НаборыЗначенийДоступа.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа
	|			И НаборыЗначенийДоступа.Чтение = НовыеНаборы.Чтение
	|			И НаборыЗначенийДоступа.Добавление = НовыеНаборы.Добавление
	|			И НаборыЗначенийДоступа.Изменение = НовыеНаборы.Изменение
	|			И НаборыЗначенийДоступа.Удаление = НовыеНаборы.Удаление
	|			И НаборыЗначенийДоступа.ВидДоступаБезГруппЗначенияДоступа = НовыеНаборы.ВидДоступаБезГруппЗначенияДоступа
	|			И НаборыЗначенийДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = НовыеНаборы.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
	|			И НаборыЗначенийДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа = НовыеНаборы.ВидДоступаЧерезПраваПоЗначениямДоступа
	|			И НаборыЗначенийДоступа.ВидДоступаПравоЧтения = НовыеНаборы.ВидДоступаПравоЧтения
	|			И НаборыЗначенийДоступа.ВидДоступаПравоДобавления = НовыеНаборы.ВидДоступаПравоДобавления
	|			И НаборыЗначенийДоступа.ВидДоступаПравоИзменения = НовыеНаборы.ВидДоступаПравоИзменения
	|			И НаборыЗначенийДоступа.ТипОбъекта = НовыеНаборы.ТипОбъекта
	|			И НаборыЗначенийДоступа.ТипЗначенияДоступа = НовыеНаборы.ТипЗначенияДоступа
	|ГДЕ
	|	НаборыЗначенийДоступа.Объект = &СсылкаНаОбъект
	|	И НовыеНаборы.Объект ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеНаборы КАК НовыеНаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
	|		ПО (НаборыЗначенийДоступа.Объект = НовыеНаборы.Объект)
	|			И (НаборыЗначенийДоступа.НомерНабора = НовыеНаборы.НомерНабора)
	|			И (НаборыЗначенийДоступа.ВидДоступа = НовыеНаборы.ВидДоступа)
	|			И (НаборыЗначенийДоступа.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа)
	|			И (НаборыЗначенийДоступа.Чтение = НовыеНаборы.Чтение)
	|			И (НаборыЗначенийДоступа.Добавление = НовыеНаборы.Добавление)
	|			И (НаборыЗначенийДоступа.Изменение = НовыеНаборы.Изменение)
	|			И (НаборыЗначенийДоступа.Удаление = НовыеНаборы.Удаление)
	|			И (НаборыЗначенийДоступа.ВидДоступаБезГруппЗначенияДоступа = НовыеНаборы.ВидДоступаБезГруппЗначенияДоступа)
	|			И (НаборыЗначенийДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = НовыеНаборы.ВидДоступаЕдинственныйДляТипаЗначенияДоступа)
	|			И (НаборыЗначенийДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа = НовыеНаборы.ВидДоступаЧерезПраваПоЗначениямДоступа)
	|			И (НаборыЗначенийДоступа.ВидДоступаПравоЧтения = НовыеНаборы.ВидДоступаПравоЧтения)
	|			И (НаборыЗначенийДоступа.ВидДоступаПравоДобавления = НовыеНаборы.ВидДоступаПравоДобавления)
	|			И (НаборыЗначенийДоступа.ВидДоступаПравоИзменения = НовыеНаборы.ВидДоступаПравоИзменения)
	|			И (НаборыЗначенийДоступа.ТипОбъекта = НовыеНаборы.ТипОбъекта)
	|			И (НаборыЗначенийДоступа.ТипЗначенияДоступа = НовыеНаборы.ТипЗначенияДоступа)
	|ГДЕ
	|	НаборыЗначенийДоступа.Объект ЕСТЬ NULL ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Только для внутреннего использования
Функция НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаОбъект, НовыеНаборы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтарыеНаборы", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "НаборыЗначенийДоступа"));
	Запрос.УстановитьПараметр("НовыеНаборы",  НовыеНаборы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеНаборы.НомерНабора,
	|	НовыеНаборы.ВидДоступа,
	|	НовыеНаборы.ЗначениеДоступа,
	|	НовыеНаборы.Чтение,
	|	НовыеНаборы.Добавление,
	|	НовыеНаборы.Изменение,
	|	НовыеНаборы.Удаление
	|ПОМЕСТИТЬ НовыеНаборы
	|ИЗ
	|	&НовыеНаборы КАК НовыеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеНаборы.НомерНабора,
	|	СтарыеНаборы.ВидДоступа,
	|	СтарыеНаборы.ЗначениеДоступа,
	|	СтарыеНаборы.Чтение,
	|	СтарыеНаборы.Добавление,
	|	СтарыеНаборы.Изменение,
	|	СтарыеНаборы.Удаление
	|ПОМЕСТИТЬ СтарыеНаборы
	|ИЗ
	|	&СтарыеНаборы КАК СтарыеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	СтарыеНаборы КАК СтарыеНаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеНаборы КАК НовыеНаборы
	|		ПО СтарыеНаборы.НомерНабора = НовыеНаборы.НомерНабора
	|			И СтарыеНаборы.ВидДоступа = НовыеНаборы.ВидДоступа
	|			И СтарыеНаборы.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа
	|			И СтарыеНаборы.Чтение = НовыеНаборы.Чтение
	|			И СтарыеНаборы.Добавление = НовыеНаборы.Добавление
	|			И СтарыеНаборы.Изменение = НовыеНаборы.Изменение
	|			И СтарыеНаборы.Удаление = НовыеНаборы.Удаление
	|ГДЕ
	|	НовыеНаборы.НомерНабора ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	НовыеНаборы КАК НовыеНаборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеНаборы КАК СтарыеНаборы
	|		ПО (СтарыеНаборы.НомерНабора = НовыеНаборы.НомерНабора)
	|			И (СтарыеНаборы.ВидДоступа = НовыеНаборы.ВидДоступа)
	|			И (СтарыеНаборы.ЗначениеДоступа = НовыеНаборы.ЗначениеДоступа)
	|			И (СтарыеНаборы.Чтение = НовыеНаборы.Чтение)
	|			И (СтарыеНаборы.Добавление = НовыеНаборы.Добавление)
	|			И (СтарыеНаборы.Изменение = НовыеНаборы.Изменение)
	|			И (СтарыеНаборы.Удаление = НовыеНаборы.Удаление)
	|ГДЕ
	|	СтарыеНаборы.НомерНабора ЕСТЬ NULL ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции
