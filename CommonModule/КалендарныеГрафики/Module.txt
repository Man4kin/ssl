////////////////////////////////////////////////////////////////////////////////
// ФУНЦИИ БИБЛИОТЕКИ

// Функция возвращает массив дат, которые отличается указанной даты на количество дней,
// входящих в указанный график
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата
//	МассивДней		- массив с количеством дней, на которые нужно увеличить дату начала, тип Массив,Число
//	РассчитыватьСледующуюДатуОтПредыдущей	- нужно ли рассчитывать следующую дату от предыдущей или
//											  все даты рассчитываются от переданной даты
//
// Возвращаемое значение
//	Массив		- массив дат, увеличенных на количество дней, входящих в график
//
Функция ПолучитьМассивДатПоКалендарю(Знач Календарь, Знач ДатаОт, Знач МассивДней, Знач РассчитыватьСледующуюДатуОтПредыдущей = Ложь) Экспорт
	
	ДатаОт = НачалоДня(ДатаОт);
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаДат.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	КоличествоДней = 0;
	НомерСтроки = 0;
	Для Каждого СтрокаДней Из МассивДней Цикл
		КоличествоДней = КоличествоДней + СтрокаДней;
		
		Строка = ТаблицаДат.Добавить();
		Строка.ИндексСтроки			= НомерСтроки;
		Если РассчитыватьСледующуюДатуОтПредыдущей Тогда
			Строка.КоличествоДней	= КоличествоДней;
		Иначе
			Строка.КоличествоДней	= СтрокаДней;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Календарь",	Календарь);
	Запрос.УстановитьПараметр("ДатаОт",		ДатаОт);
	Запрос.УстановитьПараметр("Таблица",	ТаблицаДат);
	
	// Алгоритм работает следующим образом:
	//  Получаем для ДатаОт каким днем с начала года эта дата является
	//  К этому дню прибавляем количество дней с начала года, которое должно быть у конечной даты
	//  Получаем максимальный номер дня в году для этого года
	//  Проверяем, не превышает ли полученное число количество дней
	//  Если превышает, используем следующий год, если нет, то текущий
	//  Ищем, минимальную дату, которая соответствует нужному нам дню в году
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДат.ИндексСтроки,
	|	ТаблицаДат.КоличествоДней
	|ПОМЕСТИТЬ ВТ_ТаблицаДат
	|ИЗ
	|	&Таблица КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода) КАК КоличествоДнейВсего
	|ПОМЕСТИТЬ ВТ_КоличествоРабочихДнейВГоду
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК ГрафикЗаГод
	|ГДЕ
	|	ГрафикЗаГод.Календарь = &Календарь
	|	И ГрафикЗаГод.Год = ГОД(&ДатаОт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикЗаГод.Год,
	|	ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода,
	|	КоличествоРабочихДнейВГоду.КоличествоДнейВсего
	|ПОМЕСТИТЬ ВТ_КалендарныйГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК ГрафикЗаГод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоРабочихДнейВГоду КАК КоличествоРабочихДнейВГоду
	|		ПО (ГрафикЗаГод.Календарь = &Календарь)
	|			И (ГрафикЗаГод.ДатаГрафика = &ДатаОт)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоличествоДнейВГрафикеСНачалаГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныйГрафик.ИндексСтроки,
	|	КалендарныйГрафик.КоличествоДней,
	|	ЕСТЬNULL(КалендарныйГрафик.ДатаПоКалендарю, НЕОПРЕДЕЛЕНО) КАК ДатаПоКалендарю
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГрафикЗаГодДатаОт.ИндексСтроки КАК ИндексСтроки,
	|		ГрафикЗаГодДатаОт.КоличествоДней КАК КоличествоДней,
	|		МИНИМУМ(ГрафикЗаГод.ДатаГрафика) КАК ДатаПоКалендарю
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДат.ИндексСтроки КАК ИндексСтроки,
	|			ТаблицаДат.КоличествоДней КАК КоличествоДней,
	|			ВЫБОР
	|				КОГДА КалендарныйГрафик.КоличествоДнейВсего ЕСТЬ NULL 
	|						ИЛИ КалендарныйГрафик.КоличествоДнейВсего >= КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода + ТаблицаДат.КоличествоДней
	|					ТОГДА ГОД(&ДатаОт)
	|				ИНАЧЕ ГОД(&ДатаОт) + 1
	|			КОНЕЦ КАК ГодДатыОкончания,
	|			КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода + ТаблицаДат.КоличествоДней - ВЫБОР
	|				КОГДА КалендарныйГрафик.КоличествоДнейВсего < КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода + ТаблицаДат.КоличествоДней
	|					ТОГДА КалендарныйГрафик.КоличествоДнейВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК КоличествоДнейДляДатыПо
	|		ИЗ
	|			ВТ_ТаблицаДат КАК ТаблицаДат
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КалендарныйГрафик КАК КалендарныйГрафик
	|				ПО (ИСТИНА)) КАК ГрафикЗаГодДатаОт
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикЗаГод
	|			ПО (ГрафикЗаГод.Календарь = &Календарь)
	|				И ГрафикЗаГодДатаОт.КоличествоДнейДляДатыПо = ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода
	|				И ГрафикЗаГодДатаОт.ГодДатыОкончания = ГрафикЗаГод.Год
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикЗаГодДатаОт.ИндексСтроки,
	|		ГрафикЗаГодДатаОт.КоличествоДней) КАК КалендарныйГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	КалендарныйГрафик.ИндексСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаПоКалендарю = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'В календаре ''%1'' с даты %2 нет указанного количества рабочих дней!'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке,
				Календарь, Формат(ДатаОт, "ДЛФ=D"));
		КонецЕсли;
		
		МассивДат.Добавить(Выборка.ДатаПоКалендарю);
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

// Функция возвращает дату, которая отличается указанной даты на количество дней,
// входящих в указанный график
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата
//	КоличествоДней	- количество дней, на которые нужно увеличить дату начала, тип Число
//
// Возвращаемое значение
//	Дата			- дата, увеличенная на количество дней, входящих в график
//
Функция ПолучитьДатуПоКалендарю(Знач Календарь, Знач ДатаОт, Знач КоличествоДней) Экспорт
	
	ДатаОт = НачалоДня(ДатаОт);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	КонецЕсли;
	
	МассивДней = Новый Массив;
	МассивДней.Добавить(КоличествоДней);
	
	МассивДат = ПолучитьМассивДатПоКалендарю(Календарь, ДатаОт, МассивДней);
	
	Возврат МассивДат[0];
	
КонецФункции

// Функция определяет количество дней, входящих в календарь, для указанного периода
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаНачала		- дата начала периода
//	ДатаОкончания	- дата окончания периода
//
// Возвращаемое значение
//	Массив		- массив дат, увеличенных на количество дней, входящих в график
//
Функция ПолучитьРазностьДатПоКалендарю(Знач Календарь, Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	ДатаНачала		= НачалоДня(ДатаНачала);
	ДатаОкончания	= НачалоДня(ДатаОкончания);
	
	Если ДатаНачала = ДатаОкончания Тогда
		Возврат 0;
	КонецЕсли;
	
	РазныеГода = Год(ДатаНачала) <> Год(ДатаОкончания);
	
	Запрос = Новый Запрос;
	
	МассивДатНачала = Новый Массив;
	МассивДатНачала.Добавить(ДатаНачала);
	Если РазныеГода Тогда
		МассивДатНачала.Добавить(НачалоДня(КонецГода(ДатаНачала)));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Календарь",			Календарь);
	Запрос.УстановитьПараметр("МассивДатНачала",	МассивДатНачала);
	Запрос.УстановитьПараметр("ГодДатыНачала",		Год(ДатаНачала));
	
	Запрос.УстановитьПараметр("ДатаОкончания",		ДатаОкончания);
	Запрос.УстановитьПараметр("ГодДатыОкончания",	Год(ДатаОкончания));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДней,
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И (КалендарныеГрафики.Год = &ГодДатыНачала
	|				И КалендарныеГрафики.ДатаГрафика В (&МассивДатНачала)
	|			ИЛИ КалендарныеГрафики.Год = &ГодДатыОкончания
	|				И КалендарныеГрафики.ДатаГрафика = &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика";
	ТаблицаДней = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДней.Количество() < ?(РазныеГода, 3, 2) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не заполнен календарь ''%1'' за период %2!'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеОбОшибке,
			Календарь, ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания)));
	КонецЕсли;
	
	КоличествоДнейДатыНачала = ТаблицаДней[0].КоличествоДней;
	КоличествоДнейДатыОкончания = ТаблицаДней[?(РазныеГода, 2, 1)].КоличествоДней + ?(РазныеГода, ТаблицаДней[1].КоличествоДней, 0);
	
	Возврат КоличествоДнейДатыОкончания - КоличествоДнейДатыНачала;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура создает в справочнике Календари календарь, соответствующий производственному
// календарю Российской Федерации на 2010 год, если в справочнике нет ни одного календаря
//
Процедура СоздатьПроизводственныйКалендарьНа2010Год() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Календари.Ссылка
	|ИЗ
	|	Справочник.Календари КАК Календари";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПроизводственныйКалендарь = Справочники.Календари.СоздатьЭлемент();
	ПроизводственныйКалендарь.Наименование = "Производственный календарь";
	ПроизводственныйКалендарь.Записать();
	
	// Записываем данные за 2010 год
	
	РабочиеДни = Новый Массив;
	ПраздничныеДни = Новый Массив;
	
	// праздники РФ
	ПраздничныеДни.Добавить(Дата(2010, 1, 1));
	ПраздничныеДни.Добавить(Дата(2010, 1, 2));
	ПраздничныеДни.Добавить(Дата(2010, 1, 3));
	ПраздничныеДни.Добавить(Дата(2010, 1, 4));
	ПраздничныеДни.Добавить(Дата(2010, 1, 5));
	ПраздничныеДни.Добавить(Дата(2010, 1, 7));
	ПраздничныеДни.Добавить(Дата(2010, 2, 23));
	ПраздничныеДни.Добавить(Дата(2010, 3, 8));
	ПраздничныеДни.Добавить(Дата(2010, 5, 1));
	ПраздничныеДни.Добавить(Дата(2010, 5, 9));
	ПраздничныеДни.Добавить(Дата(2010, 6, 12));
	ПраздничныеДни.Добавить(Дата(2010, 11, 4));
	
	// Переносы праздников с выходных дней
	ПраздничныеДни.Добавить(Дата(2010, 1, 6));
	ПраздничныеДни.Добавить(Дата(2010, 1, 8));
	ПраздничныеДни.Добавить(Дата(2010, 2, 22));
	РабочиеДни.Добавить(Дата(2010, 2, 27));
	ПраздничныеДни.Добавить(Дата(2010, 5, 3));
	ПраздничныеДни.Добавить(Дата(2010, 5, 10));
	ПраздничныеДни.Добавить(Дата(2010, 6, 14));
	ПраздничныеДни.Добавить(Дата(2010, 11, 5));
	РабочиеДни.Добавить(Дата(2010, 11, 7));
	
	НомерГода = 2010;
	
	НаборЗаписей = РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Календарь.Установить(ПроизводственныйКалендарь.Ссылка);
	НаборЗаписей.Отбор.Год.Установить(НомерГода);
	
	КоличествоРабочихДнейСНачалаГода = 0;
	
	Для НомерМесяца = 1 По 12 Цикл
		Для НомерДня = 1 По День(КонецМесяца(Дата(НомерГода, НомерМесяца, 1))) Цикл
			ДатаГрафика = Дата(НомерГода, НомерМесяца, НомерДня);
			
			ДеньВключенВГрафик = ПраздничныеДни.Найти(ДатаГрафика) = Неопределено
				И (РабочиеДни.Найти(ДатаГрафика) <> Неопределено ИЛИ ДеньНедели(ДатаГрафика) <= 5);
			
			Если ДеньВключенВГрафик Тогда
				КоличествоРабочихДнейСНачалаГода = КоличествоРабочихДнейСНачалаГода + 1;
			КонецЕсли;
			
			Строка = НаборЗаписей.Добавить();
			Строка.Календарь							= ПроизводственныйКалендарь.Ссылка;
			Строка.Год									= НомерГода;
			Строка.ДатаГрафика							= ДатаГрафика;
			Строка.ДеньВключенВГрафик					= ДеньВключенВГрафик;
			Строка.КоличествоДнейВГрафикеСНачалаГода	= КоличествоРабочихДнейСНачалаГода;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры