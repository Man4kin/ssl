////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обработчик события ПриСозданииНаСервере.
// Выполняет установки параметров функциональных опций формы - требуется
// для формирования командного интерфейса формы.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
		ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава)
		ИЛИ РольДоступна(Метаданные.Роли.ИспользованиеДополнительныхОтчетовИОбработок)
		ИЛИ РольДоступна(Метаданные.Роли.ДобавлениеИзменениеДополнительныхОтчетовИОбработок) Тогда
		
		ИмяФормыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
		ПолноеИмяОбъектаМетаданных = ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];
		
		Если	ЭтоФормаОбъекта(ПолноеИмяОбъектаМетаданных, Форма.ИмяФормы) Тогда
			Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипФормыСДополнительнымиОтчетамиИОбработками", "ФормаОбъекта"));
		Иначе
			Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипФормыСДополнительнымиОтчетамиИОбработками", "ФормаСписка"));
		КонецЕсли;
		
		Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипОбъектаКонфигурации", ПолноеИмяОбъектаМетаданных));
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирования печатной формы по внешнему источнику.
// ИсточникДанных - СправочникСсылка.ДополнительныеОтчетыИОбработки - ссылка на внешнюю обработку
// ПараметрыИсточника - Структура с ключами:
//		БезопасныйРежим - булево - используется ли безопасный режим
//		ИдентификаторКоманды - строка- список макетов, перечисленных через запятую
//		ОбъектыНазначения - массив - массив ссылок на объекты назначения
//
// параметры, заполняемые в функции (описание см. в модуле УправлениеПечатьюПереопределяемый)
// КоллекцияПечатныхФорм
// ОбъектыПечати
// ПараметрыВывода
//
Процедура ПечатьПоВнешнемуИсточнику(ИсточникДанных,
								ПараметрыИсточника,
								КоллекцияПечатныхФорм,
								ОбъектыПечати,
								ПараметрыВывода) Экспорт
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ПараметрыИсточника.ИдентификаторКоманды);
	
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	
	ОбъектыПечати = Новый СписокЗначений;
	
	ВнешняяОбработкаОбъект = ПолучитьОбъектВнешнейОбработки(ИсточникДанных, ПараметрыИсточника.БезопасныйРежим);
	
	ВнешняяОбработкаОбъект.Печать(
					ПараметрыИсточника.ОбъектыНазначения,
					КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	// Проверим, все ли макеты были сформированы
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если Стр.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
										Стр.ИмяМакета);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		Стр.ТабличныйДокумент.КоличествоЭкземпляров = Стр.Экземпляров;
	КонецЦикла;

КонецПроцедуры

Функция ЭтоФормаОбъекта(ПолноеИмяОбъектаМетаданных, ИмяФормы) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных.ОсновнаяФормаОбъекта.ПолноеИмя() = ИмяФормы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обработчик экземпляра регламентного задания ЗапускОбработок.
// Запускает обработчик глобальной обработки по регламентному заданию,
// с указанным идентификатором команды.
//
// Параметры
// ВнешняяОбработка		- СправочникСсылка.ДополнительныеОтчетыИОбработки
// ИдентификаторКоманды - Строка - идентификатор выполняемой команды
//
Процедура ВыполнитьОбработкуПоРегламентномуЗаданию(ВнешняяОбработка, ИдентификаторКоманды) Экспорт
	
	НачалоВыполненияОбработки(ВнешняяОбработка, ИдентификаторКоманды);
		
	ВыполнитьОбработкуНепосредственно(ВнешняяОбработка, ИдентификаторКоманды, ВнешняяОбработка.БезопасныйРежим);
	
	ОкончаниеРаботыОбработки(ВнешняяОбработка, ИдентификаторКоманды);
	
КонецПроцедуры

// Функция возвращает таблицу значений со списком объектов метаданных,
// к которым может быть применена обработка переданного вида.
// Список объектов метаданных берется из общий команд, соответствующих
// виду обработки. Для глобальных обработок возвращается пустой набор.
// Параметры
// Вид - Перечисление.ВидыДополнительныхОтчетовИОбработок - вид внешней обработки
// Возвращаемое значение
// ТаблицаЗначений с колонками
//		ПолноеИмяОбъектаМетаданных - строка - полное имя объекта метаданных, например "Справочник.Валюты"
//		Класс	  - строка - класс метаданных, например "Справочник"
//		Объект	  - строка - имя объекта метаданных, например "Валюты"
//
Функция ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(Вид) Экспорт
	
	Назначение = Новый ТаблицаЗначений;
	Назначение.Колонки.Добавить("ПолноеИмяОбъектаМетаданных");
	Назначение.Колонки.Добавить("Класс");
	Назначение.Колонки.Добавить("Объект");
	
	Команда = Неопределено;
	
	Если		Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
	ИначеЕсли	Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
	ИначеЕсли	Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
	ИначеЕсли	Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	КонецЕсли;
	
	Если Команда <> Неопределено Тогда
		
		Для Каждого Тип Из Команда.ТипПараметраКоманды.Типы() Цикл
			ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных, ".");
			НовоеНазначение = Назначение.Добавить();
			НовоеНазначение.ПолноеИмяОбъектаМетаданных	= ПолноеИмяОбъектаМетаданных;
			НовоеНазначение.Класс		= РазделеннаяСтрока[0];
			НовоеНазначение.Объект		= РазделеннаяСтрока[1];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Назначение;
	
КонецФункции

// Проверяет, что обработка относится к категории глобальных.
// Параметры
// Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
// Возвращаемое значение
//	Истина - обработка относится к категории глобальных
//	Ложь   - обработка относится к категории назначаемых
//
Функция ПроверитьГлобальнаяОбработка(Вид) Экспорт
	
	Возврат (Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка)
		ИЛИ (Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
КонецФункции

// Проверяет, что обработка относится к категории назначаемых для объектов
// Параметры
// Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
// Возвращаемое значение
//	Истина - обработка относится к категории назначаемых
//	Ложь   - обработка относится к категории глобальных
//
Функция ПроверитьНазначаемаяОбработка(Вид) Экспорт
	
	Возврат Не ПроверитьГлобальнаяОбработка(Вид);
	
КонецФункции

// Выполняет подключение внешней обработки. После подключения обработка
// становится известной в системе под определенным именем. После этого
// можно открывать форму обработки.
//
// Параметры
// ВнешняяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки
// БезопасныйРежим - Булево - требуется ли запускать обработку в безопасном режиме
//
// Возвращаемое значение
// Имя обработки - строка - имя обработки известное системе
//
Функция ПодключитьВнешнююОбработку(ВнешняяОбработка, БезопасныйРежим) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанныеОбработки = ВнешняяОбработка.ПолучитьОбъект().ХранилищеОбработки.Получить();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	
	Если ВнешняяОбработка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
	 ИЛИ ВнешняяОбработка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат ВнешниеОтчеты.Подключить(АдресВоВременномХранилище,, БезопасныйРежим);
	Иначе
		Возврат ВнешниеОбработки.Подключить(АдресВоВременномХранилище,, БезопасныйРежим);
	КонецЕсли;
	
КонецФункции

// Создает объект обработки и передает ему управление через известный интерфейс.
// Для назначаемых обработок так же указываются объекты назначения. Из некоторых обработок
// происходит получение результата выполнения.
// Параметры
// ВнешняяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки
// ИдентификаторКоманды - Строка - идентификатор одной из команд обработки
// БезопасныйРежим - Булево - требуется ли запускать обработку в безопасном режиме
// ОбъектыНазначения - Массив - объекты назначения обработки
// РезультатВыполнения - Массив - используется для передачи результата выполнения обработки
//
Процедура ВыполнитьОбработкуНепосредственно(
	ВнешняяОбработкаСсылка,
	ИдентификаторКоманды,
	БезопасныйРежим,
	ОбъектыНазначения = Неопределено,
	РезультатВыполнения = Неопределено
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяОбработка = ПолучитьОбъектВнешнейОбработки(ВнешняяОбработкаСсылка, БезопасныйРежим);
	
	ТипОбработки = ВнешняяОбработкаСсылка.Вид;
	
	Если ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
	 ИЛИ ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды);
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		СозданныеОбъекты = Новый Массив;
		
		ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты);
		
		РезультатВыполнения = Новый Массив;
		
		Для Каждого СозданныйОбъект Из СозданныеОбъекты Цикл
			Тип = ТипЗнч(СозданныйОбъект);
			Если РезультатВыполнения.Найти(Тип) = Неопределено Тогда
				РезультатВыполнения.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		
		ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		
		РезультатВыполнения = Новый Массив;
		
		Для Каждого ИзмененныйОбъект Из ОбъектыНазначения Цикл
			Тип = ТипЗнч(ИзмененныйОбъект);
			Если РезультатВыполнения.Найти(Тип) = Неопределено Тогда
				РезультатВыполнения.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		ВнешняяОбработка.Печать(ИдентификаторКоманды, ОбъектыНазначения);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид обработки по строковому представлению
// Параметры
// СтроковоеПредставление - Строка - строковое представление вида обработки
// Возвращаемое значение
// ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
//
Функция ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СтроковоеПредставление) Экспорт
	
	Если	  СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
КонецФункции

// Выполняет создание экземпляра внешней обработки (отчета)
// Параметры
//  ВнешняяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки
//  БезопасныйРежим - Булево - требуется ли запускать обработку в безопасном режиме
// Возвращаемое значение
//  строка - имя обработки известное системе
//
Функция ПолучитьОбъектВнешнейОбработки(ВнешняяОбработкаСсылка, БезопасныйРежим) Экспорт
	
	ВнешняяОбработкаОбъект = ВнешняяОбработкаСсылка.ПолучитьОбъект();
	
	ДвоичныеДанныеОбработки = ВнешняяОбработкаОбъект.ХранилищеОбработки.Получить();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	
	Если ВнешняяОбработкаОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
	 ИЛИ ВнешняяОбработкаОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат ВнешниеОтчеты.Создать(ИмяВременногоФайла, БезопасныйРежим);
	Иначе
		Возврат ВнешниеОбработки.Создать(ИмяВременногоФайла, БезопасныйРежим);
	КонецЕсли;
	
КонецФункции

// Возвращает имя рабочего места команды
//
Функция ПолучитьИмяРабочегоМеста(ИмяКоманды) Экспорт
	
	ТаблицаКоманд = ДополнительныеОтчетыИОбработкиПереопределяемый.ПолучитьОбщиеКомандыДополнительныхОбработок();
	
	Найденные = ТаблицаКоманд.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	
	Если Найденные.Количество() = 0 Тогда
		ТаблицаКоманд = ДополнительныеОтчетыИОбработкиПереопределяемый.ПолучитьОбщиеКомандыДополнительныхОтчетов();
		Найденные = ТаблицаКоманд.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	КонецЕсли;
	
	Возврат Найденные[0].ИмяРабочегоМеста;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура НачалоВыполненияОбработки(ДополнительнаяОбработкаСсылка, ИдентификаторКоманды)
	
	ТекстСообщения = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запуск обработчика. Команда: %1.'"),
			ИдентификаторКоманды);
	
	ЗаписатьСобытиеВЖурналРегистрации(ДополнительнаяОбработкаСсылка, ТекстСообщения);
	
КонецПроцедуры

Процедура ОкончаниеРаботыОбработки(ДополнительнаяОбработкаСсылка, ИдентификаторКоманды)
	
	ТекстСообщения = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возврат из обработчика. Команда: %1.'"),
			ИдентификаторКоманды);
	
	ЗаписатьСобытиеВЖурналРегистрации(ДополнительнаяОбработкаСсылка, ТекстСообщения);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеВЖурналРегистрации(ДополнительнаяОбработкаСсылка, ТекстСообщения)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Дополнительные отчеты и обработки'"),
				УровеньЖурналаРегистрации.Информация,
				ДополнительнаяОбработкаСсылка.Метаданные(),
				ДополнительнаяОбработкаСсылка,
				ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Процедура обновления записей о доступности дополнительных обработок
//
Процедура ОбновитьПользовательскиеНастройкиДоступаКОбработкам() Экспорт
	
	ПользователиСДопОбработками = ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам();
	
	ТаблицаЗаписей = ПолучитьТаблицуЗаписей(ПользователиСДопОбработками);
	
	Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
		НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		ЗаписиПоБыстромуДоступу = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Пользователь,Доступно", Пользователь, Истина));
		Для Каждого ЗаписьБыстрогоДоступа Из ЗаписиПоБыстромуДоступу Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДополнительныйОтчетИлиОбработка = ЗаписьБыстрогоДоступа.Обработка;
			НоваяЗапись.ИдентификаторКоманды			= ЗаписьБыстрогоДоступа.Идентификатор;
			НоваяЗапись.Пользователь					= Пользователь;
			НоваяЗапись.Доступно						= Истина;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуЗаписей(ПользователиСДопОбработками)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	               |	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	               |		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ОбработкиСКомандами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Обработка",     Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	ТаблицаЗаписей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписей.Колонки.Добавить("Пользователь",  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗаписей.Колонки.Добавить("Доступно",      Новый ОписаниеТипов("Булево"));
	
	Для Каждого ОбработкаКоманда Из ОбработкиСКомандами Цикл
		Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Обработка     = ОбработкаКоманда.Обработка;
			НоваяСтрока.Идентификатор = ОбработкаКоманда.Идентификатор;
			НоваяСтрока.Пользователь  = Пользователь;
			НоваяСтрока.Доступно   = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	               |	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор,
	               |	Пользователи.Ссылка КАК Пользователь,
	               |	ПользовательскиеНастройкиДоступаКОбработкам.Доступно КАК Доступно
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	               |		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	               |		ПО (ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка = ДополнительныеОтчетыИОбработки.Ссылка)
	               |			И (ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды = КомандыДополнительныхОтчетовИОбработок.Идентификатор)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО (Пользователи.Ссылка = ПользовательскиеНастройкиДоступаКОбработкам.Пользователь)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ИсключенияПерсональногоДоступа = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ИсключениеПерсональногоДоступа Из ИсключенияПерсональногоДоступа Цикл
		
		Строка = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Обработка,Идентификатор,Пользователь",
												ИсключениеПерсональногоДоступа.Обработка,
												ИсключениеПерсональногоДоступа.Идентификатор,
												ИсключениеПерсональногоДоступа.Пользователь))[0];
		
		Строка.Доступно = НЕ ИсключениеПерсональногоДоступа.Доступно; // ранее это значение было исключением доступа, инвертируем его
		
	КонецЦикла;
	
	Возврат ТаблицаЗаписей;
	
КонецФункции

Функция ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам()
	
	Результат = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ Ссылка
					|ИЗ
					|	Справочник.Пользователи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Пользователь Из ВсеПользователи Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ <> Неопределено Тогда
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ИспользованиеДополнительныхОтчетовИОбработок)
			 ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ДобавлениеИзменениеДополнительныхОтчетовИОбработок)
			 ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				Результат.Добавить(Пользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Пользователь
					|ИЗ
					|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам
					|ГДЕ
					|	Пользователь НЕ В (&МассивПользователей)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("МассивПользователей", Результат);
	
	ПользователиВРегистре = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Для Каждого Пользователь Из ПользователиВРегистре Цикл
		Результат.Добавить(Пользователь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные функции, используются в общем модуле ДополнительныеОтчетыИОбработкиПереопределяемый
//

Функция ПолучитьТаблицуКоманд() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ИмяКоманды", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ИмяРабочегоМеста", Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, ИмяКоманды, ИмяРабочегоМеста) Экспорт
	
	НоваяСтрока = ТаблицаКоманд.Добавить();
	НоваяСтрока.ИмяКоманды = ИмяКоманды;
	НоваяСтрока.ИмяРабочегоМеста = ИмяРабочегоМеста;
	
КонецПроцедуры
