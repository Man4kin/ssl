////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры подсистемы 

// Стандартный обработчик оповещения для форм выполнения задач.
// Для вызова из обработчика события формы ОбработкаОповещения.
//
// Параметры
//  ЭтаФорма    - УправляемаяФорма  - форма выполнения задачи.
//  ИмяСобытия  - Строка            - имя события.
//  Параметр    - произвольный тип  - параметр события
//  Источник    - произвольный тип  - источник события.
//
Процедура ФормаЗадачиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ЗадачаПеренаправлена" Тогда
		Если НЕ Форма.Модифицированность 
			И (Параметр = Форма.Объект.Ссылка ИЛИ (ТипЗнч(Параметр) = Тип("Массив") 
			И Параметр.Найти(Форма.Объект.Ссылка) <> Неопределено)) Тогда
			Форма.Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗадачаИзменена" Тогда
		Если НЕ Форма.Модифицированность 
			И (Параметр = Форма.Объект.Ссылка ИЛИ (ТипЗнч(Параметр) = Тип("Массив") 
			И Параметр.Найти(Форма.Объект.Ссылка) <> Неопределено)) Тогда
			Форма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокЗадачПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Если Копирование Тогда
		Задача = Элемент.ТекущаяСтрока;
		Если НЕ ЗначениеЗаполнено(Задача) Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Основание", Задача);
	КонецЕсли;
	СоздатьЗадание(Форма, ПараметрыФормы);
	Отказ = Истина;
	
КонецПроцедуры

Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = НЕ ОткрытьФормуВыполненияЗадачи(ВыбраннаяСтрока);
КонецПроцедуры

Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ) Экспорт
	Отказ = ОткрытьФормуВыполненияЗадачи(Элемент.ТекущаяСтрока);
КонецПроцедуры

// Открыть форму выполнения задачи, которую предоставляет бизнес-процесс.  
//
Функция ОткрытьФормуВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	ПараметрыФормы = БизнесПроцессыИЗадачиСервер.ПолучитьФормуВыполненияЗадачи(ЗадачаСсылка);
	ИмяФормыВыполненияЗадачи = "";
	Результат = ПараметрыФормы.Свойство("ИмяФормы", ИмяФормыВыполненияЗадачи);
	Если Результат Тогда
		ОткрытьФорму(ИмяФормыВыполненияЗадачи, ПараметрыФормы.ПараметрыФормы);
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

// Записать и закрыть форму выполнения задачи.
//
// Параметры
//  Форма  - УправляемаяФорма - форма выполнения задачи.
//  ВыполнитьЗадачу  - Булево - задача записывается в режиме выполнения.
//
// Возвращаемое значение:
//   Булево   - Истина, если запись прошла успешно.
//
Функция ЗаписатьИЗакрытьВыполнить(Форма, ВыполнитьЗадачу = Ложь) Экспорт
	
	ОчиститьСообщения();
	
	НовыйОбъект = НЕ Форма.Объект.Ссылка.Пустая();
	Если НЕ Форма.НачальныйПризнакВыполнения И ВыполнитьЗадачу Тогда
		
		Если НЕ Форма.Записать(Новый Структура("ВыполнитьЗадачу", Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Задача выполнена'"),
			ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
			Строка(Форма.Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Оповестить("ЗадачаВыполнена", Форма.Объект.Ссылка);
			
	Иначе
		Если НЕ Форма.Записать() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НовыйОбъект Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Задача создана'"),
				ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
				Строка(Форма.Объект.Ссылка),
				БиблиотекаКартинок.Информация32);
			Оповестить("ЗадачаИзменена", Форма.Объект.Ссылка);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Задача изменена'"),
				ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
				Строка(Форма.Объект.Ссылка),
				БиблиотекаКартинок.Информация32);
			Оповестить("ЗадачаИзменена", Форма.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Форма.Закрыть();
	Возврат Истина;
	
КонецФункции

// Открыть форму для ввода нового задания.
//
Процедура СоздатьЗадание(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
	ОткрытьФорму("БизнесПроцесс.Задание.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
КонецПроцедуры	

Процедура ПеренаправитьЗадачи(МассивЗадач, ВладелецФорма) Экспорт

	Если МассивЗадач = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Не выбраны задачи.'"));
		Возврат;
	КонецЕсли;
		
	ЗадачиМогутБытьПеренаправлены = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачи(МассивЗадач, Неопределено, Истина);
	Если НЕ ЗадачиМогутБытьПеренаправлены И МассивЗадач.Количество() = 1 Тогда
		Предупреждение(НСтр("ru = 'Невозможно перенаправить уже выполненную задачу.'"));
		Возврат;
	КонецЕсли;
		
	Результат = ОткрытьФормуМодально("Задача.ЗадачаИсполнителя.Форма.ПеренаправитьЗадачи",
		Новый Структура("Задача,КоличествоЗадач,ЗаголовокФормы", 
		МассивЗадач[0], МассивЗадач.Количество(), 
		?(МассивЗадач.Количество() > 1, НСтр("ru = 'Перенаправить задачи'"), НСтр("ru = 'Перенаправить задачу'"))), 
		ВладелецФорма);
		
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивЗадач.Количество() > 10 Тогда
		Состояние(НСтр("ru = 'Перенаправление задач'"),, 
			НСтр("ru = 'Выполняется перенаправление задач...'"));
	КонецЕсли;
	МассивПеренаправленныхЗадач = Неопределено;
	ЗадачиПеренаправлены = БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачи(МассивЗадач, Результат, Ложь, МассивПеренаправленныхЗадач);
	Если МассивЗадач.Количество() > 1 Тогда
		Если ЗадачиПеренаправлены Тогда
			Состояние(НСтр("ru = 'Перенаправление задач'"),, 
				НСтр("ru = 'Задачи перенаправлены.'"));
		Иначе
			Состояние(НСтр("ru = 'Перенаправление задач'"),,
				НСтр("ru = 'Не все задачи перенаправлены. Пропущены задачи, отмеченные как выполненные.'"));
		КонецЕсли;
	Иначе
		Задача = МассивПеренаправленныхЗадач[0];
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Задача перенаправлена'"),
			ПолучитьНавигационнуюСсылку(Задача),
			Строка(Задача));
	КонецЕсли;
	Оповестить("ЗадачаИзменена", МассивЗадач);
	Оповестить("ЗадачаПеренаправлена", МассивЗадач);
	
КонецПроцедуры

// Открыть форму с дополнительной информацией о задаче.  
//
Функция ОткрытьДопИнформациюОЗадаче(Знач ЗадачаСсылка) Экспорт
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.Дополнительно", 
		Новый Структура("Ключ", ЗадачаСсылка));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура СписокБизнесПроцессовПометкаУдаления(Список) Экспорт
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено ИЛИ ВыделенныеСтроки.Количество() <= 0 Тогда
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;	
	Результат = Вопрос(НСтр("ru = 'Изменить пометку удаления?'"), РежимДиалогаВопрос.ДаНет);
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	БизнесПроцессСсылка = БизнесПроцессыИЗадачиСервер.ПометитьНаУдалениеБизнесПроцессы(ВыделенныеСтроки);
	Список.Обновить();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Пометка удаления изменена.'"), 
		?(БизнесПроцессСсылка <> Неопределено, ПолучитьНавигационнуюСсылку(БизнесПроцессСсылка), ""),
		?(БизнесПроцессСсылка <> Неопределено, Строка(БизнесПроцессСсылка), ""));
КонецПроцедуры

