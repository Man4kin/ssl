////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНУТРЕННИЕ ФУНКЦИИ
//
// Модуль содержит только внутренние функции для повторно используемых 
// возвращаемых значений следующих механизмов:
// - механизм регистрации объектов на узлах (МРО)
// - механизм сбора и инициализации настроек для выполнения обмена данными
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ НА УЗЛАХ ПЛАНОВ ОБМЕНА (МРО)

// Получает таблицу реквизитов регистрации объектов для механизма выборочной регистрации объектов
//
// Параметры:
//  ИмяОбъекта     - Строка - полное имя объекта метаданного, например, "Справочник.Номенклатура"
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//
// Возвращаемое значение:
//  ТаблицаРеквизитовРегистрации - таблица значений - таблица реквизитов регистрации, 
//  упорядоченная по полю "Порядок", для заданного объекта метаданного
//
Функция ПолучитьТаблицуРеквизитовРегистрации(ИмяОбъекта, ИмяПланаОбмена) Экспорт
	
	ТаблицаРеквизитовРегистрацииОбъектов = ОбменДаннымиСервер.ПолучитьПравилаВыборочнойРегистрацииОбъектовПС();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	Отбор.Вставить("ИмяОбъекта",     ИмяОбъекта);
	
	ТаблицаРеквизитовРегистрации = ТаблицаРеквизитовРегистрацииОбъектов.Скопировать(Отбор);
	
	ТаблицаРеквизитовРегистрации.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Получает таблицу правил выборочной регистрации объектов из параметров сеанса.
//
// Параметры:
// Нет.
// 
// Возвращаемое значение:
// Таблица значений - таблица реквизитов регистрации для всех объектов метаданных
//
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектовПС() Экспорт
	
	Возврат ПараметрыСеанса.ПравилаВыборочнойРегистрацииОбъектов.Получить();
	
КонецФункции

// Получает предопределенный узел плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
Функция ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел()
	
КонецФункции

// Получает предопределенный узел плана обмена по ссылке на узел плана обмена
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
Функция ПолучитьЭтотУзелПланаОбменаПоСсылке(УзелПланаОбмена) Экспорт
	
	Возврат ПолучитьЭтотУзелПланаОбмена(ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
КонецФункции

// Возвращает признак предопределенного узла этой информационной базы по переданному значению ссылки
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  Булево - признак предопределенного узла этой информационной базы
//
Функция ЭтоПредопределенныйУзелПланаОбмена(УзелПланаОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПолучитьЭтотУзелПланаОбменаПоСсылке(УзелПланаОбмена) = УзелПланаОбмена;
	
КонецФункции

// Получает имя плана обмена как объекта метаданного для заданного узла
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  Имя - Строка - имя плана обмена как объекта метаданного
//
Функция ПолучитьИмяПланаОбмена(УзелПланаОбмена) Экспорт
	
	Возврат УзелПланаОбмена.Метаданные().Имя;
	
КонецФункции

// Получает массив всех узлов для заданного плана обмена кроме предопределенного узла
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  МассивУзлов - Массив - массив всех узлов для заданного плана обмена кроме предопределенного узла
//
Функция ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена) Экспорт
	
	ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|        ТекущийПланОбмена.Ссылка
	|ИЗ ПланОбмена." + ИмяПланаОбмена + " КАК ТекущийПланОбмена
	|ГДЕ 
	|  Не ТекущийПланОбмена.Ссылка = &ЭтотУзел
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает список макетов типовых правил обмена из конфигурации для заданного плана обмена;
// список заполняется именами и синонимами макетов правил
// 
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил обмена
//
Функция ПолучитьСписокТиповыхПравилОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, "ПравилаОбмена");
	
КонецФункции

// Получает список макетов типовых правил регистрации из конфигурации для плана обмена;
// список заполняется именами и синонимами макетов правил
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил регистрации
//
Функция ПолучитьСписокТиповыхПравилРегистрации(ИмяПланаОбмена) Экспорт
	
	Возврат ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, "ПравилаРегистрации");
	
КонецФункции

// Получает список макетов типовых правил регистрации из конфигурации для всех планов обмена;
// список заполняется именами и синонимами макетов правил
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокПравилРегистрации - список значений - список макетов типовых правил регистрации
//
Функция ПолучитьСписокТиповыхПравилРегистрацииКонфигурации() Экспорт
	
	// возвращаемое значение функции
	СписокПравилРегистрации = Новый СписокЗначений;
	
	Для Каждого ПланОбмена ИЗ Метаданные.ПланыОбмена Цикл
		
		Для Каждого Макет ИЗ ПланОбмена.Макеты Цикл
			
			МакетИмя = Макет.Имя;
			
			Если Найти(МакетИмя, "ПравилаРегистрации") <> 0 Тогда
				
				СписокПравилРегистрации.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним + ": " + Макет.Синоним);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокПравилРегистрации
	
КонецФункции

// Получает список планов обмена конфигурации;
// список заполняется именами и синонимами планов обмена
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокПлановОбмена - список значений - список планов обмена конфигурации
//
Функция ПолучитьСписокПлановОбменаКонфигурации() Экспорт
	
	СписокПлановОбмена = Новый СписокЗначений;
	
	Для Каждого ПланОбмена ИЗ Метаданные.ПланыОбмена Цикл
		
		СписокПлановОбмена.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним);
		
	КонецЦикла;
	
	Возврат СписокПлановОбмена
	
КонецФункции

// Получает список планов обмена конфигурации для обмена версии 3.0;
// список заполняется именами и синонимами планов обмена
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокПлановОбмена - список значений - список планов обмена конфигурации
//
Функция ПолучитьСписокПлановОбменаКонфигурацииВерсии30() Экспорт
	
	СписокПлановОбмена = Новый СписокЗначений;
	
	Для Каждого ПланОбмена ИЗ Метаданные.ПланыОбмена Цикл
		
		МенеджерПланаОбмена = ПланыОбмена[ПланОбмена.Имя];
		
		Если МенеджерПланаОбмена.ВерсияОбменаДанными() = Перечисления.ВерсииПодсистемыОбменаДанными.Версия30 Тогда
			
			СписокПлановОбмена.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПлановОбмена
КонецФункции

// Получает менеджер плана обмена по имени плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//
// Возвращаемое значение:
//  ПланОбменаМенеджер - менеджер плана обмена
//
Функция ПолучитьМенеджерПланаОбменаПоИмени(ИмяПланаОбмена) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		
		Результат = ПланыОбмена[ИмяПланаОбмена];
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьМенеджерПланаОбменаПоУзлу(УзелПланаОбмена) Экспорт
	
	Возврат ПолучитьМенеджерПланаОбменаПоИмени(ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
КонецФункции

Функция ОбработкаОбменаДляЗагрузкиДанных(Отказ, УзелИнформационнойБазы, Знач ИмяФайлаСообщенияОбмена) Экспорт
	
	// ИНИЦИАЛИЗАЦИЯ ОБРАБОТКИ ДЛЯ ЗАГРУЗКИ ДАННЫХ
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Загрузка";
	
	ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений = Ложь;
	ОбработкаОбменаДанными.ДописыватьДанныеВПротоколОбмена = Ложь;
	ОбработкаОбменаДанными.ВыгружатьТолькоРазрешенные = Ложь;
	ОбработкаОбменаДанными.ФлагРежимОтладки = Ложь;
	
	ОбработкаОбменаДанными.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена = Ложь;
	ОбработкаОбменаДанными.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = 0;
	
	ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = "";
	
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	ОбработкаОбменаДанными.УзелОбменаЗагрузкаДанных = УзелИнформационнойБазы;
	ОбработкаОбменаДанными.ИмяФайлаОбмена           = ИмяФайлаСообщенияОбмена;
	
	Возврат ОбработкаОбменаДанными;
	
КонецФункции

Функция ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Экспорт
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	
КонецФункции

Функция ЕстьМакетПланаОбмена(Знач ИмяПланаОбмена, Знач ИмяМакета) Экспорт
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты.Найти(ИмяМакета) <> Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНИЦИАЛИЗАЦИИ СТРУКТУРЫ НАСТРОЕК ОБМЕНА ДАННЫМИ

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене, ВидТранспортаСообщенийОбмена) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = ДействиеПриОбмене;
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
	
	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// инициализируем обработку транспорта сообщений обмена
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	// инициализируем обработку обмена данными
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
		
	Иначе
		
		ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	ВыполнитьИнициализациюСтруктурыНастроекОбмена(СтруктураНастроекОбмена, НастройкаВыполненияОбмена, НомерСтроки);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// инициализируем обработку транспорта сообщений обмена
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	// инициализируем обработку обмена данными
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
		
	Иначе
		
		ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

Функция ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
	
	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// инициализируем обработку транспорта сообщений обмена
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

//

Процедура ВыполнитьИнициализациюСтруктурыНастроекОбмена(СтруктураНастроекОбмена, НастройкаВыполненияОбмена, НомерСтроки)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы         КАК УзелИнформационнойБазы,
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы.Код     КАК УзелИнформационнойБазыКод,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена            КАК ВидТранспортаОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие            КАК ДействиеПриОбмене,
	|	НастройкиВыполненияОбменаНастройкиОбмена.КоличествоЭлементовВТранзакции КАК КоличествоЭлементовВТранзакции,
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка                         КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка.Наименование            КАК НастройкаВыполненияОбменаНаименование,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных) ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ                                                                   КАК ПроизводитьЗагрузкуДанных,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных) ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ                                                                   КАК ПроизводитьВыгрузкуДанных
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	  НастройкиВыполненияОбменаНастройкиОбмена.Ссылка      = &НастройкаВыполненияОбмена
	|	И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки",               НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// заполняем значения свойств структуры
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, Выборка);
	
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = "Обмен данными";
	
	// выполняем проверку задания основных полей структуры настроек обмена
	ВыполнитьПроверкуОсновныхПолейСтруктурыНастроекОбмена(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = ОбменДаннымиСервер.ПравилаКонвертацииОбъектовДляПланаОбменаЗагружены(СтруктураНастроекОбмена.ИмяПланаОбмена);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ОбменДаннымиСервер.ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
	
	// получаем ключ сообщения для ЖР
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	//
	СтруктураНастроекОбмена.НастройкиТранспорта     = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаДляУзла(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ВидТранспортаОбмена);
	СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ИмяФайлаПротоколаОбмена;
	СтруктураНастроекОбмена.РежимОтладки            = СтруктураНастроекОбмена.НастройкиТранспорта.ВыполнятьОбменВРежимеОтладки;
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена)
	
	СтруктураСвойств = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СтруктураНастроекОбмена.УзелИнформационнойБазы, "Код, Наименование");
	
	СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = СтруктураСвойств.Код;
	СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = СтруктураСвойств.Наименование;
	
	//
	СтруктураНастроекОбмена.НастройкиТранспорта     = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаДляУзла(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ИмяФайлаПротоколаОбмена;
	СтруктураНастроекОбмена.РежимОтладки            = СтруктураНастроекОбмена.НастройкиТранспорта.ВыполнятьОбменВРежимеОтладки;
	
	// если не указан вид транспорта, то используем значение по умолчанию
	Если СтруктураНастроекОбмена.ВидТранспортаОбмена = Неопределено Тогда
		СтруктураНастроекОбмена.ВидТранспортаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	КонецЕсли;
	
	// если вид транспорта не задан, то используем транспорт FILE
	Если Не ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		
	КонецЕсли;
	
	// ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ
	СтруктураНастроекОбмена.НастройкаВыполненияОбмена             = Справочники.СценарииОбменовДанными.ПустаяСсылка();
	СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование = "";
	
	СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции = 0;
	
	// ВЫЧИСЛЯЕМЫЕ ЗНАЧЕНИЯ
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = ОбменДаннымиСервер.ПравилаКонвертацииОбъектовДляПланаОбменаЗагружены(СтруктураНастроекОбмена.ИмяПланаОбмена);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ОбменДаннымиСервер.ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
	
	// получаем ключ сообщения для ЖР
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
КонецПроцедуры

Функция СтруктураНастроекОбменаБазовая()
	
	СтруктураНастроекОбмена = Новый Структура;
	
	// структура настроек по полям запроса
	
	СтруктураНастроекОбмена.Вставить("ДатаНачала");
	СтруктураНастроекОбмена.Вставить("ДатаОкончания");
	
	СтруктураНастроекОбмена.Вставить("НомерСтроки");
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбменаНаименование");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыКод", "");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыНаименование", "");
	СтруктураНастроекОбмена.Вставить("ВидТранспортаОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакции");
	СтруктураНастроекОбмена.Вставить("РежимОтладки");
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗагрузкуДанных");
	СтруктураНастроекОбмена.Вставить("ПроизводитьВыгрузкуДанных");
	
	// структура настроек дополнительная
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными");
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("ИмяПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаКод");
	
	СтруктураНастроекОбмена.Вставить("ОбменПоПравиламКонвертацииОбъектов");
	
	СтруктураНастроекОбмена.Вставить("ИмяОбработкиТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации");
	
	СтруктураНастроекОбмена.Вставить("НастройкиТранспорта");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаПротоколаОбмена");
	
	СтруктураНастроекОбмена.Вставить("ПравилаКонвертацииОбъектов");
	СтруктураНастроекОбмена.Вставить("ПравилаЗагружены");
	
	// структура для регистрации событий в ЖР
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("СообщениеПриОбмене",           "");
	СтруктураНастроекОбмена.Вставить("СтрокаСообщенияОбОшибке",      "");
	
	СтруктураНастроекОбмена.Вставить("РезультатОтложенныхДвиженийДокументов");
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

Процедура ВыполнитьПроверкуОсновныхПолейСтруктурыНастроекОбмена(СтруктураНастроекОбмена)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// узел информационной базы не должен быть пустым
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан вид транспорта обмена! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка)! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// узел информационной базы не должен быть пустым
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан вид транспорта обмена! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка)! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы.ПометкаУдаления Тогда
		
		// узел информационной базы не должен быть помечен на удаление
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел информационной базы помечен на удаление! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена Тогда
		
		// сами с собой не обмениваемся
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Нельзя организовать обмен данными с текущим узлом информационной базы! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли ПустаяСтрока(СтруктураНастроекОбмена.УзелИнформационнойБазыКод)
		  ИЛИ ПустаяСтрока(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод) Тогда
		
		// у узлов участвующих в обмене должен быть не пустой код
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Один из узлов обмена имеет пустой код! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНИЦИАЛИЗАЦИИ ОБРАБОТКИ ОБМЕНА ДАННЫМИ

Процедура ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена)
	
	// если настройки содержат ошибки, то не производим инициализацию
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// создание
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовРаспределенныхИнформационныхБаз.Создать();
	
	// инициализация свойств
	ОбработкаОбменаДанными.УзелИнформационнойБазы          = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	ОбработкаОбменаДанными.КоличествоЭлементовВТранзакции  = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными", ОбработкаОбменаДанными);
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена)
	
	Перем ОбработкаОбменаДанными;
	
	// если настройки содержат ошибки, то не производим инициализацию
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ОбработкаОбменаДанными = ПолучитьОбработкуОбменаДаннымиДляВыгрузки(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		ОбработкаОбменаДанными = ПолучитьОбработкуОбменаДаннымиДляЗагрузки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными", ОбработкаОбменаДанными);
	
КонецПроцедуры

Процедура ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена)
	
	// создаем обработку транспорта
	ОбработкаТранспортаСообщенийОбмена = Обработки[СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена].Создать();
	
	ЭтоИсходящееСообщение = СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных;
	
	// заполняем общие реквизиты, одинаковые для всех обработок транспорта
	ОбработкаТранспортаСообщенийОбмена.ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(СтруктураНастроекОбмена, ЭтоИсходящееСообщение);
	
	// заполняем настойки транспорта, различные для каждой обработки транспорта
	ЗаполнитьЗначенияСвойств(ОбработкаТранспортаСообщенийОбмена, СтруктураНастроекОбмена.НастройкиТранспорта);
	
	// Инициализируем транспорт
	ОбработкаТранспортаСообщенийОбмена.Инициализация();
	
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена", ОбработкаТранспортаСообщенийОбмена);
	
КонецПроцедуры

Функция ПолучитьОбработкуОбменаДаннымиДляВыгрузки(СтруктураНастроекОбмена)
	
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Выгрузка";
	
	УстановитьПравилаОбменаВыгрузкиДанных(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	ОбработкаОбменаДанными.ДобавлениеОбъектовИзФоновогоОбмена  = 0;
	ОбработкаОбменаДанными.КоличествоОбъектовДляФоновогоОбмена = 0;
	
	// задаем узлы обмена
	ОбработкаОбменаДанными.УзелДляОбмена         = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	ОбработкаОбменаДанными.УзелДляФоновогоОбмена = Неопределено;
	
	// устанавливаем соответствие пользовательских полей поиска
	ПередатьИнформациюОПользовательскихПоляхПоиска(ОбработкаОбменаДанными, Новый Соответствие);
	
	ОбработкаОбменаДанными.НеВыгружатьОбъектыПоСсылкам = Истина;
	ОбработкаОбменаДанными.ИмяФайлаПравилОбмена        = "1";
	
	// флаг того, что это обмен не через COM
	ОбработкаОбменаДанными.НепосредственноеЧтениеВИБПриемнике = Ложь;
	
	УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	Возврат ОбработкаОбменаДанными;
	
КонецФункции

Функция ПолучитьОбработкуОбменаДаннымиДляЗагрузки(СтруктураНастроекОбмена)
	
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Загрузка";
	ОбработкаОбменаДанными.УзелОбменаЗагрузкаДанных = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	
	УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	Возврат ОбработкаОбменаДанными
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ИНИЦИАЛИЗАЦИИ ВЫПОЛНЕНИЯ ОБМЕНА ДАННЫМИ

Процедура УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена)
	
	ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений      = ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений;
	
	ОбработкаОбменаДанными.ДописыватьДанныеВПротоколОбмена = Ложь;
	ОбработкаОбменаДанными.ВыгружатьТолькоРазрешенные      = Ложь;
	
	ОбработкаОбменаДанными.ФлагРежимОтладки = СтруктураНастроекОбмена.РежимОтладки;
	
	ОбработкаОбменаДанными.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена         = (СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции > 0);
	ОбработкаОбменаДанными.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
	
	ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена;
	
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
	
КонецПроцедуры

Процедура УстановитьПравилаОбменаВыгрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбмена)
	
	Попытка
		
		ПравилаКонвертацииОбъектов = РегистрыСведений.ПравилаДляОбменаДанными.ПолучитьЗачитанныеПравилаКонвертацииОбъектов(СтруктураНастроекОбмена.ИмяПланаОбмена);
		
		ПравилаЗагружены = (ПравилаКонвертацииОбъектов <> Неопределено);
		
		Если Не ПравилаЗагружены Тогда
			
			// правила обмена должны быть указаны
			НСтрока = НСтр("ru = 'Не заданы правила конвертации для плана обмена [ИмяПланаОбмена]. Выгрузка данных отменена.'");
			СтрокаСообщенияОбОшибке = СтрЗаменить(НСтрока, "[ИмяПланаОбмена]", СтруктураНастроекОбмена.ИмяПланаОбмена);
			ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
			Возврат;
			
		КонецЕсли;
		
		ОбработкаОбменаДаннымиXML.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
		
		ОбработкаОбменаДаннымиXML.ВосстановитьПравилаИзВнутреннегоФормата();
		
	Исключение
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при установке зачитанных правил обмена! Обмен отменен.'");
		ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередатьИнформациюОПользовательскихПоляхПоиска(ОбработкаОбменаДаннымиXML, СоответствиеПоиска)
	
	Попытка
	
		ОбработкаОбменаДаннымиXML.ИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных.Очистить();
		
		Для Каждого Элемент Из СоответствиеПоиска Цикл
			
			ОбработкаОбменаДаннымиXML.ИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных.Вставить(Элемент.Ключ, Элемент.Значение);
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена)
	
	СтруктураНастроекОбмена.Отказ = Истина;
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
	
КонецПроцедуры

Функция ПолучитьШаблонИмениФайлаСообщения(СтруктураНастроекОбмена, ЭтоИсходящееСообщение)
	
	УзелОтправитель = ?(ЭтоИсходящееСообщение, СтруктураНастроекОбмена.ТекущийУзелПланаОбмена, СтруктураНастроекОбмена.УзелИнформационнойБазы);
	УзелПолучатель  = ?(ЭтоИсходящееСообщение, СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ТекущийУзелПланаОбмена);
	
	Возврат ОбменДаннымиСервер.ИмяФайлаСообщенияОбмена(УзелОтправитель.Код, УзелПолучатель.Код);
	
КонецФункции

// Получает список макетов типовых правил для обмена данными из конфигурации для заданного плана обмена;
// список заполняется именами и синонимами макетов правил
// 
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил для обмена данными
//
Функция ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, ЛитералИмениМакета)
	
	СписокПравил = Новый СписокЗначений;
	
	Если ПустаяСтрока(ИмяПланаОбмена) Тогда
		Возврат СписокПравил;
	КонецЕсли;
	
	Попытка
		
		МакетыПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты;
		
	Исключение
		Возврат СписокПравил;
	КонецПопытки;
	
	Для Каждого Макет ИЗ МакетыПланаОбмена Цикл
		
		МакетИмя = Макет.Имя;
		
		Если Найти(МакетИмя, ЛитералИмениМакета) <> 0 Тогда
			
			СписокПравил.Добавить(МакетИмя, Макет.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПравил;
КонецФункции
