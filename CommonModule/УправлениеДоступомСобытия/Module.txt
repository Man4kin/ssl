
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ
//

// Обработчик ЗаписатьГруппыИВидыДоступа события ПриЗаписи подписки на события
// ЗаписатьГруппыИВидыДоступа вызывает метод записи групп доступа и видов доступа
// в РегистрСведений.ГруппыЗначенийДоступа, для требуемых объектов метаданных.
//
Процедура ЗаписатьГруппыИВидыДоступа(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьГруппыИВидыДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	#Если Сервер Тогда
		УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Объект, Отказ);
	#Иначе
		ЕстьОшибки = Ложь;
		УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(Объект.Ссылка, Отказ, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Объект.ДополнительныеСвойства.Вставить("ЕстьОшибки");
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

// Обработчик ЗаписатьНаборыЗначенийДоступа события ПриЗаписи подписки на события
// ЗаписатьНаборыЗначенийДоступа вызывает метод записи значений доступа объекта
// в РегистрСведений.НаборыЗначенийДоступа.
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если наборы значений доступа не применяются.
//
Процедура ЗаписатьНаборыЗначенийДоступа(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	#Если Сервер Тогда
		УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(Объект);
	#Иначе
		УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(Объект.Ссылка);
	#КонецЕсли

КонецПроцедуры

// Обработчик ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей события ПередЗаписью подписки на события
// ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей вызывает метод заполнения значений доступа
// табличной части объекта, если для ограничения доступа к нему самому используются наборы.
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если для указанной цели наборы не применяются.
//
// Обработчик подписки на событие ПередЗаписью для типов:
//  СправочникОбъект
//  ДокументОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект
//
Процедура ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей(Знач Объект, Отказ = Неопределено, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	Если Объект.ОбменДанными.Загрузка И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПривилегированныйРежим() И Объект.ДополнительныеСвойства.Свойство("НаборыЗначенийДоступаТабличнойЧастиЗаполнены")) Тогда
		Объект.НаборыЗначенийДоступа.Загрузить(ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ЗаписатьЗависимыеНаборыЗначенийДоступа события ПриЗаписи подписки на события
// ЗаписатьЗависимыеНаборыЗначенийДоступа вызывает метод записи обновления зависимых
// наборов значений доступа в регистре сведений НаборыЗначенийДоступа.
//
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если зависимые наборы значений доступа не применяются.
//
Процедура ЗаписатьЗависимыеНаборыЗначенийДоступа(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьЗависимыеНаборыЗначенийДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	#Если Сервер Тогда
		УправлениеДоступом.ЗаписатьЗависимыеНаборыЗначенийДоступа(Объект);
	#Иначе
		УправлениеДоступом.ЗаписатьЗависимыеНаборыЗначенийДоступа(Объект.Ссылка);
	#КонецЕсли

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СЛОЖНОГО КОНТЕКСТА
// Сервер, Внешнее соединение, Клиент (обычное приложение)
//

// Функция ПоставляемыйПрофильИзменен проверяет изменен ли поставляемый профиль
// по сравнению с описанием из функции
// УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа()
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//                     (возвращается реквизит ПоставляемыйПрофильИзменен),
//               - СправочникОбъект.ПрофилиГруппДоступа
//                     (возвращается результат сравнения заполнения объекта
//                      с описанием в переопределяемом общем модуле).
//
// Возвращаемое значение:
//  Булево.
//
Функция ПоставляемыйПрофильИзменен(Профиль) Экспорт
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Профиль, "ПоставляемыйПрофильИзменен");
	КонецЕсли;
	
	ОписанияПрофилей = УправлениеДоступомСерверПовтИсп.ОписанияНачальногоЗаполненияПрофилейГруппДоступа();
	
	ОписаниеНайдено = Ложь;
	Для каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		Если ОписаниеПрофиля.Идентификатор = Строка(Профиль.Ссылка.УникальныйИдентификатор()) Тогда
			ОписаниеНайдено = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеНайдено Тогда
		
		Если ВРег(Профиль.Наименование) <> ВРег(ОписаниеПрофиля.Наименование) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Профиль.Роли.Количество()            <> ОписаниеПрофиля.Роли.Количество()
		 ИЛИ Профиль.ВидыДоступа.Количество()     <> ОписаниеПрофиля.ВидыДоступа.Количество()
		 ИЛИ Профиль.ЗначенияДоступа.Количество() <> ОписаниеПрофиля.ЗначенияДоступа.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для каждого СтрокаРоли Из Профиль.Роли Цикл
			Если ОписаниеПрофиля.Роли.Найти(СтрокаРоли.Роль) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ОписаниеВидаДоступа Из ОписаниеПрофиля.ВидыДоступа Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа[ОписаниеВидаДоступа.Значение]);
			Отбор.Вставить("Предустановленный", ОписаниеВидаДоступа.Представление = "Предустановленный");
			Отбор.Вставить("ДоступРазрешен",    ОписаниеВидаДоступа.Представление = "ВначалеВсеРазрешены");
			Если Профиль.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ОписаниеЗначенияДоступа Из ОписаниеПрофиля.ЗначенияДоступа Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа[ОписаниеЗначенияДоступа.Значение]);
			Запрос = Новый Запрос(СтрЗаменить("Выбрать Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.Представление));
			Отбор.Вставить("ЗначениеДоступа", Запрос.Выполнить().Выгрузить()[0].Значение);
			Если Профиль.ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект) Экспорт
	
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если Метаданные.НайтиПоТипу(ТипЗначенияОбъект).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры!
				           |Тип объекта ""%1""
				           |не найдена табличная часть ""Наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Таблица = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		Если НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) И
		     НЕ Метаданные.ПодпискиНаСобытия.ЗаписатьЗависимыеНаборыЗначенийДоступа.Источник.СодержитТип(ТипЗначенияОбъект) Тогда
			ВызватьИсключение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверные параметры!
					           |Тип объекта ""%1""
					           |не найден ни в одной из подписок на события
					           |""Записать наборы значений доступа"",
					           |""Записать зависимые наборы значений доступа"".'"),
					ТипЗначенияОбъект));
		КонецЕсли;
		
		Объект.ЗаполнитьНаборыЗначенийДоступа(Таблица);
		
		Если Таблица.Количество() = 0 Тогда
			// Если это условие отключить, тогда зациклится регламентное задание
			// заполнения данных для ограничения доступа.
			ВызватьИсключение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект ""%1"" сформировал пустой набор значений доступа!'"),
					ТипЗначенияОбъект));
		КонецЕсли;
		
		УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
		
		УправлениеДоступом.ПодготовкаНаборовЗначенийДоступаПередЗаписью(СсылкаНаОбъект, Таблица);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

