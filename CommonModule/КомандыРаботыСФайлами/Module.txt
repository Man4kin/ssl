// Сохраняет отредактированный файл в ИБ и снимает с него блокировку
Процедура ЗакончитьРедактирование(
	ПараметрКоманды, 
	ИдентификаторФормы, 
	Знач ХранитьВерсии = Неопределено,
	Знач РедактируетТекущийПользователь = Неопределено, 
	Знач Редактирует = Неопределено,
	Знач АвторТекущейВерсии = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		МассивОбработанных = РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
			ПараметрКоманды, 
			ИдентификаторФормы); 
		
		Для Каждого ФайлСсылка Из МассивОбработанных Цикл
			ОповеститьОбИзменении(ФайлСсылка);
			Оповестить("ДанныеФайлаИзменены", ФайлСсылка);
			Оповестить("ВерсияСохранена", ФайлСсылка);
		КонецЦикла;	
		
	Иначе	
		
		РедактированиеЗакончено = Ложь;
		
		РедактированиеЗакончено = РаботаСФайламиКлиент.ЗакончитьРедактирование(
			ПараметрКоманды, 
			ИдентификаторФормы,
			ХранитьВерсии,
			РедактируетТекущийПользователь,
			Редактирует,
			АвторТекущейВерсии,
			""); 
		
		Если РедактированиеЗакончено Тогда 
			Оповестить("ЗаконченоРедактирование", ПараметрКоманды);
			ОповеститьОбИзменении(ПараметрКоманды);
			Оповестить("ДанныеФайлаИзменены", ПараметрКоманды);
			Оповестить("ВерсияСохранена", ПараметрКоманды);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Блокирует файл для редактирования и открывает его
Процедура Редактировать(ОбъектСсылка, УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор, РабочийКаталогВладельца);
	ОповеститьОбИзменении(ОбъектСсылка);
	Оповестить("ДанныеФайлаИзменены", ОбъектСсылка);
	Оповестить("ФайлРедактировался", ОбъектСсылка);
	
КонецПроцедуры

// Выполняет блокировку файла или нескольких файлов
// ПараметрКоманды - либо ссылка на файл, либо массив ссылок на файлы
Процедура Занять(ПараметрКоманды, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		РаботаСФайламиКлиент.ЗанятьФайлыПоСсылкам(ПараметрКоманды);
		
		Для Каждого ФайлСсылка Из ПараметрКоманды Цикл
			ОповеститьОбИзменении(ФайлСсылка);
			Оповестить("ДанныеФайлаИзменены", ФайлСсылка);
		КонецЦикла;	
		
	Иначе	
		
		РаботаСФайламиКлиент.ЗанятьФайлПоСсылке(ПараметрКоманды, УникальныйИдентификатор); 
		ОповеститьОбИзменении(ПараметрКоманды);
		Оповестить("ДанныеФайлаИзменены", ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Освобождает занятый ранее файл
Процедура ОсвободитьФайл(
	ПараметрКоманды,
	Знач ХранитьВерсии = Неопределено,
	Знач РедактируетТекущийПользователь = Неопределено, 
	Знач Редактирует = Неопределено,
	УникальныйИдентификатор = Неопределено) Экспорт

	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(ПараметрКоманды); 
		
		Для Каждого ФайлСсылка Из ПараметрКоманды Цикл
			ОповеститьОбИзменении(ФайлСсылка);
			Оповестить("ДанныеФайлаИзменены", ФайлСсылка);
		КонецЦикла;	
			
	Иначе	
		
		РаботаСФайламиКлиент.ОсвободитьФайл(
			ПараметрКоманды, 
			ХранитьВерсии,
			РедактируетТекущийПользователь,
			Редактирует,
			УникальныйИдентификатор); 
			
		ОповеститьОбИзменении(ПараметрКоманды);
		Оповестить("ДанныеФайлаИзменены", ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл для просмотра
Процедура Открыть(ДанныеФайла) Экспорт
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	Оповестить("ФайлОткрыт", ДанныеФайла.Ссылка);	
	
КонецПроцедуры

// Сохраняет файл в информационной базе, но не освобождает его
Процедура ОпубликоватьФайл(ПараметрКоманды, ИдентификаторФормы) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		РаботаСФайламиКлиент.ОпубликоватьФайлыПоСсылкам(ПараметрКоманды, ИдентификаторФормы);
		
		Для Каждого ФайлСсылка Из ПараметрКоманды Цикл
			Оповестить("ДанныеФайлаИзменены", ФайлСсылка);				
			Оповестить("ВерсияСохранена", ФайлСсылка);
		КонецЦикла;	
			
	Иначе	
		
		РаботаСФайламиКлиент.ОпубликоватьФайл(ПараметрКоманды, ИдентификаторФормы);
		
		Оповестить("ДанныеФайлаИзменены", ПараметрКоманды);				
		Оповестить("ВерсияСохранена", ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает каталог на локальном компьютере в котором размещен этот файл
Процедура ОткрытьКаталогФайла(ДанныеФайла) Экспорт
	
	РаботаСФайламиКлиент.КаталогФайла(ДанныеФайла);
	
КонецПроцедуры

// Сохраняет текущую версию файла в выбранный каталог на жестком или сетевом диске
Процедура СохранитьКак(ДанныеФайла) Экспорт
	
	РаботаСФайламиКлиент.СохранитьКак(ДанныеФайла);	
	
КонецПроцедуры

// Выбирает на  диске файл и создает из него новую версию
Процедура ОбновитьИзФайлаНаДиске(ДанныеФайла, ИдентификаторФормы) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		РаботаСФайламиКлиент.ОбновитьИзФайлаНаДиске(ДанныеФайла, ИдентификаторФормы);	
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		Оповестить("ДанныеФайлаИзменены", ДанныеФайла.Ссылка);
		Оповестить("ВерсияСохранена", ДанныеФайла.Ссылка);
	
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
	КонецЕсли;
	
КонецПроцедуры

// Формирует электронно-цифровую подпись 
Функция СформироватьПодписьФайла(ДанныеФайла, ДанныеДляЗанесенияВРегистр) Экспорт
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Нельзя подписать занятый файл.'"));
		Возврат Ложь;
	КонецЕсли;	
	
	Если ДанныеФайла.Зашифрован Тогда
		Предупреждение(НСтр("ru = 'Зашифрованный файл нельзя подписывать.'"));
		Возврат Ложь;
	КонецЕсли;	
	
	РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
	
	ДляШифрования = Ложь;
	МассивСтруктурСертификатов = ЭлектронноЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ДляШифрования);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ДанныеФайла.Ссылка);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатаЭЦПДляПодписи", ПараметрыФормы);
	 
	Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
		
		ВерсияАлгоритмаГенерацииФайла = 0;
		
		СтруктураВозврата = РаботаСФайлами.ПолучитьДанныеФайлаИДвоичныеДанные(ДанныеФайла.Ссылка);
		
		МенеджерКриптографии = ЭлектронноЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();

		ДанныеДляЗанесенияВРегистр = ЭлектронноЦифроваяПодписьКлиент.СформироватьПодпись(
			МенеджерКриптографии, ДанныеФайла.Ссылка, 
			СтруктураВозврата.ДвоичныеДанные, СтруктураПараметровПодписи, ВерсияАлгоритмаГенерацииФайла);
			
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции

// Зашифровать файл
Функция Зашифровать(ДанныеФайла, УникальныйИдентификатор, 
	МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, МассивАдресов) Экспорт
	
	Если ДанныеФайла.Зашифрован Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							    НСтр("ru = 'Файл ""%1"" уже зашифрован.'"), Строка(ДанныеФайла.Ссылка));
		Предупреждение(Текст);
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		Возврат Ложь;
	КонецЕсли;	
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
	
	ДляШифрования = Истина;
	МассивСтруктурСертификатов = ЭлектронноЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ДляШифрования);
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", 
		МассивСтруктурСертификатов, ДанныеФайла.Ссылка);
	СтруктураВозврата = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаШифрования", ПараметрыФормы);
	 
	Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
		
		Возврат РаботаСФайламиКлиент.Зашифровать(ДанныеФайла.Ссылка, СтруктураВозврата, 
			УникальныйИдентификатор, ДанныеФайла, МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, МассивАдресов);
			
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции

// Расшифровать файл
Функция Расшифровать(ДанныеФайла, УникальныйИдентификатор, 
	МассивДанныхДляЗанесенияВБазу, МассивАдресов) Экспорт
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
	
	Возврат РаботаСФайламиКлиент.Расшифровать(ДанныеФайла.Ссылка, УникальныйИдентификатор, 
		ДанныеФайла, МассивДанныхДляЗанесенияВБазу, МассивАдресов);
		
КонецФункции

// Добавить ЭЦП из файла
Функция ДобавитьЭЦПИзФайла(ДанныеФайла, УникальныйИдентификатор) Экспорт
	ПараметрыФормы = Новый Структура;
	МассивВозврата = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаДобавленияПодписиИзФайла", ПараметрыФормы);
	
	Если ТипЗнч(МассивВозврата) = Тип("Массив") Тогда
		
		Если МассивВозврата.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
		РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
		
		ЭлектронноЦифроваяПодписьКлиент.ДобавитьЭЦП(ДанныеФайла.Ссылка, МассивВозврата, 
			УникальныйИдентификатор, ДанныеФайла.Владелец);
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
	
КонецФункции

// СохранитьКак вместе с ЭЦП
Процедура СохранитьВместеСЭЦП(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
	
	ПолноеИмяФайла = РаботаСФайламиКлиент.СохранитьКак(ДанныеФайла);
	Если ПолноеИмяФайла = "" Тогда
		Возврат; // пользователь нажал Отмена или это веб клиент без расширения
	КонецЕсли;	
	
	Настройка = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
	
	Если Настройка = "Спрашивать" Тогда
		
		ПараметрыФормы = Новый Структура("Объект, УникальныйИдентификатор", ДанныеФайла.Ссылка, УникальныйИдентификатор);
		МассивВозврата = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбораПодписей", ПараметрыФормы);
		
		Если ТипЗнч(МассивВозврата) = Тип("Массив") Тогда
			
			Если МассивВозврата.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;	 
			
			ЭлектронноЦифроваяПодписьКлиент.СохранитьПодписи(ДанныеФайла.Ссылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивВозврата);
		КонецЕсли;	 
		
	ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
		ЭлектронноЦифроваяПодписьКлиент.СохранитьПодписи(ДанныеФайла.Ссылка, ПолноеИмяФайла, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры
