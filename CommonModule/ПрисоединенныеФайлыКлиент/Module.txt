////////////////////////////////////////////////////////////////////////////////
// Интерфейсные функции модуля, реализующие основные функции
// для пользователя при работе со списком присоединенных файлов.
// Это прежде всего команды (такие как Добавить файлы, Открыть, Редактировать).
//

// Процедура для обработки команды добавления файлов. Пользователь выбирает
// файлы в диалоге выбора файлов и система пытается поместить их в хранилище файлов,
// если это возможно (если удовлетворяются: условия максимально допустимого размера,
// имеет допустимое расширение, наличие свободного места в томе, при хранении файлов
// в томах, а так же возможны другие условия).
// Передаваемые параметры:
//	ВладелецФайла - любая ссылка - владелец файла
//	УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ДобавитьФайлы(ВладелецФайла, УникальныйИдентификатор) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Если ВыборФайла.Выбрать() Тогда
			ПрисоединенныеФайлыМассив = Новый Массив;
			ПоместитьВыбранныеФайлыВХранилище(ВыборФайла.ВыбранныеФайлы, ВладелецФайла,
												НастройкиРаботыСФайлами,
												ПрисоединенныеФайлыМассив,
												УникальныйИдентификатор);
			
			Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
				ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
				
				ПоказатьОповещениеПользователя(
								НСтр("ru = 'Создание:'"),
								ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
								ПрисоединенныйФайл,
								БиблиотекаКартинок.Информация32);
				
				ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл),, ПрисоединенныйФайл);
				Оповестить("ЗаписьНовогоПрисоединенногоФайла", ПрисоединенныйФайл);
			КонецЕсли;
			
			Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
				ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
				Оповестить("ЗаписьНовогоПрисоединенногоФайла", ПрисоединенныеФайлыМассив[0]);
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе // Если веб-клиент без подключенного расширения
#Если ВебКлиент Тогда
		ПрисоединенныйФайл = ПоместитьВыбранныеФайлыВХранилищеВеб(ВладелецФайла, НастройкиРаботыСФайлами, УникальныйИдентификатор);
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПоказатьОповещениеПользователя(
							НСтр("ru = 'Создание:'"),
							ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
							ПрисоединенныйФайл,
							БиблиотекаКартинок.Информация32);
			ОповеститьОбИзменении(ПрисоединенныйФайл);
			ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл),, ПрисоединенныйФайл);
			Оповестить("ЗаписьНовогоПрисоединенногоФайла", ПрисоединенныйФайл);
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#Если ВебКлиент Тогда
// Веб-клиент.
// Функция для помещения файла с диска в хранилище присоединенных файлов.
// 
// Параметры:
//  ВладелецФайла - любая ссылка - владелец файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//	ссылка на файл
//
Функция ПоместитьВыбранныеФайлыВХранилищеВеб(ВладелецФайла, НастройкиРаботыСФайлами, УникальныйИдентификатор)
	
	ВремяИзменения = ТекущаяДата(); // Т.к. не можем получить дату модификации файла на диске
	ВремяИзмененияУниверсальное = УниверсальноеВремя(ТекущаяДата());
	
	АдресВременногоХранилищаФайла = "";
	ИмяФайла = "";
	Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
	Иначе
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"),ИмяФайла);
	КонецЕсли;
	
	ЗапретЗагрузкиФайловПоРасширению	= НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений			= НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, Расширение) Тогда
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				Расширение);
	КонецЕсли;
	
	// Создадим карточку Файла в БД
	ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								ВладелецФайла,
								ИмяБезРасширения,
								Расширение,
								ВремяИзменения,
								ВремяИзмененияУниверсальное,
								АдресВременногоХранилищаФайла,
								"",
								Истина);
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции
#КонецЕсли

// Процедура для обработки команды открытия файла. Если файл открывается для чтения,
// Получает файл в рабочий каталог пользователя, при этом ищет файл в рабочем каталоге
// и предлагает получить файл с сервера или открыть существующий. Если файл редактируется
// безусловно открывает файл в рабочем каталоге (если есть) или получает его сервера.
// Параметры:
//  ДанныеФайла - структура - данные файла
//  ФайлРедактируется - булево - истина, если файл открывается для редактирования, иначе ложь
//
Процедура ОткрытьФайл(ДанныеФайла, ДляРедактирования = Истина) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Отказ = Ложь;
		
		ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) // файл уже редактируется
		   И ДляРедактирования
		   И ФайлНаДиске.Существует() Тогда
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			ПолучитьФайл = Ложь;
		ИначеЕсли ФайлНаДиске.Существует() Тогда
			ПолучитьФайл = ДиалогНужноПолучитьФайлССервера(ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ДляРедактирования, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ПолучитьФайл = Истина;
		КонецЕсли;
		
		ФайлМожноОткрывать = Истина;
		
		Если ПолучитьФайл Тогда
			ПолноеИмяФайлаНаКлиенте = "";
			ФайлМожноОткрывать = 
					ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
												ДанныеФайла.ОтносительныйПуть,
												ДанныеФайла.ДатаМодификацииУниверсальная,
												ДанныеФайла.ИмяФайла,
												РабочийКаталогПользователя,
												ПолноеИмяФайлаНаКлиенте);
		КонецЕсли;
		
		Если ФайлМожноОткрывать Тогда
			Если ДляРедактирования Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			Иначе
				ФайлНаДиске.УстановитьТолькоЧтение(Истина);
			КонецЕсли;
			ОткрытьФайлПриложением(ПолноеИмяФайлаНаКлиенте);
		КонецЕсли;
	Иначе
		Если ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ФайловыеФункцииКлиент.ПоказатьНапоминаниеПриРедактировании();
		КонецЕсли;
		
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция для обработки команды сохранения файла в каталог на диске.
// Так же используется как вспомогательная функция при сохранении файла с ЭЦП.
// Параметры:
//  ДанныеФайла - структура - данные файла
// Возвращаемое значение
//  имя сохраненного файла
//
Функция СохранитьФайлКак(ДанныеФайла) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение, ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат "";
		КонецЕсли;
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
					|Пожалуйста, подождите.'"),
				ДанныеФайла.ИмяФайла, ?(РазмерВМб >= 1,
											Формат(РазмерВМб, "ЧДЦ=0"),
											Формат(РазмерВМб, "ЧДЦ=1; ЧН=0") ) );
		
		Состояние(ТекстПояснения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		
		Возврат ВыборФайла.ПолноеИмяФайла;
	Иначе
#Если ВебКлиент Тогда
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
		Возврат ДанныеФайла.ИмяФайла;
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Обработчик команды обновления присоединенного файла из другого файла.
// При этом пользователю предлагается выбрать файл, из которого следует обновить двоичные данные.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура - данные файла
//  УникальныйИдентификатор - уникальный идентификатор формы
// Возвращаемое значение
//	Истинна - файл успешно обновлен в хранилище, ложь - файл не обновлен в хранилище
//
Функция ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ИнформацияОФайле = Новый Структура;
	
	Если ВыбратьФайлНаДискеИПоместитьВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Тогда
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле,
#Если ВебКлиент Тогда
		Истина
#Иначе
		Ложь
#КонецЕсли
		);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Обработчик команды окончания редактирования файлов, с помещением
// отредактированных файлов в хранилище.
// Параметры
//  ДанныеФайла - структура с данными файла
//  ИнформацияОФайле - структура с информацией о файле
//  УникальныйИдентификатор - уникальный идентификатор формы
// Возвращаемое значение
//  Истина - файл успешно помещен во временное хранилище
Функция ПоместитьРедактируемыйФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Если НЕ Файл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не найден файл в рабочем каталоге'"));
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПоместитьФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, ПолноеИмяФайлаНаКлиенте, УникальныйИдентификатор);
		
	Иначе
#Если ВебКлиент Тогда
		Результат = ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор);
		
		Если НЕ Результат Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеФайла.ИмяФайла <> ИнформацияОФайле.ИмяФайла Тогда
			ТекстВопроса = НСтр("ru = 'Имя выбранного файла (%1) отличается от имени файла в хранилище (%2), продолжить?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ИнформацияОФайле.ИмяФайла, ДанныеФайла.ИмяФайла);
			КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Используется как вспомогательная процедура для выбора файла с диска
// и помещения его во временное хранилище на сервере.
// Параметры:
//  ДанныеФайла - структура с данными файла
//  ИнформацияОФайле - структура с информацией о файле
//  УникальныйИдентификатор - уникальный идентификатор формы
// Возвращаемое значение
//  Истина - файл успешно выбран и помещен во временное хранилище, иначе Ложь
//
Функция ВыбратьФайлНаДискеИПоместитьВХранилище(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение, ДанныеФайла.Расширение);
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПоместитьФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, ВыборФайла.ПолноеИмяФайла, УникальныйИдентификатор);
		
	Иначе
#Если ВебКлиент Тогда
		Возврат ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор);
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Функция используется для помещения файла на диске с именем
// ПолноеИмяФайлаНаКлиенте во временное хранилище.
// Параметры
//  ДанныеФайла - структура с данными файла
//  ИнформацияОФайле (устанавливается в функции)- структура с информацией о файле
//  ПолноеИмяФайлаНаКлиенте - строка - имя файла на клиенте
//  УникальныйИдентификатор - уникальный идентификатор формы
// Возвращаемое значение
//	Булево - истина - файл успешно помещен в хранилище, иначе Ложь
//
Функция ПоместитьФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, ПолноеИмяФайлаНаКлиенте, УникальныйИдентификатор)
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	МаксРазмерФайла						= НастройкиРаботыСФайлами.МаксимальныйРазмерФайла;
	ЗапретЗагрузкиФайловПоРасширению	= НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений			= НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
	
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, Файл.Расширение) Тогда
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				Файл.Расширение);
	КонецЕсли;
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(Файл.Размер(), МаксРазмерФайла, Файл.Имя));
		Возврат Ложь;
	КонецЕсли;
	
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
	
	Если ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = "";
	Иначе
		АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПолноеИмяФайлаНаКлиенте, УникальныйИдентификатор);
	КонецЕсли;
	
	Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайлаНаКлиенте, "");
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Описание);
	ПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка передачи файла на сервер: %1'"), ПолноеИмяФайлаНаКлиенте) );
		Возврат Ложь;
	КонецЕсли;
	
	АдресФайлаВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
	
	ИнформацияОФайле = Новый Структура("ДатаМодификацииУниверсальная, АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, Расширение",
										Файл.ПолучитьУниверсальноеВремяИзменения(),
										АдресФайлаВоВременномХранилище,
										АдресВременногоХранилищаТекста,
										Прав(Файл.Расширение, СтрДлина(Файл.Расширение)-1));
	
	Возврат Истина;
	
	
КонецФункции

#Если ВебКлиент Тогда
// Аналог функции ПоместитьФайлНаДискеВХранилище для веб-клиента (без расширения для работы с файлами).
// Помещает файл с диска во временное хранилище.
//  ДанныеФайла - структура с данными файла
//  ИнформацияОФайле (устанавливается в функции)- структура с информацией о файле
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Функция ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, УникальныйИдентификатор)
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	АдресВременногоХранилищаФайла = "";
	ВыбранноеИмяФайла = "";
	
	Если Не ПоместитьФайл(АдресВременногоХранилищаФайла, ДанныеФайла.ИмяФайла, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранноеИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		НовоеИмя = СтрокиПути[СтрокиПути.Количество()-2];
		НовоеРасширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяФайла = НовоеИмя + "." + НовоеРасширение;
	ИначеЕсли СтрокиПути.Количество() = 1 Тогда
		НовоеИмя = СтрокиПути[0];
		НовоеРасширение = "";
		ИмяФайла = НовоеИмя;
	КонецЕсли;
	
	ЗапретЗагрузкиФайловПоРасширению	= НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений			= НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, НовоеРасширение) Тогда
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				НовоеРасширение);
	КонецЕсли;
	
	ИнформацияОФайле = Новый Структура("ДатаМодификацииУниверсальная, АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ИмяФайла,Расширение",
										УниверсальноеВремя(ТекущаяДата()),
										АдресВременногоХранилищаФайла,
										"",
										ИмяФайла,
										НовоеРасширение);
	
	Возврат Истина;
	
КонецФункции
#КонецЕсли

// Обработчик команды открытия каталога с файлом. Если файла в каталоге нет,
// он получается в него из хранилища.
// Параметры
//  ДанныеФайла - структура с данными файла
//
Процедура ОткрытьКаталогСФайлом(ДанныеФайла) Экспорт
	
	Перем ПолноеИмяФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			Предупреждение(НСтр("ru = 'Не задан путь к локальному кэшу файлов'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПуть);
		
		Если НЕ Файл.Существует() Тогда
			КодВозврата = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" отсутствует в рабочем каталоге! Получить файл с сервера?'"), Файл.Имя),
			РежимДиалогаВопрос.ДаНет);
			
			Если КодВозврата <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			ПолноеИмяФайлаНаКлиенте = "";
			ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ОтносительныйПуть, ДанныеФайла.ДатаМодификацииУниверсальная, ДанныеФайла.ИмяФайла, РабочийКаталогПользователя, ПолноеИмяФайлаНаКлиенте);
			
		КонецЕсли;
		
		ФайловыеФункцииКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с формами

// Используется для открытия формы присоединенного файла, из "естественной"
// формы присоединенного файла (формы элемента справочника).
// Параметры
//  Форма - форма справочника присоединенных файлов (будет закрыта)
//
Процедура ПерейтиКФормеПрисоединенногоФайла(Форма) Экспорт
	
	ПрисоединенныйФайл = Форма.Ключ;
	
	Форма.Закрыть();
	
	Для Каждого ОкноКП Из ПолучитьОкна() Цикл
		
		Содержимое = ОкноКП.ПолучитьСодержимое();
		
		Если Содержимое = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Содержимое.ИмяФормы = "ОбщаяФорма.ПрисоединенныйФайл" Тогда
			Если Содержимое.Параметры.Свойство("ПрисоединенныйФайл")
			   И Содержимое.Параметры.ПрисоединенныйФайл = ПрисоединенныйФайл Тогда
				ОкноКП.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОткрытьФормуПрисоединенногоФайла(ПрисоединенныйФайл);
	
КонецПроцедуры

// Обработчик события выбора файла - функция вызывается для переопределения
// стандартного поведения.
// Параметры
//  ВладелецФайлов - ссылка на объект с файлами
//  Элемент - элемент формы, которому будет послано оповещение о выборе
//  СтандартнаяОбработка - булево, всегда устанавливается в Ложь
//
Процедура ОткрытьФормуВыбораФайлов(ВладелецФайлов, Элемент, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе", ВладелецФайлов, Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборПрисоединенныхФайлов", ПараметрыВыбора, Элемент);
	
КонецПроцедуры

// Открывает форму присоединенного файла. Может использоваться как обработчик открытия
// присоединенного файла.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл, карточку которого нужно открыть
//  СтандартнаяОбработка - булево, всегда устанавливается в Ложь
//
Процедура ОткрытьФормуПрисоединенногоФайла(ПрисоединенныйФайл, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ПараметрыОткрытия = Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл);
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыОткрытия,, ПрисоединенныйФайл);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭЦП

// Обработчик команды подписать формы списка. Предлагает пользователю выбрать
// ЭЦП для подписания, получает данные подписи и записывает файл с эцп в хранилище.
// Параметры
//  ПрисоединенныйФайл - присоединенный файл
//  ДанныеФайла - структура с данными файла
// Возвращаемое значение
//  Истина - файл успешно подписан и сохранен в хранилище, Ложь - ошибки или отказ во время работы
//
Функция СформироватьПодписьФайла(ПрисоединенныйФайл, ДанныеФайла) Экспорт
	
	ДанныеПодписи = Неопределено;
	
	Если ВыбратьСертификатыЭЦПИСформироватьДанныеПодписи(ПрисоединенныйФайл, ДанныеФайла, ДанныеПодписи) Тогда
		ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Предлагает пользователю диалог выбора сертификатов ЭЦП, подписывает двоичные данные
// присоединенного файла. Передает в вызывающую процедуру данные подписи.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура с данными файла
//  ДанныеПодписи - структура с данными подписи
// Возвращаемое значение
//  Истина - данные присоединенного файла успешно подписаны
//  Ложь - пользователь отказался от подписания или произошла ошибка
//
Функция ВыбратьСертификатыЭЦПИСформироватьДанныеПодписи(ПрисоединенныйФайл, ДанныеФайла, ДанныеПодписи) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено, операция прервана.'"));
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ПрисоединенныйФайл);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь
	КонецЕсли;
	
	ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
						МенеджерКриптографии,
						ПрисоединенныйФайл,
						ДвоичныеДанные,
						СтруктураПараметровПодписи);
	
	Возврат Истина;
	
КонецФункции

// Реализация команды сохранения файла вместе с ЭЦП
//
Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла);
		
		Если ПолноеИмяФайла = "" Тогда
			Возврат; // пользователь нажал Отмена или это веб клиент без расширения
		КонецЕсли;
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		
		Если Настройка = "Спрашивать" Тогда
			ПараметрыФормы = Новый Структура("Объект, УникальныйИдентификатор", ПрисоединенныйФайл, УникальныйИдентификатор);
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			МассивСтруктурПодписей = ФайловыеФункции.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			ФайловыеФункцииКлиент.СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей);
		КонецЕсли;
		
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Добавить ЭЦП из файла(ов) на диске.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл, которому требуется добавить подпись
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ДобавитьЭЦПИзФайла(ПрисоединенныйФайл, УникальныйИдентификатор = Неопределено) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено, операция прервана.'"));
		Возврат;
	КонецЕсли;
#КонецЕсли
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		МассивПодписей = ПолучитьМассивПодписей(ПрисоединенныйФайл, УникальныйИдентификатор);
		
		Если МассивПодписей.Количество() > 0 Тогда
			ПрисоединенныеФайлы.ЗанестиИнформациюОПодписях(ПрисоединенныйФайл, МассивПодписей, УникальныйИдентификатор);
			ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, МассивПодписей.Количество());
		КонецЕсли;
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Функция вызывает диалог добавления подписей и создает структуру с подписями.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// ОСОБЫЕ УСЛОВИЯ
// Требуется наличие подключенного расширения для работы с файлами
// и расширения для работы со средствами криптографии.
//
Функция ПолучитьМассивПодписей(ПрисоединенныйФайл, УникальныйИдентификатор) Экспорт
	
	МассивФайловПодписей = ОткрытьФормуМодально("ОбщаяФорма.ДобавлениеПодписиИзФайла");
	
	Если ТипЗнч(МассивФайловПодписей) <> Тип("Массив") ИЛИ МассивФайловПодписей.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ФайловыеФункцииКлиент.СформироватьПодписиДляЗанесениюВБазу(ПрисоединенныйФайл, МассивФайловПодписей, УникальныйИдентификатор);
	
КонецФункции

// Служебная процедура используется для оповещения системы об изменении объекта,
// а так же для отображения оповещения пользователя о добавлении подписей.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл с добавленными подписями
//  КоличествоПодписей - количество добавленных подписей
//
Процедура ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, КоличествоПодписей) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Если КоличествоПодписей = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1""'"),
			ПрисоединенныйФайл);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1""'"),
			ПрисоединенныйФайл);
	КонецЕсли;
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шифрование

// Обработчик команды шифрования файла. Выполняет шифрование файла, предварительно
// предлагает пользователю выбрать сертификаты для шифрования. Записывает зашифрованные
// данные вместе с отпечатками в хранилище и оповещает систему и пользователя об изменениях.
//
// Параметры
//  ПрисоединенныйФайл - ссылка на файл, который требуется зашифровать
//  ДанныеФайла - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
// 
Процедура Зашифровать(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	ЗашифрованныеДанные = Неопределено;
	МассивОтпечатков = Новый Массив;
	
	Если НЕ ПолучитьЗашифрованныеДанные(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор, ЗашифрованныеДанные, МассивОтпечатков) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлы.Зашифровать(ПрисоединенныйФайл, ЗашифрованныеДанные, МассивОтпечатков);
	
	ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(ПрисоединенныйФайл, ДанныеФайла);
	
КонецПроцедуры

// Служебная функция используется для шифрования двоичных данных файла
// с помощью выбранных пользователем сертификатов шифрования.
// После шифрования возвращает зашифрованные данные и массив отпечатков.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//  ЗашифрованныеДанные - структура с зашифрованными данными (для записи)
//  МассивОтпечатков - массив отпечатков
// Возвращаемое значение
//  Истина, если данные успешно зашифрованы, Ложь - иначе
//
Функция ПолучитьЗашифрованныеДанные(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор, ЗашифрованныеДанные, МассивОтпечатков) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено, операция прервана.'"));
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	Если ДанныеФайла.Зашифрован Тогда
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Файл ""%1"" уже зашифрован.'"), Строка(ПрисоединенныйФайл)));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
	
	ОтпечатокЛичногоСертификатаДляШифрования = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ОтпечатокЛичногоСертификатаДляШифрования;
	
	// отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		Если Сертификат = Неопределено Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ОтпечатокЛичногоСертификатаДляШифрования = Неопределено ИЛИ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		
		МассивСтруктурЛичныхСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
		
		ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = СтруктураВозврата.Отпечаток;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения("ЭЦП", "ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
		Иначе
			Предупреждение(НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ФайлСсылка, ОтпечатокЛичногоСертификатаДляШифрования",
							МассивСтруктурСертификатов,
							ПрисоединенныйФайл,
							ОтпечатокЛичногоСертификатаДляШифрования);
	
	МассивСертификатов = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы);
	
	Если ТипЗнч(МассивСертификатов) = Тип("Массив") Тогда
		
		Возврат ВыполнитьШифрованиеПоПараметрам(МассивСертификатов,
												ДанныеФайла,
												УникальныйИдентификатор,
												ЗашифрованныеДанные,
												МассивОтпечатков);
			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Служебная функция выполняет шифрование двоичных данных файла
// по переданному массиву сертификатов. Выполняет шифрование и возвращает
// структуру с зашифрованными данными.
// Параметры
//  МассивСертификатов - массив сертификатов для шифрования
//  ДанныеФайла - данные файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//  ЗашифрованныеДанные - зашифрованные данные
//  МассивОтпечатков - массив отпечатков
// Возвращаемое значение
//  Истина - шифрование выполнено успешно, иначе Ложь
//
Функция ВыполнитьШифрованиеПоПараметрам(
				МассивСертификатов,
				ДанныеФайла,
				УникальныйИдентификатор,
				ЗашифрованныеДанные,
				МассивОтпечатков)
	
	МассивОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из МассивСертификатов Цикл
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
		МассивОтпечатков.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Выполняется шифрование ...'"));
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ШифрованныйФайлДвоичныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанные, МассивСертификатов);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШифрованныйФайлДвоичныеДанные, УникальныйИдентификатор);
	
	ЗашифрованныеДанные = Новый Структура("АдресВременногоХранилища", АдресВременногоХранилища);
	
	Состояние();
	
	Возврат Истина;
	
КонецФункции

// Служебная функция используется для оповещения системы и пользователя об
// успешном шифровании файла.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура с данными файла
//
Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(ПрисоединенныйФайл, ДанныеФайла) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Файл ""%1"" зашифрован'"),
							ПрисоединенныйФайл) );
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		ПолныйПутьКФайлу = РабочийКаталогПользователя + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		
		Если Файл.Существует() Тогда
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПутьКФайлу);
			Исключение
				// пытаемся удалить файл с диска
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды расшифровки файла. Показывает пользователю диалог с предложением
// расшифровать файл, далее получает двоичные данные и массив отпечатков и производит расшифровку.
// Далее расшифрованные данные записываются в хранилище.
//
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура Расшифровать(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	РасшифрованныеДанные = Неопределено;
	
	Если НЕ ПолучитьРасшифрованныеДанные(ПрисоединенныйФайл, ДанныеФайла, РасшифрованныеДанные, УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлы.Расшифровать(ПрисоединенныйФайл, РасшифрованныеДанные);
	
	ОповеститьОРасшифровкеФайла(ПрисоединенныйФайл, ДанныеФайла)
	
КонецПроцедуры

// Служебная функция, получает расшифрованные данные файла.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура с данными файла
//  РасшифрованныеДанные - структура с расшифрованными данными, заполняется в процедуре
// УникальныйИдентификатор - уникальный идентификатор формы
// Возвращаемое значение
//  Истина - данные успешно расшифрованы, Ложь - данные не расшифрованы
// 
Функция ПолучитьРасшифрованныеДанные(ПрисоединенныйФайл, ДанныеФайла, РасшифрованныеДанные, УникальныйИдентификатор) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено, операция прервана.'"));
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	ПредставленияСертификатов = "";
	
	МассивСертификатовШифрования = ДанныеФайла.МассивСертификатовШифрования;
	Для Каждого СтруктураСертификата Из МассивСертификатовШифрования Цикл
		Отпечаток = СтруктураСертификата.Отпечаток;
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, Истина);
		Если Сертификат <> Неопределено Тогда 
			Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
				ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
			КонецЕсли;
			ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов, Файл",
									НСтр("ru = 'Введите пароль для расшифровки'"),
									ПредставленияСертификатов,
									ПрисоединенныйФайл);
	
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
	
	Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
		Пароль = КодВозврата;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется расшифровка ...'"));
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	ДвоичныеДанныеРасшифрованные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	АдресВременногоХранилищаРасшифрованныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеРасшифрованные, УникальныйИдентификатор);
	
#Если ВебКлиент Тогда
	АдресВременногоХранилищаТекста = "";
#Иначе
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
	Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
		ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
		ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
		АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПолныйПутьКФайлу, УникальныйИдентификатор);
		УдалитьФайлы(ПолныйПутьКФайлу);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
#КонецЕсли
	
	РасшифрованныеДанные = Новый Структура("АдресВременногоХранилища, АдресВременногоХранилищаТекста",
											АдресВременногоХранилищаРасшифрованныхДанных,
											АдресВременногоХранилищаТекста);
	
	Состояние("");
	
	Возврат Истина;
	
КонецФункции

// Оповещает систему и пользователя о расшифровке файла
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ДанныеФайла - структура с данными файла
//
Процедура ОповеститьОРасшифровкеФайла(ПрисоединенныйФайл, ДанныеФайла) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл ""%1"" расшифрован'"), ПрисоединенныйФайл) );
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные
//

// Получает данные файла с сервера и записывает их в каталог на диске
// Параметры:
//  СсылкаНаДвоичныеДанныеФайла - адрес во временном хранилище с двоичными данными, либо навигационная ссылка на данные файла в ИБ
//  ОтносительныйПуть - путь к файлу относительно рабочего каталога
//  ДатаМодификацииУниверсальная - Дата - универсальная дата модификации файла
//  ИмяФайла - Строка - имя файла (с расширением)
//
// Возвращаемое значение: булево
// Истина - файл получен и сохранен успешно, иначе Ложь
//
// ОСОБЫЕ УСЛОВИЯ
// Требуется наличие подключенного расширения для работы с файлами.
//
Функция ПолучитьФайлВРабочийКаталог(СсылкаНаДвоичныеДанныеФайла,
									ОтносительныйПуть,
									ДатаМодификацииУниверсальная,
									ИмяФайла,
									РабочийКаталогПользователя = "",
									ПолноеИмяФайлаНаКлиенте)
	
	
	Если РабочийКаталогПользователя = Неопределено Или ПустаяСтрока(РабочийКаталогПользователя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогСохранения = РабочийКаталогПользователя + ОтносительныйПуть;
	
	Попытка
		СоздатьКаталог(КаталогСохранения);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания каталога на диске:'") + " " + СообщениеОбОшибке;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Файл = Новый Файл(КаталогСохранения + ИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(КаталогСохранения + ИмяФайла);
	КонецЕсли;
	
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(КаталогСохранения + ИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	ПолученныеФайлы = Новый Массив;
	
	Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
		ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Файл.УстановитьУниверсальноеВремяИзменения(ДатаМодификацииУниверсальная);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура для помещения файлов с диска в хранилище присоединенных файлов
// Параметры:
//  ВыбранныеФайлы - массив - пути к файлам на диске
//  ВладелецФайла - любая ссылка - владелец файла
//  МаксРазмерФайла - число - максимальный размер файла
//  ИзвлекатьТекстыФайловНаСервере - булево - извлекать тексты файлов на сервере
//  УникальныйИдентификатор - уникальный идентификатор формы
//
//  ПрисоединенныеФайлыМассив - массив добавленных в хранилище файлов (ссылки)
//
Процедура ПоместитьВыбранныеФайлыВХранилище(
			ВыбранныеФайлы,
			ВладелецФайла,
			НастройкиРаботыСФайлами,
			ПрисоединенныеФайлыМассив,
			УникальныйИдентификатор)
	
	МаксРазмерФайла						= НастройкиРаботыСФайлами.МаксимальныйРазмерФайла;
	ИзвлекатьТекстыФайловНаСервере		= НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере;
	ЗапретЗагрузкиФайловПоРасширению	= НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений			= НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	ТекущаяПозиция = 0;
	
	Для Каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		Если Файл.Размер() > МаксРазмерФайла Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(Файл.Размер(), МаксРазмерФайла, Файл.Имя));
			Продолжить;
		КонецЕсли;
		
		Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, Файл.Расширение) Тогда
			ВызватьИсключение
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
					Файл.Расширение);
		КонецЕсли;
		
		Если ИзвлекатьТекстыФайловНаСервере Тогда
			АдресВременногоХранилищаТекста = "";
		Иначе
			АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПолноеИмяФайла, УникальныйИдентификатор);
		КонецЕсли;
	
		ВремяИзменения = ТекущаяДата();
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		Если ВыбранныеФайлы.Количество() >1 Тогда
			ОбновитьИндикаторПрогресса(ВыбранныеФайлы.Количество(), ТекущаяПозиция, Файл.Имя, Файл.Размер());
		Иначе
			ИнформироватьПользователяОСохраненииФайла(Файл.Имя, Файл.Размер());
		КонецЕсли;
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя) );
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		
		// Создадим карточку Файла в БД
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
			ВладелецФайла,
			Файл.ИмяБезРасширения,
			ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста,
			Ложь);
		
		Если ПрисоединенныйФайл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисоединенныеФайлыМассив.Добавить(ПрисоединенныйФайл);
		
	КонецЦикла;
	
	Состояние("");
	
КонецПроцедуры

Функция ДиалогНужноПолучитьФайлССервера(ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ФайлРедактируется, Отказ = Ложь)
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
	
	ДатаФайлаВБазе = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
	ДатаФайлаНаДиске = МестноеВремя(ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения());
	
	Если (ДатаФайлаНаДиске - ДатаФайлаВБазе) > 1 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Файл",						ПолноеИмяФайлаНаКлиенте);
		ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",	ДатаФайлаВБазе);
		ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",			ДатаФайлаНаДиске);
		ПараметрыОткрытияФормы.Вставить("Заголовок",				НСтр("ru = 'В рабочем каталоге более новый файл'"));
		
		Если ФайлРедактируется Тогда
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более позднюю дату изменения. Открыть файл из локального каталога или взять из информационной базы и перезаписать?'");
		Иначе
			Сообщение = НСтр("ru = 'Файл на локальном компьютере имеет более позднюю дату, возможно, он был изменен. Открыть существующий или взять с сервера и перезаписать?'");
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ВРабочемКаталогеБолееНовыйФайл", ПараметрыОткрытияФормы);
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли (ДатаФайлаВБазе - ДатаФайлаНаДиске) > 1 Тогда // в базе более новый
		Если ФайлРедактируется Тогда // В рабочем каталоге на редактирование
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",						ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",	ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",			ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",				НСтр("ru = 'В рабочем каталоге более старый файл'"));
			
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять из информационной базы и перезаписать?'");
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВРабочемКаталогеБолееНовыйФайл", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
				Отказ = Истина;
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
				УдалитьФайл(ПолноеИмяФайлаНаКлиенте);
				Возврат Истина;
			КонецЕсли;
		Иначе // В рабочем каталоге на чтение
			УдалитьФайл(ПолноеИмяФайлаНаКлиенте);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные
//

Процедура УдалитьФайл(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолноеИмяФайла);
	
КонецПроцедуры

Функция СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(РазмерФайла, МаксимальныйРазмерФайла, ИмяФайла)
	
	РазмерВМб = РазмерФайла / (1024 * 1024);
	РазмерВМбМакс = МаксимальныйРазмерФайла / (1024 * 1024);
	
	Возврат
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
			ИмяФайла,
			?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")),
			?(РазмерВМбМакс >= 1, Формат(РазмерВМбМакс, "ЧДЦ=0"), Формат(РазмерВМбМакс, "ЧДЦ=1; ЧН=0")));
	
КонецФункции

Процедура ОткрытьФайлПриложением(ИмяОткрываемогоФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								  НСтр("ru = 'Описание=""%1""'"),
								  Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИндикаторПрогресса(КоличествоФайлов, ТекущаяПозиция, ИмяФайла, РазмерФайла)
	
	ИндикаторПроцент = ТекущаяПозиция * 100 / КоличествоФайлов;
	
	РазмерВМб = РазмерФайла / (1024 * 1024);
	
	НадписьПодробнее =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'"),
		ИмяФайла, ? (РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0") ) );
		
	ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'");
	
	Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Процедура ИнформироватьПользователяОСохраненииФайла(ИмяФайла, РазмерФайла)
	
	ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
						|Пожалуйста, подождите...'"),
			ИмяФайла,
			?(РазмерФайла >= 1, Формат(РазмерФайла, "ЧДЦ=0"), Формат(РазмерФайла, "ЧДЦ=1; ЧН=0")));
	
	Состояние(ТекстПояснения);
	
КонецПроцедуры
