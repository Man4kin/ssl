
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Общего назначения
//

// Функция НайденЗапретИзмененияДанных выполняет
// поиск дат запрета по проверяемым данным
// для авторизованного пользователя
//
// Параметры:
//  ДанныеДляПроверки   - таблица, возвращаемая функцией
//                        ДатыЗапретаИзмененияПовтИсп.ШаблонДанныхДляПроверки()
//  СообщитьОЗапрете    - Булево, выводит сообщение о найденных запретах
//                        при проверке данных
//  ИдентификаторДанных - Ссылка на объект данных для получения представления,
//                        используемого в сообщении о запрете
//
// Возвращаемое значение:
//  Булево
//
Функция НайденЗапретИзмененияДанных(Знач ДанныеДляПроверки, Знач СообщитьОЗапрете, Знач ИдентификаторДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеДляПроверки) = Тип("Структура") Тогда
		ИдентификаторДанных = ДанныеДляПроверки.ИдентификаторДанных;
		ТаблицаДанных       = ДанныеДляПроверки.Таблица;
		ДанныеДляПроверки = ПолучитьДанныеДляПроверки(ДанныеДляПроверки);
	Иначе
		Если ИдентификаторДанных = Неопределено Тогда
			ТаблицаДанных = Неопределено;
		Иначе
			ТаблицаДанных = ИдентификаторДанных.Метаданные().ПолноеИмя();
		КонецЕсли;
	КонецЕсли;
	
	// Приведение пустых ссылок объектов к единому значению Неопределено
	Для каждого Строка Из ДанныеДляПроверки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Объект) Тогда
			Строка.Объект = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Свертка лишних строк, чтобы сократить число проверок и сообщений
	ДанныеДляПроверки.Свернуть("Дата, Раздел, Объект");
	// Назначение ключей для отдельных проверок
	ДанныеДляПроверки.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Число"));
	ТекущийКлючСтроки = 0;
	Для каждого Строка Из ДанныеДляПроверки Цикл
		Строка.КлючСтроки = ТекущийКлючСтроки;
		ТекущийКлючСтроки = ТекущийКлючСтроки + 1;
	КонецЦикла;
	
	СвойстваВстраивания = ДатыЗапретаИзмененияПовтИсп.СвойстваРазделов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеДляПроверки",          ДанныеДляПроверки);
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("БезРазделовИОбъектов",       СвойстваВстраивания.БезРазделовИОбъектов);
	Запрос.УстановитьПараметр("ВсеРазделыБезОбъектов",      СвойстваВстраивания.ВсеРазделыБезОбъектов);
	Запрос.УстановитьПараметр("ЕдинственныйРаздел",         СвойстваВстраивания.ЕдинственныйРаздел);
	Запрос.УстановитьПараметр("ПервыйРаздел",               ?(СвойстваВстраивания.ЕдинственныйРаздел,
	                                                          СвойстваВстраивания.ТипыОбъектовРазделов[0],
	                                                          Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляПроверки.Раздел,
	|	ДанныеДляПроверки.Объект,
	|	ДанныеДляПроверки.Дата,
	|	ДанныеДляПроверки.КлючСтроки
	|ПОМЕСТИТЬ НачальныеДанные
	|ИЗ
	|	&ДанныеДляПроверки КАК ДанныеДляПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Раздел,
	|	Данные.Объект,
	|	МИНИМУМ(Данные.Дата) КАК Дата,
	|	МИНИМУМ(Данные.КлючСтроки) КАК КлючСтроки
	|ПОМЕСТИТЬ ДанныеДляПроверки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &БезРазделовИОбъектов
	|				ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
	|			КОГДА &ЕдинственныйРаздел
	|				ТОГДА &ПервыйРаздел
	|			ИНАЧЕ НачальныеДанные.Раздел
	|		КОНЕЦ КАК Раздел,
	|		ВЫБОР
	|			КОГДА &БезРазделовИОбъектов
	|				ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ВсеРазделыБезОбъектов
	|							ИЛИ НачальныеДанные.Объект = НЕОПРЕДЕЛЕНО
	|						ТОГДА ВЫБОР
	|								КОГДА &ЕдинственныйРаздел
	|									ТОГДА &ПервыйРаздел
	|								ИНАЧЕ НачальныеДанные.Раздел
	|							КОНЕЦ
	|					ИНАЧЕ НачальныеДанные.Объект
	|				КОНЕЦ
	|		КОНЕЦ КАК Объект,
	|		НачальныеДанные.Дата КАК Дата,
	|		НачальныеДанные.КлючСтроки КАК КлючСтроки
	|	ИЗ
	|		НачальныеДанные КАК НачальныеДанные) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Раздел,
	|	Данные.Объект
	|
	|ИМЕЮЩИЕ
	|	(НЕ(Данные.Объект <> Данные.Раздел
	|			И ТИПЗНАЧЕНИЯ(Данные.Объект) = ТИП(ПланВидовХарактеристик.РазделыДатЗапретаИзменения))) И
	|	(НЕ(Данные.Объект <> Данные.Раздел
	|			И Данные.Раздел = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПроверки.КлючСтроки,
	|	ДатыЗапретаИзменения.Раздел,
	|	ДатыЗапретаИзменения.Объект,
	|	ДанныеДляПроверки.Дата,
	|	ДатыЗапретаИзменения.Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета,
	|	ВЫБОР
	|		КОГДА ДатыЗапретаИзменения.Пользователь = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА 1
	|		КОГДА ТИПЗНАЧЕНИЯ(ДатыЗапретаИзменения.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|			ТОГДА 1
	|		ИНАЧЕ 10
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДатыЗапретаИзменения.Объект = ДатыЗапретаИзменения.Раздел
	|			ТОГДА 0
	|		ИНАЧЕ 100
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДатыЗапретаИзменения.Раздел = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1000
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ДатыЗапретаБезУчетаПриоритета
	|ИЗ
	|	ДанныеДляПроверки КАК ДанныеДляПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|		ПО (ДатыЗапретаИзменения.Раздел В (ДанныеДляПроверки.Раздел, ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)))
	|			И (ДатыЗапретаИзменения.Объект В (ДанныеДляПроверки.Объект, ДатыЗапретаИзменения.Раздел))
	|			И (ВЫБОР
	|				КОГДА ДатыЗапретаИзменения.Пользователь = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ДатыЗапретаИзменения.Пользователь В
	|						(ВЫБРАТЬ
	|							СоставГруппПользователей.ГруппаПользователей
	|						ИЗ
	|							РегистрСведений.СоставГруппПользователей КАК СоставГруппПользователей
	|						ГДЕ
	|							СоставГруппПользователей.Пользователь = &АвторизованныйПользователь)
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПроверки.Раздел,
	|	ДанныеДляПроверки.Объект,
	|	ДанныеДляПроверки.Дата,
	|	ДанныеДляПроверки.КлючСтроки
	|ИЗ
	|	ДанныеДляПроверки КАК ДанныеДляПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыЗапрета.КлючСтроки КАК КлючСтроки,
	|	ДатыЗапрета.Раздел,
	|	ДатыЗапрета.Объект,
	|	ДатыЗапрета.Пользователь,
	|	ДатыЗапрета.ДатаЗапрета
	|ИЗ
	|	ДатыЗапретаБезУчетаПриоритета КАК ДатыЗапрета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыЗапрета.КлючСтроки КАК КлючСтроки,
	|			ДатыЗапрета.Приоритет КАК Приоритет,
	|			МАКСИМУМ(ДатыЗапрета.ДатаЗапрета) КАК ДатаЗапрета
	|		ИЗ
	|			ДатыЗапретаБезУчетаПриоритета КАК ДатыЗапрета
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ДатыЗапрета.КлючСтроки КАК КлючСтроки,
	|					МАКСИМУМ(ДатыЗапрета.Приоритет) КАК Приоритет
	|				ИЗ
	|					ДатыЗапретаБезУчетаПриоритета КАК ДатыЗапрета
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ДатыЗапрета.КлючСтроки) КАК МаксимальныеПриоритет
	|				ПО ДатыЗапрета.КлючСтроки = МаксимальныеПриоритет.КлючСтроки
	|					И ДатыЗапрета.Приоритет = МаксимальныеПриоритет.Приоритет
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДатыЗапрета.КлючСтроки,
	|			ДатыЗапрета.Приоритет) КАК ПриоритетныеДатыЗапрета
	|		ПО ДатыЗапрета.КлючСтроки = ПриоритетныеДатыЗапрета.КлючСтроки
	|			И ДатыЗапрета.Приоритет = ПриоритетныеДатыЗапрета.Приоритет
	|			И ДатыЗапрета.ДатаЗапрета = ПриоритетныеДатыЗапрета.ДатаЗапрета
	|ГДЕ
	|	ДатыЗапрета.ДатаЗапрета >= ДатыЗапрета.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки
	|ИТОГИ ПО
	|	КлючСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ЗапретыДанных = РезультатыЗапроса[4].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если СообщитьОЗапрете И ЗапретыДанных.Строки.Количество() > 0 Тогда
		//
		Проверки = РезультатыЗапроса[3].Выгрузить();
		Текст = ПолучитьПредставлениеДанных(ИдентификаторДанных, ТаблицаДанных);
		Если ЗначениеЗаполнено(Текст) Тогда
			Текст = Текст + НСтр("ru = ' запрещено произвольно изменять.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		//
		Для каждого ОписаниеЗапретов Из ЗапретыДанных.Строки Цикл
			Запреты  = ОписаниеЗапретов.Строки;
			Проверка = Проверки.Найти(ОписаниеЗапретов.КлючСтроки, "КлючСтроки");
			Если Проверка.Раздел = Проверка.Объект Тогда
				Если Проверка.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка() Тогда
					Текст = Текст + НСтр("ru = 'Для даты %1'");
				Иначе
					Текст = Текст + НСтр("ru = 'Для даты %1 в разделе ""%2""'");
				КонецЕсли;
			Иначе
				Текст = Текст + НСтр("ru = 'Для даты %1 в разделе ""%2"" с объектом ""%3""'");
			КонецЕсли;
			Если Запреты.Количество() = 1 Тогда
				Текст = Текст + " " + НСтр("ru = 'установлен запрет изменения данных'") + " ";
			Иначе
				Текст = Текст + " " + НСтр("ru = 'установлены запреты изменения данных:'") + Символы.ПС;
			КонецЕсли;
			Для каждого Запрет Из Запреты Цикл
				
				Текст = Текст + ?(Запреты.Количество() = 1, "", Символы.ПС + "- ");
				Если Запрет.Пользователь = Неопределено Тогда
					Текст = Текст + НСтр("ru = 'для всех пользователей'");
				ИначеЕсли ТипЗнч(Запрет.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
				      ИЛИ ТипЗнч(Запрет.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
					Текст = Текст + НСтр("ru = 'для группы пользователей ""%4""'");
				Иначе
					Текст = Текст + НСтр("ru = 'для пользователя ""%4""'");
				КонецЕсли;
				Текст = Текст + " " + НСтр("ru = 'по %5'");
				Если НЕ СвойстваВстраивания.БезРазделовИОбъектов Тогда
					Если ЗначениеЗаполнено(Запрет.Раздел) Тогда
						Если Запрет.Объект = Запрет.Раздел Тогда
							Текст = Текст + " " + НСтр("ru = '(дата запрета по разделу)'");
						ИначеЕсли СвойстваВстраивания.ЕдинственныйРаздел Тогда
							Текст = Текст + " " + НСтр("ru = '(дата запрета по объекту)'");
						Иначе
							Текст = Текст + " " + НСтр("ru = '(дата запрета по разделу с объектом)'");
						КонецЕсли;
					Иначе
						Текст = Текст + " " + НСтр("ru = '(общая дата запрета)'");
					КонецЕсли;
				КонецЕсли;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Текст,
							Формат(Проверка.Дата, "ДФ=dd.MM.yyyy"),
							Проверка.Раздел,
							Проверка.Объект,
							Запрет.Пользователь,
							Формат(Запрет.ДатаЗапрета, "ДФ=dd.MM.yyyy"))
						+ Символы.ПС;
			КонецЦикла;
			Текст = Текст + Символы.ПС;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	Возврат ЗапретыДанных.Строки.Количество() > 0;
	
КонецФункции

// Процедура ПересчитатьТекущиеЗначенияОтносительныхДатЗапрета выполняет
// пересчет и обновление текущий значений относительных дат
// запрета по состоянию на текущую дату
//
// Параметры:
//  ЗаписатьОписаниеРезультатаВЖурналРегистрации - Булево
//  ОписаниеРезультата - Строка
//
Процедура ПересчитатьТекущиеЗначенияОтносительныхДатЗапрета(ЗаписатьОписаниеРезультатаВЖурналРегистрации = Истина, ОписаниеРезультата = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел,
	|	ДатыЗапретаИзменения.Объект,
	|	ДатыЗапретаИзменения.Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяДатаНаСервере = НачалоДня(ТекущаяДата());
	МенеджерЗаписи = РегистрыСведений.ДатыЗапретаИзменения.СоздатьМенеджерЗаписи();
	ПредставлениеОшибки = "";
	Отказ = Ложь;
	ЕстьОбновленныеДаты = Ложь;
	НетОтносительныхДат = Истина;
	
	Пока Выборка.Следующий() Цикл
		РассчитаннаяДатаЗапрета = РассчитатьДатуЗапретаПоОписанию(ТекущаяДатаНаСервере, Выборка.ОписаниеДатыЗапрета);
		//
		Если ЗначениеЗаполнено(РассчитаннаяДатаЗапрета) Тогда
			НетОтносительныхДат = Ложь;
			Если Выборка.ДатаЗапрета <> РассчитаннаяДатаЗапрета Тогда
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.ДатаЗапрета = РассчитаннаяДатаЗапрета;
					Попытка
						МенеджерЗаписи.Записать();
						ЕстьОбновленныеДаты = Истина;
					Исключение
						Отказ = Истина;
						ПредставлениеОшибки = ПредставлениеОшибки + Символы.ПС + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					КонецПопытки
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НетОтносительныхДат Тогда
		ОписаниеРезультата = НСтр("ru = 'Относительные даты запрета не заданы.'");
		//
	ИначеЕсли Отказ Тогда
		Если ЕстьОбновленныеДаты Тогда
			ОписаниеРезультата = НСтр("ru = 'Пересчитаны некоторые текущие значения относительных дат запрета.
			                                |При пересчете возникли ошибки:'");
		Иначе
			ОписаниеРезультата = НСтр("ru = 'Не пересчитаны текущие значения дат запрета.
			                                |При пересчете возникли ошибки:'");
		КонецЕсли;
		ОписаниеРезультата = ОписаниеРезультата + ПредставлениеОшибки;
	Иначе
		Если ЕстьОбновленныеДаты Тогда
			ОписаниеРезультата = НСтр("ru = 'Успешно пересчитаны текущие значения относительных дат запрета.'");
		Иначе
			ОписаниеРезультата = НСтр("ru = 'Сегодня уже пересчитаны текущие значения относительных дат запрета.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьОписаниеРезультатаВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Даты запрета изменения.Пересчет относительных дат'"),
		                         ?(Отказ, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация),
		                         ,
		                         ,
		                         ОписаниеРезультата,
		                         РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Обработчик регламентного задания

// Обработчик регламентного задания ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения
Процедура ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения() Экспорт
	
	ПересчитатьТекущиеЗначенияОтносительныхДатЗапрета();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Функция проверяет наличие установленных запретов
// изменения данных
//
Функция ЗапретИзмененияДанныхНеИспользуется() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

Функция ПолучитьПредставлениеДанных(ИдентификаторДанных, ТаблицаДанных)
	
	ПредставлениеДанных = "";
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ТаблицаДанных);
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ПредставлениеДанных = НСтр("ru = 'Записи регистра сведений ""%1""'");
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		ПредставлениеДанных = НСтр("ru = 'Записи регистра накопления ""%1""'");
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		ПредставлениеДанных = НСтр("ru = 'Записи регистра бухгалтерии ""%1""'");
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		ПредставлениеДанных = НСтр("ru = 'Записи регистра расчета ""%1""'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеДанных) Тогда
		//
		Если ИдентификаторДанных.Количество() = 1 Тогда
			ПредставлениеДанных = ПредставлениеДанных + " " + НСтр("ru = 'c полем'")  + " " + Строка(ИдентификаторДанных);
			//
		ИначеЕсли ИдентификаторДанных.Количество() > 1 Тогда
			ПредставлениеДанных = ПредставлениеДанных + " " + НСтр("ru = 'c полями'") + " " + Строка(ИдентификаторДанных);
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'Элемент справочника ""%1""'");
		
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'Документ'");
		
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'План видов характеристик ""%1""'");
			
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'План счетов ""%1""'");
			
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'План видов расчета ""%1""'");
			
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'Бизнес-процесс'");
			
		ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'Задача'");
			
		ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
			ПредставлениеДанных = НСтр("ru = 'План обмена ""%1""'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеДанных) И ЗначениеЗаполнено(ИдентификаторДанных) Тогда
			ПредставлениеДанных = ПредставлениеДанных + " " + Строка(ИдентификаторДанных);
		Иначе
			ПредставлениеДанных = "";
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДанных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДанных, ОбъектМетаданных.Синоним);
	
	Возврат ПредставлениеДанных;
	
КонецФункции

Функция РассчитатьДатуЗапретаПоОписанию(ТекущаяДатаНаСервере, ОписаниеДатыЗапрета)
	
	Сутки = 60*60*24;
	ВариантДатыЗапрета = "";
	КоличествоДнейРазрешения = 0;
	
	Если ЗначениеЗаполнено(ОписаниеДатыЗапрета) Тогда
		ВариантДатыЗапрета = СтрПолучитьСтроку(ОписаниеДатыЗапрета, 1);
		Строка2            = СтрПолучитьСтроку(ОписаниеДатыЗапрета, 2);
		Если ЗначениеЗаполнено(Строка2) Тогда
			Попытка
				КоличествоДнейРазрешения = Число(Строка2);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантДатыЗапрета = "КонецПрошлогоГода" Тогда
		ТекущаяДатаЗапрета    = НачалоГода(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоГода(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоКвартала" Тогда
		ТекущаяДатаЗапрета    = НачалоКвартала(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоКвартала(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлогоМесяца" Тогда
		ТекущаяДатаЗапрета    = НачалоМесяца(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоМесяца(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "КонецПрошлойНедели" Тогда
		ТекущаяДатаЗапрета    = НачалоНедели(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоНедели(ТекущаяДатаЗапрета) - Сутки;
		
	ИначеЕсли ВариантДатыЗапрета = "ПредыдущийДень" Тогда
		ТекущаяДатаЗапрета    = НачалоДня(ТекущаяДатаНаСервере) - Сутки;
		ПредыдущаяДатаЗапрета = НачалоДня(ТекущаяДатаЗапрета) - Сутки;
	Иначе
		ТекущаяДатаЗапрета    = '00000000';
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяДатаЗапрета) Тогда
		СрокРазрешения = ТекущаяДатаЗапрета + КоличествоДнейРазрешения * Сутки;
		Если НЕ ТекущаяДатаНаСервере > СрокРазрешения Тогда
			ТекущаяДатаЗапрета = ПредыдущаяДатаЗапрета;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяДатаЗапрета;
	
КонецФункции

Функция ПолучитьДанныеДляПроверки(ПредварительныеДанные)
	
	ДанныеДляПроверки = ДатыЗапретаИзмененияПовтИсп.ШаблонДанныхДляПроверки().Скопировать();
	
	ИсточникиДанныхТаблиц = ДатыЗапретаИзмененияПовтИсп.ИсточникиДанныхДляПроверкиЗапретаИзменения();
	//
	Отбор = Новый Структура("Таблица", ПредварительныеДанные.Таблица);
	ИсточникиДанных = ИсточникиДанныхТаблиц.НайтиСтроки(Отбор);
	//
	Если ИсточникиДанных.Количество() = 0 Тогда
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для проверки запрета изменения не найдены
			           |источники данных для таблицы ""%1"".'"),
			Отбор.Таблица));
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПредварительныеДанные.Таблица);
	
	ЭтоНаборЗаписей = ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных);
	КлассОМ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Отбор.Таблица, ".")[0];
	
	ЗначенияПолей = Неопределено;
	
	Если ПредварительныеДанные.ИдентификаторДанных <> Неопределено Тогда
		Если ЭтоНаборЗаписей Тогда
			// Заполнение значений полей из базы данных
			Поля = ДатыЗапретаИзменения.ПолучитьПоляРегистра(ИсточникиДанных, Отбор.Таблица);
			Запрос = Новый Запрос;
			Если ПредварительныеДанные.ИдентификаторДанных.Количество() = 0 Тогда
				Запрос.Текст =
				"ВЫБРАТЬ
				|	&Поля
				|ИЗ
				|	&Таблица КАК Таблица";
			Иначе
				Запрос.Текст =
				"ВЫБРАТЬ
				|	&Поля
				|ИЗ
				|	&Таблица КАК Таблица
				|ГДЕ
				|	&УсловиеОтбора";
				ВставитьПараметрыИУсловиеОтбора(Запрос, ПредварительныеДанные.ИдентификаторДанных);
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля",    Поля);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", Отбор.Таблица);
			ЗначенияПолей = Запрос.Выполнить().Выгрузить();
			ЗначенияПолей.Свернуть(Поля);
			//
		ИначеЕсли ЗначениеЗаполнено(ПредварительныеДанные.ИдентификаторДанных) Тогда
			// Заполнение значений полей из базы данных
			ЗначенияПолей = ДатыЗапретаИзменения.ПолучитьСтруктуруПолейОбъекта(ОбъектМетаданных, ИсточникиДанных, Отбор.Таблица);
			// Установка значений полей
			Поля = "";
			Для каждого Поле Из ЗначенияПолей Цикл
				Если ОбъектМетаданных.ТабличныеЧасти.Найти(Поле.Ключ) <> Неопределено Тогда
					Поля = Поля + Поле.Ключ + ".(" + Поле.Значение + "),";
				Иначе
					Поля = Поля + Поле.Ключ + ",";
				КонецЕсли;
			КонецЦикла;
			Поля = Лев(Поля, СтрДлина(Поля)-1);
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&Поля
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля",    Поля);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", Отбор.Таблица);
			Запрос.УстановитьПараметр("Ссылка", ПредварительныеДанные.ИдентификаторДанных);
			ДанныеИзБазы = Запрос.Выполнить().Выгрузить();
			Для каждого Поле Из ЗначенияПолей Цикл
				Если ОбъектМетаданных.ТабличныеЧасти.Найти(Поле.Ключ) <> Неопределено Тогда
					Поля = Поле.Значение;
					ЗначенияПолей[Поле.Ключ] = ДанныеИзБазы[0][Поле.Ключ].Скопировать(, Поля);
					ЗначенияПолей[Поле.Ключ].Свернуть(Поля);
				Иначе
					ЗначенияПолей[Поле.Ключ] = ДанныеИзБазы[0][Поле.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредварительныеДанные.ЗначенияПолейИзОбъекта <> Неопределено Тогда
		ДобавитьДанныеДляПроверки(ДанныеДляПроверки, ИсточникиДанных, ПредварительныеДанные.ЗначенияПолейИзОбъекта, ЭтоНаборЗаписей, ОбъектМетаданных);
	КонецЕсли;
	
	Если ЗначенияПолей <> Неопределено Тогда
		ДобавитьДанныеДляПроверки(ДанныеДляПроверки, ИсточникиДанных, ЗначенияПолей, ЭтоНаборЗаписей, ОбъектМетаданных);
	КонецЕсли;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

Процедура ДобавитьДанныеДляПроверки(Знач ДанныеДляПроверки, Знач ИсточникиДанных, Знач ЗначенияПолей, Знач ЭтоНаборЗаписей, Знач ОбъектМетаданных)
	
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ЭтоНаборЗаписей Тогда
			Для каждого Строка Из ЗначенияПолей Цикл
				ДобавитьСтрокуДанных(Строка, Строка, ИсточникДанных, ДанныеДляПроверки);
			КонецЦикла;
		Иначе
			ДопИсточникДанных = Новый Структура("ПолеДаты, Раздел, ПолеОбъекта, Таблица");
			ЗаполнитьЗначенияСвойств(ДопИсточникДанных, ИсточникДанных);
			ТЧПоляДаты = "";
			ПозицияТочки = Найти(ДопИсточникДанных.ПолеДаты, ".");
			Если ПозицияТочки <> 0 Тогда
				ТЧПоляДаты = Лев( ДопИсточникДанных.ПолеДаты, ПозицияТочки-1);
				Если ОбъектМетаданных.ТабличныеЧасти.Найти(ТЧПоляДаты) = Неопределено Тогда
					ТЧПоляДаты = "";
				Иначе
					ДопИсточникДанных.ПолеДаты = Сред(ДопИсточникДанных.ПолеДаты, ПозицияТочки+1);
				КонецЕсли;
			КонецЕсли;
			ТЧПоляОбъекта = "";
			ПолеОбъекта = "";
			Если ЗначениеЗаполнено(ДопИсточникДанных.ПолеОбъекта) Тогда
				ПозицияТочки = Найти(ДопИсточникДанных.ПолеОбъекта, ".");
				Если ПозицияТочки <> 0 Тогда
					ТЧПоляОбъекта = Лев( ДопИсточникДанных.ПолеОбъекта, ПозицияТочки-1);
					Если ОбъектМетаданных.ТабличныеЧасти.Найти(ТЧПоляОбъекта) = Неопределено Тогда
						ТЧПоляОбъекта = "";
					Иначе
						ДопИсточникДанных.ПолеОбъекта = Сред(ДопИсточникДанных.ПолеОбъекта, ПозицияТочки+1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТЧПоляДаты) И ЗначениеЗаполнено(ТЧПоляОбъекта) Тогда
				Если ТЧПоляДаты = ТЧПоляОбъекта Тогда
					Для каждого Строка Из ЗначенияПолей[ТЧПоляДаты] Цикл
						ДобавитьСтрокуДанных(Строка, Строка, ДопИсточникДанных, ДанныеДляПроверки);
					КонецЦикла;
				Иначе
					Для каждого СтрокаДаты Из ЗначенияПолей[ТЧПоляДаты] Цикл
						Для каждого СтрокаОбъекта Из ЗначенияПолей[ТЧПоляОбъекта] Цикл
							ДобавитьСтрокуДанных(СтрокаДаты, СтрокаОбъекта, ДопИсточникДанных, ДанныеДляПроверки);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ТЧПоляДаты) Тогда
				Для каждого Строка Из ЗначенияПолей[ТЧПоляДаты] Цикл
					ДобавитьСтрокуДанных(Строка, ЗначенияПолей, ДопИсточникДанных, ДанныеДляПроверки);
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ТЧПоляОбъекта) Тогда
				Для каждого Строка Из ЗначенияПолей[ТЧПоляОбъекта] Цикл
					ДобавитьСтрокуДанных(ЗначенияПолей, Строка, ДопИсточникДанных, ДанныеДляПроверки);
				КонецЦикла;
			Иначе
				ДобавитьСтрокуДанных(ЗначенияПолей, ЗначенияПолей, ДопИсточникДанных, ДанныеДляПроверки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДанных(Знач СтрокаДаты, Знач СтрокаОбъекта, Знач ИсточникДанных, Знач ДанныеДляПроверки)
	
	НоваяСтрока = ДанныеДляПроверки.Добавить();
	УстановитьЗначениеПоля(СтрокаДаты, НоваяСтрока.Дата, ИсточникДанных.ПолеДаты);
	Если ЗначениеЗаполнено(ИсточникДанных.Раздел) Тогда
		НоваяСтрока.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения[ИсточникДанных.Раздел];
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсточникДанных.ПолеОбъекта) Тогда
		УстановитьЗначениеПоля(СтрокаОбъекта, НоваяСтрока.Объект, ИсточникДанных.ПолеОбъекта)
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПоля(Знач Строка, ПолеДанных, Знач ПолеИсточника)
	
	ПозицияТочки = Найти(ПолеИсточника, ".");
	Если ПозицияТочки = 0 Тогда
		ПолеДанных = Строка[ПолеИсточника];
	Иначе
		Значение = Строка[Лев(ПолеИсточника, ПозицияТочки-1)];
		Реквизит = Сред(ПолеИсточника, ПозицияТочки+1);
		ПолеДанных = ПолучитьЗначениеРеквизита(Значение, Реквизит);
	КонецЕсли;
	
КонецПроцедуры

// Функция ПолучитьУсловиеОтбораНаЯзыкеЗапросов преобразует
// объект Отбор в условие на языке запросов.
//
// Параметры:
//  Запрос             - Запрос
//  Отбор              - РегистрСведенийНаборЗаписей.Отбор,
//                       РегистрНакопленияНаборЗаписей.Отбор,
//                       РегистрБухгалтерииНаборЗаписей.Отбор,
//                       РегистрРасчетаНаборЗаписей.Отбор,
//  ПсевдонимТаблицы   - Строка - псевдоним регистра в запросе.
//  МестоУсловияОтбора - Строка - Идентификатор места условия в запросе,
//                       например, &УсловиеОтбора
//
// Возвращаемое значение:
//  Строка
//
Процедура ВставитьПараметрыИУсловиеОтбора(Запрос, Отбор, ПсевдонимТаблицы = "Таблица", МестоУсловияОтбора = "&УсловиеОтбора")
	
	Условие = "";
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ЭлементОтбора.Использование Тогда
			Если НЕ ПустаяСтрока(Условие) Тогда
				Условие = Условие + Символы.ПС + "И ";
			КонецЕсли;
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			Условие = Условие + ПсевдонимТаблицы + "." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, МестоУсловияОтбора, Условие);
	
КонецПроцедуры

// Процедура ПолучитьЗначениеРеквизита только для внутреннего использования
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕстьNULL(" + ИмяРеквизита + ", Неопределено) КАК ЗначениеРеквизита
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЗначениеРеквизита;
	
КонецФункции
