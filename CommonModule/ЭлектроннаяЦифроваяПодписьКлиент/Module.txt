////////////////////////////////////////////////////////////////////////////////
//  ПРОГРАММНЫЙ ИНТЕРФЕЙС ДЛЯ РАБОТЫ С ПОДПИСЯМИ

// Формирует данные подписи объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектДляПодписиСсылка  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭЦП
Функция СформироватьДанныеПодписи(
			МенеджерКриптографии,
			ОбъектДляПодписиСсылка,
			ДвоичныеДанные,
			СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = ТекущаяДата();
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
							ОбъектДляПодписиСсылка,
							НоваяПодписьДвоичныеДанные,
							Отпечаток,
							ДатаПодписи,
							СтруктураПараметровПодписи.Комментарий,
							"", // ИмяФайлаПодписи
							КомуВыданСертификат,
							"", // АдресФайла
							ДвоичныеДанныеСертификата);
		
	Возврат ДанныеПодписи;
	
КонецФункции

// Проверяет подпись. В случае ошибки бросает исключение
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ДвоичныеДанныеФайла  -    двоичные данные файла
//  ДвоичныеДанныеПодписи  -  двоичные данные подписи
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	Сертификат = Неопределено;
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	
	МассивРежимовПроверки = Новый Массив;
	МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
	МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
//  ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ДЛЯ РАБОТЫ С ЭЦП

// По окончании подписания нотифицирует о подписании
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
Процедура ИнформироватьОПодписанииОбъекта(ОбъектСсылка) Экспорт
	
	ОповеститьОбИзменении(ОбъектСсылка);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		ОбъектСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции	

//  Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ТекущаяДата = ТекущаяДата();
	
	// для подписи
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
			Продолжить; // отфильтровываем истекшие сертификаты
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // отфильтровываем истекшие сертификаты
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции	

// Создает на клиенте менеджер криптографии.  Пароль не устанавливается
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь) Экспорт
	
	Отказ = Ложь;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ПровайдерЭЦП = ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПровайдерЭЦП;
	ПутьМодуляКриптографии = ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПутьМодуляКриптографии;
	ТипПровайдераЭЦП = ПолучитьПерсональныеНастройкиРаботыСЭЦП().ТипПровайдераЭЦП;
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	
	МенеджерКриптографии.АлгоритмПодписи = ПолучитьПерсональныеНастройкиРаботыСЭЦП().АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = ПолучитьПерсональныеНастройкиРаботыСЭЦП().АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = ПолучитьПерсональныеНастройкиРаботыСЭЦП().АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Открывает форму просмотра сертификата ЭЦП
//
// Параметры
//  Отпечаток  - Строка - отпечаток сертификата ЭЦП
//
Процедура ОткрытьСертификат(Отпечаток) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток", СтруктураСертификата, Отпечаток);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭЦП
//
// Параметры
//  СтруктураСертификата - Структура с полями сертификата
//  Отпечаток  - Строка - отпечаток сертификата ЭЦП
//  АдресСертификата - Строка - адрес сертификата во временном хранилище
//
Процедура ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, АдресСертификата) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата", 
			СтруктураСертификата, Отпечаток, АдресСертификата);
		ОткрытьФормуМодально("ОбщаяФорма.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую различные персональные настройки
Функция ПолучитьПерсональныеНастройкиРаботыСЭЦП() Экспорт
	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСЭЦП;
КонецФункции	
