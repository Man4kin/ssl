
// Функция возвращает каталог "Мои Документы" + имя текущего пользователя
Функция КаталогПоследнейВыгрузки() Экспорт
	Путь = "";
	#Если Не ВебКлиент Тогда	
		
	Путь = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки");
	Если Путь = Неопределено Тогда
		Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			Оболочка = Новый COMОбъект("MSScriptControl.ScriptControl");
			Оболочка.Language = "vbscript";
			Оболочка.AddCode("
				|Function SpecialFoldersName(Name)
				|set Shell=CreateObject(""WScript.Shell"")
				|SpecialFoldersName=Shell.SpecialFolders(Name)
				|End Function");
			Путь = НормализоватьКаталог(Оболочка.Run("SpecialFoldersName", "MyDocuments"));
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки", Путь);
		КонецЕсли;	
	КонецЕсли;
		
	#КонецЕсли
	Возврат Путь;
КонецФункции

// Функция добавляет концевой слэш к имени каталога, если это надо
// а также удаляет все запрещенные символы из имени каталога
// кроме того, "/" заменяется на "\"
Функция НормализоватьКаталог(ИмяКаталога) Экспорт
	Результат = СокрЛП(ИмяКаталога);
	
	// Запомним наличие "Диск:" в начале пути и потом вернем ":" после имени диска
	СтрДиск = "";
	Если Сред(Результат, 2, 1) = ":" Тогда
		СтрДиск = Сред(Результат, 1, 2);
		Результат = Сред(Результат, 3);
	Иначе
		
		// А здесь проверим, что у нас не UNC-путь (т.е. путь начинающийся на "\\")
		Если Сред(Результат, 2, 2) = "\\" Тогда
			СтрДиск = Сред(Результат, 1, 2);
			Результат = Сред(Результат, 3);
		КонецЕсли;
	КонецЕсли;
	
	// Делаем слэши в Windows-стиле
	Результат = СтрЗаменить(Результат, "/", "\");
	
	// Добавляем финишный слэш
	Результат = СокрЛП(Результат);
	Если Прав(Результат,1) <> "\" Тогда
		Результат = Результат + "\";
	КонецЕсли;
	
	// Заменим все двойные слэши на одинарные и  получим полный путь
	Результат = СтрДиск + СтрЗаменить(Результат, "\\", "\");
	
	Возврат Результат;
КонецФункции

// Процедура предназначена для проверки имени файла на наличие некорректных символов
// Параметры:
//  СтрИмяФайла  - Строка
//                 проверяемое имя файла
//  ФлУдалятьНекорректные - Булево
//                 удалять или нет некорректные символы из переданной строки
Процедура КорректноеИмяФайла(СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	//  при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	ТекстОшибки =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	  НСтр("ru = 'В имени файла не должно быть следующих символов: %1'"), СтрИсключения);
	
	Результат = Истина;
	
	Для Сч=1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Результат = Ложь;
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры // КорректноеИмяФайла()

// Рекурсивно обойти каталоги и посчитать количество файлов и их суммарный размер
Процедура ОбходФайловРазмер(Путь, МассивФайлов, РазмерСуммарный, КоличествоСуммарное) Экспорт
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			НовыйПуть = НовыйПуть + "\";
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловРазмер(НовыйПуть, МассивФайловВКаталоге, РазмерСуммарный, КоличествоСуммарное);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		РазмерСуммарный = РазмерСуммарный + ВыбранныйФайл.Размер();
		КоличествоСуммарное = КоличествоСуммарное + 1;
		
	КонецЦикла;
КонецПроцедуры

// Получает относительный путь к файлу в рабочем каталоге - если есть в регистре сведений - оттуда,
// если нет - сгенерируем - и запишем в регистр сведений
Функция ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла) Экспорт
	ПутьДляВозврата	= "";
	ИмяФайлаСПутем = "";
	РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;

	// Сперва пытаемся найти такую запись в регистре сведений
	ИмяФайлаСПутем = ДанныеФайла.ИмяФайлаСПутемВРабочемКаталоге;
	ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	
	Если ИмяФайлаСПутем <> "" Тогда
		// Тут надо еще на наличие на диске проверять
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		Если ФайлНаДиске.Существует() Тогда
			Возврат ИмяФайлаСПутем;	
		КонецЕсли;
	КонецЕсли;
	
	// Формирование имени файла с расширением
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Расширение = ДанныеФайла.Расширение;
	Если Не ПустаяСтрока(Расширение) Тогда 
		ИмяФайла = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ИмяФайла, Расширение);
	КонецЕсли;
	
	ИмяФайлаСПутем = "";
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
			ИмяФайлаСПутем = ДанныеФайла.РабочийКаталогВладельца + ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение;
		Иначе
			ИмяФайлаСПутем = ФайловыеФункцииКлиентСервер.ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла);
		КонецЕсли;		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Запишем в регистр имя файла
	НаЧтение = Истина;
	ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
	РаботаСФайлами.ЗаписатьИмяФайлаСПутемВРегистр(ДанныеФайла.Версия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца = "" Тогда
		ПутьДляВозврата = ИмяКаталога + ИмяФайлаСПутем;
	Иначе
		ПутьДляВозврата = ИмяФайлаСПутем;
	КонецЕсли;

	Возврат ПутьДляВозврата;
КонецФункции

// Рекурсивный обход файлов в рабочем каталоге и сбор информации о них
Процедура ОбходФайловТаблица(Путь, МассивФайлов, ТаблицаФайлов)
	#Если Не ВебКлиент Тогда
		Перем Версия;
		Перем ДатаПомещения;	
		
		ИмяКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
				
		Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				НовыйПуть = Строка(Путь);
				НовыйПуть = НовыйПуть + "\";
				НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
				МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
				
				Если МассивФайловВКаталоге.Количество() <> 0 Тогда
					ОбходФайловТаблица(НовыйПуть, МассивФайловВКаталоге, ТаблицаФайлов);
				КонецЕсли;
			
				Продолжить;
			КонецЕсли;
			
			// временные файлы Word не удаляем из рабочего каталога
			Если Лев(ВыбранныйФайл.Имя, 1) = "~" И ВыбранныйФайл.ПолучитьНевидимость() = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ОтносительныйПуть = Сред(ВыбранныйФайл.ПолноеИмя, СтрДлина(ИмяКаталога) + 1);
			
			// Если не найдем на диске - то минимальная дата 
			//  будет самой старой - и удалится при очистке из рабочего каталога самых старых файлов
			ДатаПомещения = Дата('00010101');
			
			Владелец = Неопределено;
			НомерВерсии = Неопределено;
			ВРегистреНаЧтение = Неопределено;
			ВРегистреКодФайла = Неопределено;
			ВРегистреПапка = Неопределено;
			ФайлЕстьВРегистре = РаботаСФайлами.НайтиВРегистреПоПути(ОтносительныйПуть, Версия, ДатаПомещения, Владелец, НомерВерсии, 
				ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка);

			Если ФайлЕстьВРегистре Тогда
				РедактируетТекущийПользователь = РаботаСФайлами.ПолучитьРедактируетТекущийПользователь(Версия);

				// Если не занят текущим пользователем, можно удалить
				Если Не РедактируетТекущийПользователь Тогда
					Запись = Новый Структура;
					Запись.Вставить("Путь", ОтносительныйПуть);
					Запись.Вставить("Размер", ВыбранныйФайл.Размер());
					Запись.Вставить("Версия", Версия);
					Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
					ТаблицаФайлов.Добавить(Запись);
				КонецЕсли;
			Иначе
				Запись = Новый Структура;
				Запись.Вставить("Путь", ОтносительныйПуть);
				Запись.Вставить("Размер", ВыбранныйФайл.Размер());
				Запись.Вставить("Версия", Версия);
				Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
				ТаблицаФайлов.Добавить(Запись);
			КонецЕсли;
				
		КонецЦикла;
	#КонецЕсли
КонецПроцедуры

// Очистка рабочего каталога - для освобождения места - в первую очередь удаляет файлы 
// наиболее давно помещенные в рабочий каталог
Процедура ОчиститьРабочийКаталог(РазмерФайловВРабочемКаталоге, РазмерДобавляемогоФайла, ОчищатьВсе) Экспорт
	#Если Не ВебКлиент Тогда
		РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		ИмяКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		ТаблицаФайлов = Новый Массив;
		
		МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
		
		ОбходФайловТаблица(ИмяКаталога, МассивФайлов, ТаблицаФайлов);
		
		// Вызов сервера - для сортировки
		//  сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
		РаботаСФайлами.СортироватьМассивСтруктур(ТаблицаФайлов);
		
		МаксРазмер = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерЛокальногоКэшаФайлов;
		
		СреднийРазмерФайла = 1000;
		Если ТаблицаФайлов.Количество() <> 0 Тогда
			СреднийРазмерФайла = РазмерФайловВРабочемКаталоге / ТаблицаФайлов.Количество();
		КонецЕсли;
		
		СколькоНадоОсвободитьМеста = МаксРазмер / 10;
		Если СреднийРазмерФайла * 3 / 2 > СколькоНадоОсвободитьМеста Тогда
			СколькоНадоОсвободитьМеста = СреднийРазмерФайла * 3 / 2;
		КонецЕсли;
		
		СколькоОсталось = РазмерФайловВРабочемКаталоге + РазмерДобавляемогоФайла;	
		
		Для Каждого Строка из ТаблицаФайлов Цикл
			
			Если Строка.Версия.Пустая() Тогда
				ТекстВопроса =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				    НСтр("ru = 'Файл ""%1%2"" не найден на сервере.
				               |Удалить его из рабочего каталога?'"),
				    ИмяКаталога, Строка.Путь);
					
					
				Если ОчищатьВсе	= Ложь Тогда
					ТекстВопроса = Нстр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'") + Символы.ПС + Символы.ПС + ТекстВопроса;
				КонецЕсли;	
				
				КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

				Если КодВозврата = КодВозвратаДиалога.Нет Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			ПолныйПуть = ИмяКаталога + Строка.Путь;
			ФайлНаДиске = Новый Файл(ПолныйПуть);
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			ШапкаВопроса = Нстр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'");
			РаботаСФайламиКлиент.УдалитьФайл(ПолныйПуть, Неопределено, ШапкаВопроса);
			
			ПутьСПодкаталогом = ИмяКаталога;
			позиция = Найти(Строка.Путь, "\");
			Если позиция <> 0 Тогда
				ПутьСПодкаталогом = ИмяКаталога + Лев(Строка.Путь, позиция);
			КонецЕсли;
			
			// Если каталог стал пуст - удалить его
			МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
			Если МассивФайловВКаталоге.Количество() = 0 Тогда
				Если ПутьСПодкаталогом <> ИмяКаталога Тогда
					УдалитьФайлы(ПутьСПодкаталогом);
				КонецЕсли;
			КонецЕсли;
		
			// Удалим из регистра сведений
			РаботаСФайлами.УдалитьИзРегистра(Строка.Версия);
			
			СколькоОсталось = СколькоОсталось - Строка.Размер;
			Если СколькоОсталось < МаксРазмер - СколькоНадоОсвободитьМеста Тогда
				Если НЕ ОчищатьВсе Тогда
					Прервать; // Освободили достаточно - выходим
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
		
		Если ОчищатьВсе Тогда
			РаботаСФайлами.ОчиститьВсеСвоиКромеЗанятых();
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

// Получить полный путь к файлу
Функция ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ДанныеФайла) Экспорт
	Возврат ДанныеФайла.ИмяФайлаСПутемВРабочемКаталоге;
КонецФункции

// Удалить с диска и из регистра сведений
Процедура УдалитьФайлИзРабочегоКаталога(Ссылка, УдалитьДажеВРабочемКаталоге = Неопределено) Экспорт
	РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ВРабочемКаталогеНаЧтение = Ложь;
	ВРабочемКаталогеВладельца = Ложь;
	ПутьВРегистре = РаботаСФайлами.ПолучитьИмяФайлаСПутемИзРегистра(Ссылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);	
	
	// Получить путь из регистра
	ИмяФайлаСПутем = ПутьВРегистре;
	Если ИмяФайлаСПутем <> "" Тогда
		
		// обычно в рабочем каталоге не удаляем - только если передан УдалитьДажеВРабочемКаталоге
		Если Не ВРабочемКаталогеВладельца ИЛИ УдалитьДажеВРабочемКаталоге = Истина Тогда
		
			ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
			Если ФайлНаДиске.Существует() Тогда
				файл = Новый Файл(ИмяФайлаСПутем);
				файл.УстановитьТолькоЧтение(Ложь);
				РаботаСФайламиКлиент.УдалитьФайл(ИмяФайлаСПутем);
				
				ПутьСПодкаталогом = ИмяКаталога;
				позиция = Найти(ПутьВРегистре, "\");
				Если позиция <> 0 Тогда
					ПутьСПодкаталогом = ИмяКаталога + Лев(ПутьВРегистре, позиция);
				КонецЕсли;
						
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					Если ПутьСПодкаталогом <> ИмяКаталога Тогда
						УдалитьФайлы(ПутьСПодкаталогом);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	РаботаСФайлами.УдалитьИзРегистра(Ссылка);
КонецПроцедуры


// Разыменовать lnk файл
Функция РазыменоватьLnkФайл(ВыбранныйФайл) Экспорт
	#Если Не ВебКлиент Тогда
		
		Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			ShellApp = Новый COMОбъект("shell.application");
			FolderObj = ShellApp.NameSpace(ВыбранныйФайл.Путь);										// полный (только) путь на lnk-файл
			FolderObjItem = FolderObj.items().item(ВыбранныйФайл.Имя); 	// только имя lnk-файла
			Link = FolderObjItem.GetLink();
			Возврат Новый Файл(Link.path);
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат ВыбранныйФайл;
КонецФункции

// Обход Файлов рекурсивный - для определения размера файлов
Процедура ОбходФайловДляПроверкиПредельногоРазмера(
	МассивФайлов, 
	МассивСлишкомБольшихФайлов, 
	Рекурсивно, 
	КоличествоСуммарное,
	Знач ПсевдоФайловаяСистема) Экспорт
	
	МаксРазмерФайла = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		Попытка
			
			Если ВыбранныйФайл.Существует() Тогда
				
				Если ВыбранныйФайл.Расширение = ".lnk" Тогда
					ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
				КонецЕсли;
									
				Если ВыбранныйФайл.ЭтоКаталог() Тогда
					
					Если Рекурсивно Тогда
						НовыйПуть = Строка(ВыбранныйФайл.Путь);
						Если Прав(НовыйПуть, 1) <> "\" Тогда
							НовыйПуть = НовыйПуть + "\";
						КонецЕсли;
						НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
						МассивФайловВКаталоге = ФайловыеФункцииКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
						
						// Рекурсия
						Если МассивФайловВКаталоге.Количество() <> 0 Тогда
							ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловВКаталоге, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
						КонецЕсли;
					КонецЕсли;
				
					Продолжить;
				КонецЕсли;
				
				КоличествоСуммарное = КоличествоСуммарное + 1;
				
				// Размер файла слишком большой
				Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
					МассивСлишкомБольшихФайлов.Добавить(ВыбранныйФайл.ПолноеИмя);
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						  НСтр("ru = 'Описание=""%1""'"), Инфо.Описание ));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Проверить Предельный Размер Файлов - вернет Ложь, если есть файлы, превышающие предельный размер,
//   и пользователь в диалоге предупреждения о наличии таких файлов выбрал "Отмена"
Функция ПроверитьПредельныйРазмерФайлов(ВыбранныеФайлы, Рекурсивно, КоличествоСуммарное, Знач ПсевдоФайловаяСистема, РежимЗагрузки = Ложь) Экспорт
	МассивСлишкомБольшихФайлов = Новый Массив; 
	
	Путь = "";
	
	МассивФайлов = Новый Массив;
	КоличествоСуммарное = 0;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		
		Путь = ИмяФайла.Значение;
		ВыбранныйФайл = Новый Файл(Путь);

		Попытка
			ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
			ВыбранКаталог = Ложь;
			
			Если ВыбранныйФайл.Существует() Тогда
				ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
			КонецЕсли;
			
			Если ВыбранКаталог Тогда
				Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					   НСтр("ru = 'Идет сбор информации о каталоге ""%1"". 
					   |Пожалуйста, подождите.'"), Путь ));
				
				МассивФайловЭтогоКаталога = ФайловыеФункцииКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
				ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловЭтогоКаталога, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
			Иначе
				МассивФайлов.Добавить(ВыбранныйФайл);
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						  НСтр("ru = 'Описание=""%1""'"), Инфо.Описание ));
		КонецПопытки;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		ОбходФайловДляПроверкиПредельногоРазмера(МассивФайлов, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
	КонецЕсли;
	
	// Был хоть один слишком большой файл
	Если МассивСлишкомБольшихФайлов.Количество() <> 0 Тогда 
		
		ФайлыБольшие = Новый СписокЗначений;
		Параметры = Новый Структура;
		
		Для Каждого Файл Из МассивСлишкомБольшихФайлов Цикл
			БольшойФайл = Новый Файл(Файл);
			РазмерФайлаВМб = Цел(БольшойФайл.Размер() / (1024 * 1024));
			ТекстСтроки = Строка(Файл) + " (" + Строка(РазмерФайлаВМб) + " " + НСтр("ru = 'МБ)'");
			ФайлыБольшие.Добавить(ТекстСтроки);
		КонецЦикла; 	
		
		Параметры.Вставить("ФайлыБольшие", ФайлыБольшие);
		Параметры.Вставить("РежимЗагрузки", РежимЗагрузки);
		Параметры.Вставить("Заголовок", "Предупреждение при загрузке файлов");
		
		Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВопросаИмпорта", Параметры);
		ОбновитьПовторноИспользуемыеЗначения(); // т.к. системные настройки (макс размер) могли уже изменить
		Возврат Результат = КодВозвратаДиалога.ОК;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его,   если каталог - создает группу и рекурсивно вызывает саму себя
Процедура ИмпортФайлов(
	Владелец, 
	ФайлыАргумент, 
	Индикатор, 
	МассивИменФайловСОшибками, 
	МассивСтруктурВсехФайлов, 
	Комментарий, 
	ХранитьВерсии, 
	Рекурсивно, 
	КоличествоСуммарное, 
	Счетчик,
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	МассивВсехПапок,
	РежимЗагрузки = Ложь) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ДокГруппаСсылка;
	
	МаксРазмерФайла = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().МаксимальныйРазмерФайла;
	ЗапретЗагрузкиФайловПоРасширению = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().СписокЗапрещенныхРасширений;
	
	Для Каждого ВыбранныйФайл Из ФайлыАргумент Цикл
		Попытка

			Если ВыбранныйФайл.Существует() Тогда

				Если ВыбранныйФайл.Расширение = ".lnk" Тогда
					ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
				КонецЕсли;
				
				Если ВыбранныйФайл.ЭтоКаталог() Тогда
					
					Если Рекурсивно = Истина Тогда
						НовыйПуть = Строка(ВыбранныйФайл.Путь);
						ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(НовыйПуть);
						НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
						МассивФайлов = ФайловыеФункцииКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
						
						// Создаем группу в справочнике - эквивалент папки на диске
						Если МассивФайлов.Количество() <> 0 Тогда
							ИмяФайла = ВыбранныйФайл.Имя;
							
							ПапкаУжеНайдена = Ложь;
							
							Если РаботаСФайлами.ЕстьПапкаСТакимИменем(ИмяФайла, Владелец, ПерваяПапкаСТакимЖеИменем) Тогда
								
								Если РежимЗагрузки Тогда
									ПапкаУжеНайдена = Истина;
									ДокГруппаСсылка = ПерваяПапкаСТакимЖеИменем;
								Иначе	
								
									ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Внимание! Папка ""%1"" уже существует. Продолжить импорт папки?'"),
													ИмяФайла);
										
									КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

									Если КодВозврата = КодВозвратаДиалога.Нет Тогда
										Продолжить;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
							Если Не ПапкаУжеНайдена Тогда							
								ДокГруппаСсылка = РаботаСФайлами.СправочникиПапкиСоздатьЭлемент(ИмяФайла, Владелец);
							КонецЕсли;
							
							ИмпортФайлов(
								ДокГруппаСсылка, 
								МассивФайлов, 
								Индикатор, 
								МассивИменФайловСОшибками, 
								МассивСтруктурВсехФайлов, 
								Комментарий, 
								ХранитьВерсии, 
								Рекурсивно, 
								КоличествоСуммарное, 
								Счетчик,
								ИдентификаторФормы,
								ПсевдоФайловаяСистема,
								ДобавленныеФайлы,
								МассивВсехПапок,
								РежимЗагрузки);
								
							МассивВсехПапок.Добавить(НовыйПуть);	
						КонецЕсли;
					КонецЕсли;
				
					Продолжить;
				КонецЕсли;
				
				Если Не ФайловыеФункцииКлиентСервер.ФайлМожноЗагружать(ВыбранныйФайл, МаксРазмерФайла, ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, МассивИменФайловСОшибками) Тогда
					Продолжить;
				КонецЕсли;	
					
				// Обновим индикатор прогресса
				Счетчик = Счетчик + 1;
				Индикатор = Счетчик * 100 / КоличествоСуммарное; // Считаем проценты
				РазмерВМб = ВыбранныйФайл.Размер() / (1024 * 1024);
				НадписьПодробнее =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'"),
					 ВыбранныйФайл.Имя, ? (РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0") ) );
					 
				ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'");	 
				Если РежимЗагрузки Тогда
					ТекстСостояния = НСтр("ru = 'Загрузка файлов с диска...'");	 
				КонецЕсли;
				
				Состояние(
					ТекстСостояния, 
					Индикатор, 
					НадписьПодробнее, 
					БиблиотекаКартинок.Информация32);
				
				// Создаем Элемент справочника Файлы
				ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
				Расширение = ВыбранныйФайл.Расширение;
				
				Если РежимЗагрузки Тогда
					Если РаботаСФайлами.ЕстьФайлСТакимИменем(ИмяБезРасширения, Владелец) Тогда
						Запись = Новый Структура;
						Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
						Запись.Вставить("Ошибка", НСтр("ru = 'Файл с таким именем уже есть в информационной базе'"));
						МассивИменФайловСОшибками.Добавить(Запись);
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				АдресВременногоХранилищаФайла = "";

				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВыбранныйФайл.ПолноеИмя, "");
				ПомещаемыеФайлы.Добавить(Описание);
				
				ПомещенныеФайлы = Новый Массив;
				
				Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
					ВызватьИсключение
					  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка помещения файла в хранилище: %1'"), ВыбранныйФайл.ПолноеИмя);
				КонецЕсли;

				Если ПомещенныеФайлы.Количество() = 1 Тогда
					АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
				КонецЕсли;
				
				АдресВременногоХранилищаТекста = ИзвлечьТекстВоВременноеХранилище(
					ВыбранныйФайл.ПолноеИмя,
					ИдентификаторФормы);

				// Создаем элемент справочника Файлы
				ФайловыеФункцииКлиентСервер.СоздатьЭлементСправочникаФайлы(ВыбранныйФайл, МассивСтруктурВсехФайлов, 
					Владелец, ИдентификаторФормы, Комментарий, ХранитьВерсии, ДобавленныеФайлы,
					АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста);
				
			Иначе
				Запись = Новый Структура;
				Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
				Запись.Вставить("Ошибка", НСтр("ru = 'Файл отсутствует на диске'"));
				МассивИменФайловСОшибками.Добавить(Запись);
			КонецЕсли;

		Исключение
			ОшибкаИнфо = ИнформацияОбОшибке();
			СообщениеОбОшибке = "";
			Если ОшибкаИнфо.Причина = Неопределено Тогда
				СообщениеОбОшибке =ОшибкаИнфо.Описание;
			Иначе
				СообщениеОбОшибке = ОшибкаИнфо.Причина.Описание;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", СообщениеОбОшибке);
			МассивИменФайловСОшибками.Добавить(Запись);
		
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Импорт - с вспомогательными операциями типа проверки предельного размера и впоследствии удаления файлов и показа ошибок
//   при импорте только одной папки - вернет на нее ссылку
Функция ИмпортФайловВыполнить(
	ПапкаДляДобавления, 
	ВыбранныеФайлы, 
	Комментарий, 
	ХранитьВерсии, 
	УдалятьФайлыПослеДобавления, 
	Рекурсивно, 
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	РежимЗагрузки = Ложь) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ПапкаДляДобавленияТекущая;

	ВыбранКаталог = Ложь;
	Путь = "";
	
	КоличествоСуммарное = 0;
	Если ПроверитьПредельныйРазмерФайлов(ВыбранныеФайлы, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема, РежимЗагрузки) = Ложь Тогда
		Состояние();
		Возврат Неопределено;
	КонецЕсли;

	Состояние();
	
	Если КоличествоСуммарное = 0 Тогда
		
		Если Не РежимЗагрузки Тогда
			Предупреждение(НСтр("ru = 'Нет файлов для добавления'"));
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Индикатор = 0;
	
	МассивФайлов = Новый Массив;
	Счетчик = 0;
	МассивИменФайловСОшибками = Новый Массив;
	МассивСтруктурВсехФайлов = Новый Массив;
	МассивВсехПапок = Новый Массив;
	
	ПапкаДляДобавленияТекущая = Неопределено;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		Попытка
			ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
			
			ВыбранКаталог = Ложь;
			Если ВыбранныйФайл.Существует() Тогда
				ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
			КонецЕсли;
			
			Если ВыбранКаталог Тогда
				Путь = ИмяФайла.Значение;
				МассивФайловЭтогоКаталога = ФайловыеФункцииКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
				
				ИмяПапки = ВыбранныйФайл.Имя;
				
				ПапкаУжеНайдена = Ложь;
				
				Если РаботаСФайлами.ЕстьПапкаСТакимИменем(ИмяПапки, ПапкаДляДобавления, ПерваяПапкаСТакимЖеИменем) Тогда
					
					Если РежимЗагрузки Тогда
						ПапкаУжеНайдена = Истина;
						ПапкаДляДобавленияТекущая = ПерваяПапкаСТакимЖеИменем;
					Иначе	
					
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Внимание! Папка ""%1"" уже существует. Продолжить импорт папки?'"),
										ИмяПапки);
							
						КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

						Если КодВозврата = КодВозвратаДиалога.Нет Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПапкаУжеНайдена Тогда
					ПапкаДляДобавленияТекущая = РаботаСФайлами.СправочникиПапкиСоздатьЭлемент(ИмяПапки, ПапкаДляДобавления);
				КонецЕсли;
				
				// Собственно импорт 
				ИмпортФайлов(
					ПапкаДляДобавленияТекущая, 
					МассивФайловЭтогоКаталога, 
					Индикатор, 
					МассивИменФайловСОшибками, 
					МассивСтруктурВсехФайлов, 
					Комментарий, 
					ХранитьВерсии, 
					Рекурсивно, 
					КоличествоСуммарное, 
					Счетчик,
					ИдентификаторФормы,
					ПсевдоФайловаяСистема,
					ДобавленныеФайлы,
					МассивВсехПапок,
					РежимЗагрузки);
				МассивВсехПапок.Добавить(Путь);	
					
			Иначе
				МассивФайлов.Добавить(ВыбранныйФайл);
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					   НСтр("ru = 'Описание=""%1""'"), Инфо.Описание ));
		КонецПопытки;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		// Собственно импорт 
		ИмпортФайлов(
			ПапкаДляДобавления, 
			МассивФайлов, 
			Индикатор, 
			МассивИменФайловСОшибками, 
			МассивСтруктурВсехФайлов, 
			Комментарий, 
			ХранитьВерсии, 
			Рекурсивно, 
			КоличествоСуммарное, 
			Счетчик,
			ИдентификаторФормы,
			ПсевдоФайловаяСистема,
			ДобавленныеФайлы,
			МассивВсехПапок,
			РежимЗагрузки);
	КонецЕсли;
	
	Если МассивСтруктурВсехФайлов.Количество() > 1 Тогда
		
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Импорт файлов завершен. Импортировано %1 файлов'"), Строка(МассивСтруктурВсехФайлов.Количество()) );
			
		Если РежимЗагрузки Тогда
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов завершена. Загружено %1 файлов'"), Строка(МассивСтруктурВсехФайлов.Количество()) );
		КонецЕсли;
		
		Состояние(ТекстСостояния);
	Иначе
		Состояние();
	КонецЕсли;
	
	Если УдалятьФайлыПослеДобавления = Истина Тогда
		ФайловыеФункцииКлиентСервер.УдалитьФайлыПослеДобавления(МассивСтруктурВсехФайлов, МассивВсехПапок, РежимЗагрузки);
	КонецЕсли;
	
	Если МассивСтруктурВсехФайлов.Количество() = 1 Тогда
		Элемент0 = МассивСтруктурВсехФайлов[0];
		Ссылка = ПолучитьНавигационнуюСсылку(элемент0.Файл);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ссылка,
			Элемент0.Файл,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Вывод сообщений об ошибках
	Если МассивИменФайловСОшибками.Количество() <> 0 Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("МассивИменФайловСОшибками", МассивИменФайловСОшибками);
		Если РежимЗагрузки Тогда
			Параметры.Вставить("Заголовок", "Отчет о загрузке файлов");
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаОтчета", Параметры);
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() <> 1 Тогда
		ПапкаДляДобавленияТекущая = Неопределено;
	КонецЕсли;	
	
	Возврат ПапкаДляДобавленияТекущая;
КонецФункции

// Извлечь текст из файла и поместить во временное хранилище
Функция ИзвлечьТекстВоВременноеХранилище(ПолноеИмяФайла, ИдентификаторФормы) Экспорт
	АдресВременногоХранилища = "";
	
	#Если Не ВебКлиент Тогда
		ИзвлекатьТекстыФайловНаСервере = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
		Если Не ИзвлекатьТекстыФайловНаСервере Тогда
			Попытка
				Извлечение = Новый ИзвлечениеТекста(ПолноеИмяФайла);
				Текст = Извлечение.ПолучитьТекст();
			Исключение
				Текст = "";
			КонецПопытки;
		КонецЕсли;

		Если ПустаяСтрока(Текст) Тогда
			Возврат "";
	 	КонецЕсли;

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		ТекстовыйФайл.Записать(Текст);
		ТекстовыйФайл.Закрыть();

		ПоместитьФайл(АдресВременногоХранилища, ИмяВременногоФайла, , Ложь, ИдентификаторФормы);
		УдалитьФайлы(ИмяВременногоФайла);
	#КонецЕсли
	Возврат АдресВременногоХранилища;
КонецФункции

// Функция получает путь к каталогу вида "C:\Documents and Settings\ИМЯ ПОЛЬЗОВАТЕЛЯ\Application Data\1C\ФайлыА8\"
Функция ПолучитьПутьККаталогуДанныхПользователя() Экспорт
	ИмяКаталога = "";
#Если Не ВебКлиент Тогда

	Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		Оболочка = Новый COMОбъект("WScript.Shell");
		Путь = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
		Путь = Путь + "\1C\Файлы\";
		Путь = Путь + РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИмяКонфигурации + "\";
		
		ИмяКаталога = Путь + РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь + " " + РаботаСФайлами.ПараметрыСеансаИдентификаторТекущегоПользователя() + "\";
		ИмяКаталога = СтрЗаменить(ИмяКаталога, "<", " ");
		ИмяКаталога = СтрЗаменить(ИмяКаталога, ">", " ");
		ИмяКаталога = СокрЛП(ИмяКаталога);
	КонецЕсли;	
#Иначе // ВебКлиент
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Каталог = "";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к локальному кэшу файлов'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ИмяКаталога = ДиалогОткрытияФайла.Каталог;
			ИмяКаталога = ИмяКаталога + "\";
		КонецЕсли;
		
	КонецЕсли;		
#КонецЕсли
	Возврат ИмяКаталога;
КонецФункции

// Возвращает имя с расширением- если расширение пусто - только имя
Функция ПолучитьИмяСРасширением(ПолноеНаименование, Расширение) Экспорт
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
КонецФункции

// Извлекает текст из файла на диске на клиенте и помещает результат на сервер
&НаКлиенте
Процедура ИзвлечьТекстВерсии(ВерсияСсылка, АдресФайла, Расширение, УникальныйИдентификатор) Экспорт
#Если НЕ ВебКлиент Тогда
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(Расширение);
	
	Если Не ПолучитьФайл(АдресФайла, ИмяФайлаСПутем, Ложь) Тогда
		Возврат;
	КонецЕсли;	
		
	// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		УдалитьИзВременногоХранилища(АдресФайла);
	КонецЕсли;
	
	РезультатИзвлечения = "НеИзвлечен";
	АдресВременногоХранилищаТекста = "";
	
	Текст = "";
	Если ИмяФайлаСПутем <> "" Тогда
		Попытка
			// Извлекаем текст из файла
			Извлечение = Новый ИзвлечениеТекста(ИмяФайлаСПутем);
			Текст = Извлечение.ПолучитьТекст();
			РезультатИзвлечения = "Извлечен";
			
			Если Не ПустаяСтрока(Текст) Тогда
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
				ТекстовыйФайл.Записать(Текст);
				ТекстовыйФайл.Закрыть();

				ПоместитьФайл(АдресВременногоХранилищаТекста, ИмяВременногоФайла, , Ложь, УникальныйИдентификатор);
				УдалитьФайлы(ИмяВременногоФайла);
			КонецЕсли;
			
		Исключение // Ничего не пишем - это нормальная ситуация - когда Текст некому извлечь
			РезультатИзвлечения = "ИзвлечьНеУдалось";
		КонецПопытки;
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаСПутем);

	РаботаСФайлами.ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, 
		РезультатИзвлечения, АдресВременногоХранилищаТекста);
		
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаТекста);
	КонецЕсли;
	
#КонецЕсли	
КонецПроцедуры	
