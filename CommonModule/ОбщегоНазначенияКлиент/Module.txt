
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры общего назначения

Процедура ГрупповоеИзменениеОбъектов(Список) Экспорт
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	ПараметрыФормы = Новый Структура("МассивОбъектов", Новый Массив);
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыФормы.МассивОбъектов.Добавить(Список.ДанныеСтроки(ВыделеннаяСтрока).Ссылка);
	КонецЦикла;
	
	Если ПараметрыФормы.МассивОбъектов.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'"));
		Возврат;
	КонецЕсли;
		
	ОткрытьФорму("Обработка.ГрупповоеИзменениеОбъектов.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Процедура УстановитьПроизвольныйЗаголовокПриложения выполняет установку стандартного
// заголовка приложения, используя имя представление текущего пользователя и
// и строку в константе ЗаголовокПриложения (если задана) или
// текущий заголовок приложения ПолучитьЗаголовокПриложения() (если константа не установлена).
//
// Параметры:
//  ПредставлениеЗаголовка - Строка, необязательный параметр, позволяющий сформировать заголовок
//                 приложения из представления, заданного пользователем, вместо представления,
//                 заданного в константе (или полученного вызовом функции ПолучитьЗаголовокПриложения()).
//
Процедура УстановитьПроизвольныйЗаголовокПриложения() Экспорт
	
	ПредставлениеЗаголовка = СтандартныеПодсистемыПереопределяемый.ПараметрыРаботыКлиента().ЗаголовокПриложения;
	
	ПредставлениеПользователя = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().АвторизованныйПользователь;
	
	ШаблонЗаголовка = "%ОсновнойЗаголовок / %Пользователь /";
	
	Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
		ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", СтандартныеПодсистемыПереопределяемый.ПараметрыРаботыКлиента().ПодробнаяИнформация);
	Иначе
		ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", СокрЛП(ПредставлениеЗаголовка));
	КонецЕсли;
	
	ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Пользователь", ПредставлениеПользователя);
	
	УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	
КонецПроцедуры

// Процедура ПреобразоватьЗимнееВремяКТекущему изменяет переданное
// значение времени в местное время из зимнего к текущему с учетом NTFS коррекции.
//
// Параметры:
//  ДатаВремя    - Дата, преобразуемое время.
//
// Возвращаемое значение:
//  Дата - преобразованное время.
//
Процедура ПреобразоватьЗимнееВремяКТекущему(ДатаВремя) Экспорт
	
	ДатаВремя = МестноеВремя(ДатаВремя);
	
КонецПроцедуры

// Предлагает пользователю установить расширение работы с файлами в веб-клиенте.
// При этом инициализирует параметр сеанса ПредлагатьУстановкуРасширенияРаботыСФайлами.
//
// Процедура предназначена для использования в начале участков кода, в которых ведется работа с файлами.
// Например:
//
//    ПредложитьУстановкуРасширенияРаботыСФайлами("Для печати документа необходимо установить расширение работы с файлами");
//    // далее располагается код печати документа
//    //...
//
// Параметры
//  Сообщение  - Строка - текст сообщения. Если не указан, то выводится текст по умолчанию.
//   
Процедура ПредложитьУстановкуРасширенияРаботыСФайлами(Сообщение = Неопределено) Экспорт
	
#Если Не ВебКлиент Тогда
	Возврат;  // только в веб клиенте этот код работает		
#КонецЕсли

	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		Возврат; // если расширение и так уже есть, незачем про него спрашивать
	КонецЕсли;	

	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентБезПоддержкиРасширенияРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;	
	
	ПредлагатьУстановку = ОбщегоНазначенияКлиентПовтИсп.ПолучитьПредлагатьУстановкуРасширенияРаботыСФайлами();
	
	Если ПредлагатьУстановку = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// тут надо показать диалог
	ПараметрыФормы = Новый Структура("Сообщение", Сообщение);
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы);
	Если КодВозврата = Неопределено Тогда
		КодВозврата = Истина;
	КонецЕсли;
	
	ПредлагатьУстановку = КодВозврата;
	ОбщегоНазначения.СохранитьПредлагатьУстановкуРасширенияРаботыСФайлами(ПредлагатьУстановку);
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Функции для обработки действий пользователя в процессе редактирования
// многострочного текста, например комментария в документах

// Открывает форму редактирования произвольного многострочного текста модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
// Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы
//
Процедура ОткрытьФормуРедактированияМногострочногоТекста(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, 
		Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст,,, Истина);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
	Если Не ТекстВведен Тогда
		Возврат;
	КонецЕсли;
		
	РезультатРедактирования = МногострочныйТекст;
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования многострочного комментария модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
//
Процедура ОткрытьФормуРедактированияКомментария(Знач МногострочныйТекст, РезультатРедактирования,
	Модифицированность = Ложь) Экспорт
	
	ОткрытьФормуРедактированияМногострочногоТекста(МногострочныйТекст, РезультатРедактирования, Модифицированность, 
		НСтр("ru='Комментарий'"));
	
КонецПроцедуры