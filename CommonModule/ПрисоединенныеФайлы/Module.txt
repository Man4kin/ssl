////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции модуля

// Используется для получения данных файла в различных командах работы с файлами.
// Список получаемых данных можно уточнить в процедуре.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  УникальныйИдентификатор - уникальный идентификатор формы, используется при получении двоичных данных файла
//  ПолучатьСсылкуНаДвоичныеДанные - булево - требуется ли получить ссылку на двоичные данные файла,
//  							т.к. получение двоичных данных может быть ресурсоемкой операцией,
//  							необходимо уточнять, нужны ли эти данные на клиенте
// Возвращаемое значение
//  Структура с данными файла
// 
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
			МенеджерЗаписи.Прочитать();
			ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
			Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			КонецЕсли;
		Иначе
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				Иначе
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				КонецЕсли;
			Исключение
				СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
				ЗаписьЖурналаРегистрации("Открытие файла",
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				                         ПрисоединенныйФайл,
				                         СообщениеОбОшибке);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					            | Файл: ""%1.%2""'"),
					            ФайлОбъект.Наименование,
					            ФайлОбъект.Расширение);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура("СсылкаНаДвоичныеДанныеФайла, ОтносительныйПуть, ДатаМодификацииУниверсальная, ИмяФайла, Наименование, Расширение, Размер, ФайлРедактируется, ФайлРедактируетТекущийПользователь, Зашифрован, Редактирует, ПодписанЭЦП, Зашифрован");
	ДополнительнаяИнформация.СсылкаНаДвоичныеДанныеФайла  = СсылкаНаДвоичныеДанныеФайла;
	ДополнительнаяИнформация.ОтносительныйПуть            = ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\";
	ДополнительнаяИнформация.ДатаМодификацииУниверсальная = ФайлОбъект.ДатаМодификацииУниверсальная;
	ДополнительнаяИнформация.ИмяФайла                     = ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Наименование                 = ФайлОбъект.Наименование;
	ДополнительнаяИнформация.Расширение                   = ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Размер                       = ФайлОбъект.Размер;
	ДополнительнаяИнформация.Редактирует                  = ФайлОбъект.Редактирует;
	ДополнительнаяИнформация.ПодписанЭЦП                  = ФайлОбъект.ПодписанЭЦП;
	ДополнительнаяИнформация.Зашифрован                   = ФайлОбъект.Зашифрован;
	ДополнительнаяИнформация.ФайлРедактируется            = НЕ (ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка());
	ДополнительнаяИнформация.ФайлРедактируетТекущийПользователь =
	                            ?(ДополнительнаяИнформация.ФайлРедактируется,
	                              ФайлОбъект.Редактирует = ОбщегоНазначения.ТекущийПользователь(),
	                              Ложь);
	
	Если ФайлОбъект.Зашифрован Тогда
		МассивСертификатовШифрования = Новый Массив;
		Для Каждого СтрокаТЧ Из ФайлОбъект.СертификатыШифрования Цикл
			МассивСертификатовШифрования.Добавить(Новый Структура("Отпечаток, Представление", СтрокаТЧ.Отпечаток, СтрокаТЧ.Представление));
		КонецЦикла;
		ДополнительнаяИнформация.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
	КонецЕсли;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

// Функция получает последний идентификатор объекта из регистра НаличиеПрисоединенныхФайлов
// инкрементирует его значение на одну единицу и возвращает в качестве результата.
// Возвращаемое значение
//  строка (10) - очередной идентификатор объекта
//
Функция ПолучитьОчереднойИдентификаторОбъекта() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта КАК ИдентификаторОбъекта
					|ИЗ
					|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
					|УПОРЯДОЧИТЬ ПО
					|	ИдентификаторОбъекта УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		Возврат "0000000000"; // по длине ресурса ИдентификаторОбъекта
	Иначе
		Выборка = РезультатВыполненияЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Инкремент(Выборка.ИдентификаторОбъекта);
	КонецЕсли;
	
КонецФункции

// Функция возвращает идентификатор владельца присоединенного файла.
//
Функция ПолучитьИдентификаторОбъекта(ВладелецФайлов) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	ИдентификаторОбъекта
					|ИЗ
					|	РегистрСведений.НаличиеПрисоединенныхФайлов
					|ГДЕ
					|	ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

// Используется для инкремента идентификатора.
// Правила инкремента как в обычном сложении - при 
// заполнении текущего разряда следующий разряд увеличивается
// на единицу, при этом в текущем разряде значение становится
// равным нулю. Значениями разрядов выступают символы
// [0..9] и [a..z]. Таким образом один разряд может содержать
// 34 значения.
//
Функция Инкремент(знач Строка)
	
	Позиция = 10; // 9- индекс 10-го символа
	
	Пока Позиция > 0 Цикл
		
		Символ = Сред(Строка, Позиция, 1);
		
		Если Символ = "z" Тогда
			Строка = Лев(Строка, Позиция-1) + "0" + Прав(Строка, 10 - Позиция);
			Позиция = Позиция - 1;
			Продолжить;
		ИначеЕсли Символ = "9" Тогда
			НовыйСимвол = "a";
		Иначе
			НовыйСимвол = Символ(КодСимвола(Символ)+1);
		КонецЕсли;
		
		Строка = Лев(Строка, Позиция-1) + НовыйСимвол + Прав(Строка, 10 - Позиция);
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

// Проверяет, что по текущему владельцу нет файлов с именем ИмяФайла
// Параметры
//  ИмяФайла - имя файла, которое нужно проверить
//  ВладелецФайла - ВладелецФайла файла, по которому нужно выполнит проверку
//  Ссылка - ссылка, исключение
// Возвращаемое значение
//  Истина - имя файла уникально, иначе имя файла не уникально
//
Функция ПроверитьИмяФайлаУникально(ИмяФайла, ВладелецФайла, Ссылка) Экспорт
	
	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.[ИмяСправочника] КАК Файлы
			|ГДЕ
			|	Файлы.Наименование = &ИмяФайла
			|	И Файлы.ВладелецФайла = &ВладелецФайла";
		
	Если НЕ Ссылка.Пустая() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И Файлы.Ссылка <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяСправочника]", Ссылка.Метаданные().Имя);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ИмяФайла", ИмяФайла);
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	Если НЕ Ссылка.Пустая() Тогда
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет данные в файле, используется при обновлении двоичных данных.
// Помимо обновления двоичных данных обновляется текст файла, дата модификации,
// и другие, опциональные реквизиты.
//
// Параметры
//  ИнформацияОФайле - структура - обязательные поля:
//					АдресФайлаВоВременномХранилище
//					АдресВременногоХранилищаТекста
//					ДатаМодификацииУниверсальная
//				необязательные поля:
//					Расширение
//					Редактирует
//
Процедура ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле, ЭтоВебКлиент = Ложь) Экспорт
	
	Перем Отказ;
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ИнформацияОФайле.ДатаМодификацииУниверсальная);
	
	Если ИнформацияОФайле.Свойство("Редактирует") Тогда
		РеквизитыЗначения.Вставить("Редактирует", ИнформацияОФайле.Редактирует);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Расширение") Тогда
		РеквизитыЗначения.Вставить("Расширение", ИнформацияОФайле.Расширение);
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
	
	РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	ИзвлеченныйТекст = "";
	
	Если ЭтоВебКлиент ИЛИ ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере() Тогда
		
		РеквизитыЗначения.СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		
	ИначеЕсли ЭтоАдресВременногоХранилища(ИнформацияОФайле.АдресВременногоХранилищаТекста) Тогда
		ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(ИнформацияОФайле.АдресВременногоХранилищаТекста);
		РеквизитыЗначения.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	Иначе
		ИзвлеченныйТекст = "";
		РеквизитыЗначения.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст));
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайл, ДвоичныеДанные, РеквизитыЗначения);
	
КонецПроцедуры

// Обновляет двоичные данные и реквизиты присоединенного файла при окончании редактирования
// Параметры:
//  ПрисоединенныйФайл - справочник ссылка - ссылка на присоединенный файл
//  ИнформацияОФайле - структура, с полями:
//			ДатаМодификацииУниверсальная - дата - универсальная дата модификации файла
//			АдресФайлаВоВременномХранилище - адрес двоичных данных файла
//			АдресВременногоХранилищаТекста - адрес двоичных данных извлеченного текста во временном хранилище
//
Процедура ПоместитьФайлВХранилищеИОсвободить(ПрисоединенныйФайл, ИнформацияОФайле, ЭтоВебКлиент = Ложь) Экспорт
	
	ИнформацияОФайле.Вставить("Редактирует", Справочники.Пользователи.ПустаяСсылка());
	
	ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле, ЭтоВебКлиент)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные функции поддержки согласованного изменения файлов

////////////////////////////////////////////////////////////////////////////////
// ЭЦП

// Заносит информацию о одной ЭЦП
//
// Параметры
//  ПрисоединенныйФайл - ссылка на файл или файл - объект
//  ДанныеПодписи  - Структура - информация для занесения в табличную часть
//                ЭлектронныеЦифровыеПодписи
//
Процедура ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПрисоединенныйФайл, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ПрисоединенныйФайл.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ПрисоединенныйФайл.Зашифрован;
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитов.Редактирует.Пустая() Тогда
		ВызватьИсключение ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;

	ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
						ПрисоединенныйФайл,
						ДанныеПодписи.НоваяПодписьДвоичныеДанные,
						ДанныеПодписи.Отпечаток,
						ДанныеПодписи.ДатаПодписи,
						ДанныеПодписи.Комментарий,
						ДанныеПодписи.ИмяФайлаПодписи,
						ДанныеПодписи.КомуВыданСертификат,
						ДанныеПодписи.ДвоичныеДанныеСертификата);
	
КонецПроцедуры

// Заносит информацию о массиве ЭЦП
//
// Параметры
//  МассивПодписей  - Массив Структур - информация для занесения в табличную часть
//                ЭлектронныеЦифровыеПодписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
Процедура ЗанестиИнформациюОПодписях(ПрисоединенныйФайл, МассивПодписей, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлСсылка = ПрисоединенныйФайл;
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
		ФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Редактирует = ФайлОбъект.Редактирует;
	Зашифрован  = ФайлОбъект.Зашифрован;

	Если НЕ Редактирует.Пустая() Тогда
		СтрокаИсключения = ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Если Зашифрован Тогда
		СтрокаИсключения = ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
		
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
							ФайлОбъект,
							ДанныеПодписи.НоваяПодписьДвоичныеДанные,
							ДанныеПодписи.Отпечаток,
							ДанныеПодписи.ДатаПодписи,
							ДанныеПодписи.Комментарий,
							ДанныеПодписи.ИмяФайлаПодписи,
							ДанныеПодписи.КомуВыданСертификат,
							ДанныеПодписи.ДвоичныеДанныеСертификата);
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает шифрованные файлы в базу и ставит признак Зашифрован файлу
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  ЗашифрованныеДанные - зашифрованные данные (адрес зашифрованных данных во временном хранилище)
//  МассивОтпечатков - массив отпечатков по сертификатам
// 
Процедура Зашифровать(ПрисоединенныйФайл,
					  ЗашифрованныеДанные,
					  МассивОтпечатков) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Заблокировать();
	Иначе
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
		НоваяСтрока = ПрисоединенныйФайлОбъект.СертификатыШифрования.Добавить();
		НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
		НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
		НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
	КонецЦикла;
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("Зашифрован", Истина);
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(""));
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайлОбъект, ЗашифрованныеДанные.АдресВременногоХранилища, РеквизитыЗначения);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Помещает расшифрованные данные в хранилище и сбрасывает признак Зашифрован к файла.
// Параметры
//  ПрисоединенныйФайл - ссылка на присоединенный файл
//  РасшифрованныеДанные - адрес расшифрованных данных и извлеченного текста во временном хранилище
// ЭтоВебКлиент - булево - вызывающая среда - веб-клиент
//
Процедура Расшифровать(ПрисоединенныйФайл, РасшифрованныеДанные, знач ЭтоВебКлиент = Ложь) Экспорт
	
	Перем Отказ;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Заблокировать();
	Иначе
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.СертификатыШифрования.Очистить();
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("Зашифрован", Ложь);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилища);
	СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИзвлеченныйТекст = "";
	
	Если ЭтоВебКлиент ИЛИ ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере() Тогда
		
		СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		
	ИначеЕсли ЭтоАдресВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилищаТекста) Тогда
		ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилищаТекста);
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	Иначе
		ИзвлеченныйТекст = "";
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст, Новый СжатиеДанных(9)));
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайлОбъект, ДвоичныеДанные, РеквизитыЗначения);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Используется для отмены редактирования файла.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл или файл - объект, который требуется освободить
//
Процедура ОсвободитьФайл(ПрисоединенныйФайл) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Если НЕ ФайлОбъект.Редактирует.Пустая() Тогда
		ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
		ФайлОбъект.Записать();
	Конецесли;
	
КонецПроцедуры

// Используется для отметки файла как редактируемого.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл или файл - объект, который требуется освободить
//
Процедура ЗанятьФайлДляРедактированияСервер(ПрисоединенныйФайл) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	ФайлОбъект.Редактирует = ОбщегоНазначения.ТекущийПользователь();
	ФайлОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции модуля

// Получает имя формы объекта присоединенных файлов по владельцу файла
//
Функция ПолучитьИмяФормыОбъектаПрисоединенныхФайловПоВладельцу(ВладелецФайла) Экспорт
	
	ИмяОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВладелецФайла.Метаданные().ПолноеИмя(), ".")[1];
	
	ПолноеИмяОМ = "Справочник." + ИмяОбъекта + "ПрисоединенныеФайлы";
	
	МетаданныеПрисоединенныхФайлов = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	
	Если МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта = Неопределено Тогда
		ИмяФормы = ПолноеИмяОМ + ".ФормаОбъекта";
	Иначе
		ИмяФормы = МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

// Функция создает объект в справочнике для хранения файлов и заполняет
// его реквизиты по переданным параметрам
//
Функция ДобавитьФайл(
			ВладелецФайла,
			ИмяБезРасширения,
			РасширениеБезТочки,
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			АдресФайлаВоВременномХранилище,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент) Экспорт
	
	ИмяОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВладелецФайла.Метаданные().ПолноеИмя(), ".")[1];
	ПолноеИмяСправочника = ИмяОбъекта+"ПрисоединенныеФайлы";
	СсылкаНового = Справочники[ПолноеИмяСправочника].ПолучитьСсылку();
	ПрисоединенныйФайл = Справочники[ПолноеИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
	
	ПрисоединенныйФайл.ВладелецФайла			= ВладелецФайла;
	
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания		= ТекущаяДата();
	ПрисоединенныйФайл.Описание			= "";
	ПрисоединенныйФайл.ПодписанЭЦП		= Ложь;
	ПрисоединенныйФайл.Наименование		= ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение		= РасширениеБезТочки;
	
	
	ПрисоединенныйФайл.ТипХраненияФайла = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ПрисоединенныйФайл.Размер = ДвоичныеДанные.Размер();
	
	ТранзакцияАктивна = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПрисоединенныйФайл.ПутьКФайлу, ПрисоединенныйФайл.Том, ВремяИзменения, "",
											ИмяБезРасширения, РасширениеБезТочки, ПрисоединенныйФайл.Размер, ПрисоединенныйФайл.Зашифрован);
			
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоВебКлиент ИЛИ ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере() Тогда
			СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		ИначеЕсли ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		Иначе
			ИзвлеченныйТекст = "";
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		
		Попытка
			ПрисоединенныйФайл.Записать();
		Исключение
			
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Ошибка при добавлении файла ""%1"": '") + КраткоеПредставлениеОшибки;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяБезРасширения + "." + РасширениеБезТочки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если ТранзакцияАктивна Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Возврат Неопределено;
		КонецПопытки;
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Добавление присоединенного файла'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

// Обновляет сведения о файле 
// Параметры
// ПрисоединенныйФайл - файл, сведения о котором необходимо обновить
// Свойства - соответствие - где ключ - свойства файла, значение - новое значение
//
Процедура ОбновитьДанныеФайла(ПрисоединенныйФайл, Свойства) Экспорт
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	Для Каждого ЭлементСвойство Из Свойства Цикл
		ПрисоединенныйФайлОбъект[ЭлементСвойство.Ключ] = ЭлементСвойство.Значение;
	КонецЦикла;
	
	ПрисоединенныйФайлОбъект.Записать();
	
КонецПроцедуры

// Используется в основной форме объекта присоединенного файла
//
Процедура ПриСозданииНаСервереПрисоединенныйФайл(Форма) Экспорт
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Форма.Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("Ключ", Форма.Ключ) Тогда
		Форма.Ключ = Форма.Параметры.Key;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = НСтр("ru = 'Присоединенный файл'");
	
	Команда = Форма.Команды.Добавить("ПерейтиКФормеФайла");
	Команда.Действие = "Подключаемый_ПерейтиКФормеФайла";
	
	Декорация = Форма.Элементы.Добавить("ПоясняющийТекст", Тип("ДекорацияФормы"));
	Декорация.Заголовок = НСтр("ru = 'Для того, что бы перейти к карточке файла нажмите на гиперссылку'");
	
	Кнопка = Форма.Элементы.Добавить("ПерейтиКФормеФайла1", Тип("КнопкаФормы"));
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Заголовок = НСтр("ru = 'Перейти к форме файла'");
	Кнопка.ИмяКоманды = "ПерейтиКФормеФайла";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка функциональности записи информации о наличии (отсутствии)
// присоединенных файлов

// Используется для установки флага наличия файлов по владельцу
//
Процедура УстановитьФлагНаличияФайла(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.ЕстьФайлы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
	МенеджерЗаписи.ЕстьФайлы = Истина;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные экспортные функции

// Используется в стандартной форме списка справочника присоединенных файлов
//
Процедура ВызватьИсключениеОткрытияФормы(Форма) Экспорт
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Форма.Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Самостоятельное использование формы не предусмотрено'");
	
КонецПроцедуры

// Используется при размещении файлов из сформированного образа
//
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ТипХраненияФайлов, ПрисоединяемыеФайлы) Экспорт
	
	Для Каждого ЭлементСоответствия Из СоответствиеПутейФайлов Цикл
		
		Позиция = Найти(ЭлементСоответствия.Ключ, "CatalogRef");
		
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(ЭлементСоответствия.Ключ);
		
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Лев(ЭлементСоответствия.Ключ, Позиция - 1));
		
		ИмяСправочника = Прав(ЭлементСоответствия.Ключ, СтрДлина(ЭлементСоответствия.Ключ) - Позиция -10);
		Ссылка = Справочники[ИмяСправочника].ПолучитьСсылку(УникальныйИдентификатор);
		
		Если Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПрисоединяемыеФайлы.Найти(ТипЗнч(Объект)) = Неопределено Тогда
			ПрисоединяемыеФайлы.Добавить(ТипЗнч(Объект));
		КонецЕсли;
		
		// в базе-приемнике файлы должны храниться в информационной базе - значит там их и разместим (даже если в исходной базе они были в томах)
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.ПутьКФайлу = "";
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			
			ОбновитьДвоичныеДанныеФайлаНаСервере(Объект, ПоместитьВоВременноеХранилище(ДвоичныеДанные));
			
		Иначе // в базе-приемнике файлы должны храниться в томах на диске - переместим разархивированный файл на том
			
			ФайлИсх = Новый Файл(ПолныйПутьФайлаНаДиске);
			РазмерФайла = ФайлИсх.Размер();
			
			ВремяИзменения = Объект.ДатаМодификацииУниверсальная;
			ИмяБезРасширения = Объект.Наименование;
			Расширение = Объект.Расширение;
			Зашифрован = Объект.Зашифрован;
			
			ПолныйПутьНовый = ФайлИсх.Путь + ИмяБезРасширения + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// добавить в один из томов (где есть свободное место)
			
			ФайловыеФункции.ДобавитьНаДиск(ПолныйПутьНовый, ПутьКФайлуНаТоме, СсылкаНаТом,
											ВремяИзменения, "",
											ИмяБезРасширения, Расширение, РазмерФайла, Зашифрован);
			
			Объект.ПутьКФайлу = ПутьКФайлуНаТоме;
			Объект.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли;
		
		Объект.Записать();
		
		Если НЕ ПустаяСтрока(ПолныйПутьНовый) Тогда
			УдалитьФайлы(ПолныйПутьНовый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Используется при обмене файлами для удаления регистрации изменений в плане обмена.
// Параметры
//  ПланОбменаСсылка - ссылка - ссылка на план обмена
//  ПрисоединяемыеФайлы - массив типов справочников с присоединенными файлами
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	Для Каждого Тип Из ПрисоединяемыеФайлы Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	
КонецПроцедуры

// Получает двоичные данные файла по ссылке и двоичные подписи из временного хранилища.
//
// Параметры
//  ПрисоединенныйФайл - ссылка на присоединенный файл
//  АдресПодписи - строка - адрес во временном хранилище подписи
//
// Возвращаемое значение
//  структура с полями
//		ДвоичныеДанные - двоичные данные присоединенного файла
//		ДвоичныеДанныеПодписи - двоичные данные подписи
//
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(ПрисоединенныйФайл, АдресПодписи) Экспорт
	
	СтруктураВозврата = Новый Структура("ДвоичныеДанные, ДвоичныеДанныеПодписи", 
										ПолучитьДвоичныеДанныеФайла(ПрисоединенныйФайл),
										ПолучитьИзВременногоХранилища(АдресПодписи));
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Используется при для получения запроса к присоединенным файлам с неизвлеченным текстом.
// Запрос формируется по всем справочникам присоединенных файлов.
// При этом в качестве параметра может прийти другой запрос, с которым следует сделать объединение.
//
// Параметры
//  ТекстЗапроса - строка - заполняется добавочный запрос
//
Процедура ПолучитьТекстЗапроса(ТекстЗапроса = Неопределено) Экспорт
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = "";
	ИначеЕсли НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	
	ЧислоФайловВВыборке = Цел(100 / ТипыВладельцев.Количество());
	ЧислоФайловВВыборке = ?(ЧислоФайловВВыборке < 10, 10, ЧислоФайловВВыборке);
	
	Индекс = 1;
	Для Каждого Тип Из ТипыВладельцев Цикл
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляФайловСНеизвлеченнымТекстом(ИмяСправочникаПрисоединенныхФайлов, ЧислоФайловВВыборке);
		Если Индекс < ТипыВладельцев.Количество() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает путь к файлу на диске. Ели файл хранится в информационной базе,
// предварительно сохраняет его.
//
// Параметры
//  ФайлСсылка - присоединенный файл (ссылка)
//
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка) Экспорт
	
	ИмяФайлаСПутем = "";
	
	Если ФайлСсылка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка.Ссылка;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ПрисоединенныйФайл.Пустая() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла - файл не найден в информационной базе. Обратитесь к администратору.
							| Файл: ""%1.%2""'"),
							ФайлСсылка.Наименование,
							ФайлСсылка.Расширение);
		КонецЕсли;
		ДвоичныеДанные = МенеджерЗаписи.ХранимыйФайл.Получить();
		ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ФайлСсылка.Расширение);
		ДвоичныеДанные.Записать(ИмяФайлаСПутем);
	Иначе
		Если НЕ ФайлСсылка.Том.Пустая() Тогда
			ИмяФайлаСПутем = ФайловыеФункции.ПолныйПутьТома(ФайлСсылка.Том) + ФайлСсылка.ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Используется как часть универсального интерфейса при записи
// извлеченного текста в объект
// Параметры
//  ФайлОбъект - присоединенный файл (объект)
// 
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ФайлОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает количество файлов хранящихся в томах
//
Функция ПодсчитатьКоличествоФайловВТомах() Экспорт
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	
	КоличествоФайловВТомах = 0;
	
	Для Каждого Тип Из ТипыВладельцев Цикл
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляФайловВТомах(ИмяСправочникаПрисоединенныхФайлов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоФайловВТомах = КоличествоФайловВТомах + Выборка.КоличествоФайлов;
		КонецЕсли
	КонецЦикла;
	
	Возврат КоличествоФайловВТомах;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные функции

Функция ТекстЗапросаДляФайловСНеизвлеченнымТекстом(ИмяСправочника, ЧислоФайловВВыборке)
	
	ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ [n]
			|	ПрисоединенныеФайлы.Ссылка					КАК Ссылка,
			|	ПрисоединенныеФайлы.СтатусИзвлеченияТекста	КАК СтатусИзвлеченияТекста,
			|	ПрисоединенныеФайлы.ТипХраненияФайла		КАК ТипХраненияФайла,
			|	ПрисоединенныеФайлы.Расширение				КАК Расширение
			|ИЗ
			|	Справочник.[ИмяСправочника] КАК ПрисоединенныеФайлы
			|ГДЕ
			|	(ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
			|			ИЛИ ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
			|	И НЕ ПрисоединенныеФайлы.Зашифрован";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[n]", ЧислоФайловВВыборке);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяСправочника]", ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляФайловВТомах(ИмяСправочника)
	
	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КОЛИЧЕСТВО(ПрисоединенныеФайлы.Ссылка), 0) КАК КоличествоФайлов
			|ИЗ
			|	Справочник.[ИмяСправочника] КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяСправочника]", ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(
			ПрисоединенныйФайл,
			АдресФайлаВоВременномХранилищеДвоичныеДанные,
			РеквизитыЗначения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлСсылка = ПрисоединенныйФайл;
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
		ФайлСсылка = ФайлОбъект.Ссылка;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресФайлаВоВременномХранилищеДвоичныеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилищеДвоичныеДанные);
	Иначе
		ДвоичныеДанные = АдресФайлаВоВременномХранилищеДвоичныеДанные;
	КонецЕсли;
	
	ФайлОбъект.Изменил = ОбщегоНазначения.ТекущийПользователь();
	
	Если РеквизитыЗначения <> Неопределено Тогда
		Для Каждого КлючЗначение Из РеквизитыЗначения Цикл
			ФайлОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ТранзакцияАктивна = Ложь;
	
	Попытка
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка;
			МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
			МенеджерЗаписи.Записать();
		Иначе
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ФайлНаДиске = Новый Файл(ПолныйПуть);
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
				
				ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ФайлОбъект.ПутьКФайлу, ФайлОбъект.Том,
					ФайлОбъект.ДатаМодификацииУниверсальная, "",
					ФайлОбъект.Наименование, ФайлОбъект.Расширение, ДвоичныеДанные.Размер(), ФайлОбъект.Зашифрован);
			Исключение
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации("Запись файла на диске",
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники[ФайлСсылка.Метаданные().Имя],
										ФайлСсылка,
										ТекстОшибкиПриСохраненииФайлаВТоме(ПодробноеПредставлениеОшибки(Инфо), ФайлСсылка));
				ВызватьИсключение ТекстОшибкиПриСохраненииФайлаВТоме(КраткоеПредставлениеОшибки(Инфо), ФайлСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
		ФайлОбъект.Размер = ДвоичныеДанные.Размер();
		
		ФайлОбъект.Записать();
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
			ФайлОбъект.Разблокировать();
		КонецЕсли;
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление данных присоединенного файла на сервере'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывает двоичные данные файла в информационную базу
//
// Параметры
// ПрисоединенныйФайлСсылка - ссылка на присоединенный файл
// ДвоичныеДанные - двоичные данные, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайлСсылка, ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайлСсылка;
	МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Возвращает двоичные данные присоединенного файла по ссылке
// Параметры
//  ПрисоединенныйФайлСсылка - ссылка на присоединенный файл
//
Функция ПолучитьДвоичныеДанныеФайла(ПрисоединенныйФайлСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайлСсылка;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ПрисоединенныйФайл.Пустая() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла - файл не найден в информационной базе. Обратитесь к администратору.
							| Файл: ""%1.%2""'"),
							ФайлОбъект.Наименование,
							ФайлОбъект.Расширение);
		КонецЕсли;
		Возврат МенеджерЗаписи.ХранимыйФайл.Получить();
	Иначе
		ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть)
		Исключение
			// запись в журнал регистрации
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайлСсылка);
			ЗаписьЖурналаРегистрации("Получение файла из тома",
									УровеньЖурналаРегистрации.Ошибка,
									Метаданные.Справочники[ПрисоединенныйФайлСсылка.Метаданные().Имя],
									ПрисоединенныйФайлСсылка,
									СообщениеОбОшибке);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
							| Файл: ""%1.%2""'"),
							ФайлОбъект.Наименование,
							ФайлОбъект.Расширение);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Проверяет, что к объекту с файлами присоединен по крайней мере один файл
//
Функция ОбъектИмеетФайлы(ВладелецФайла, ФайлИсключение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВладелецФайла.Метаданные().ПолноеИмя(), ".")[1];
	ИмяСправочника = ИмяОбъекта + "ПрисоединенныеФайлы";
	
	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Ссылка
			|ИЗ
			|	Справочник.[ИмяСправочникаСФайлами] КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
		
	Если ФайлИсключение <> Неопределено Тогда
		ТекстЗапроса =  ТекстЗапроса + "
			|	И ПрисоединенныеФайлы.Ссылка <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяСправочникаСФайлами]", ИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	Если ФайлИсключение <> Неопределено Тогда
		Запрос.Параметры.Вставить("Ссылка", ФайлИсключение);
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Формирует текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника - хранимого файла
//
Функция ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибкеФункции, Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибкеФункции);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Нстр("ru = 'Ссылка на файл: '");
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьНавигационнуюСсылку(Файл);
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Формирует текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника - хранимого файла
//
Функция ТекстОшибкиПриСохраненииФайлаВТоме(СообщениеОбОшибке, Файл)
	
	СообщениеОбОшибке = Нстр("ru = 'Ошибка, при сохранении файла в томе:'") + " " + СообщениеОбОшибке
						+ Символы.ПС + Нстр("ru = 'Ссылка на файл: '") + ПолучитьНавигационнуюСсылку(Файл);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ИзвлечьТекст(ДвоичныеДанные, Расширение, ИзвлеченныйТекст)
	
	Перем Отказ;
	
	Если ФайловыеФункции.ЭтоПлатформаWindows() И ФайловыеФункции.ИзвлекатьТекстыФайловНаСервере() Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ИзвлеченныйТекст = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ИмяВременногоФайла, , Отказ);
		УдалитьФайлы(ИмяВременногоФайла);
		
		Если Отказ Тогда
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		Иначе
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		ИзвлеченныйТекст = "";
		Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные экспортные функции поддержки обработчиков событий

// Обработчик подписки "перед удалением" присоединенного файла
//
Процедура ПередУдалениемПрисоединенногоФайлаСервер(Ссылка, ВладелецФайла, Том, ТипХраненияФайла, ПутьКФайлу) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбъектИмеетФайлы(ВладелецФайла, Ссылка) Тогда
		МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Том) + ПутьКФайлу;
			Попытка
				Файл = Новый Файл(ПолныйПуть);
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
				ПутьСПодкаталогом = Файл.Путь;
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					УдалитьФайлы(ПутьСПодкаталогом);
				КонецЕсли;
			Исключение
				// если файл не удален, считаем что ошибки не было
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "при записи" присоединенного файла
//
Процедура ПриЗаписиПрисоединенногоФайлаСервер(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменилась = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = ПолучитьОчереднойИдентификаторОбъекта();
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры
