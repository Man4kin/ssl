// Получить уникальное имя файла в рабочем каталоге - если есть совпадения - будет имя типа A1\qqq.doc
//
Функция ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла) Экспорт 
	РезультирующийПуть = ""; 
	
	Счетчик = 0;
	ЦиклНомер = 0;
	Успешно = Ложь;
	
	ГенераторСлучая = Неопределено;
	#Если Не ВебКлиент Тогда
		ГенераторСлучая = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДата()));
	#КонецЕсли
	
	Пока НЕ Успешно И ЦиклНомер < 100 Цикл
		НомерКаталога = 0;
		#Если Не ВебКлиент Тогда
			НомерКаталога = ГенераторСлучая.СлучайноеЧисло(0, 25);
		#Иначе
			НомерКаталога = Секунда(ТекущаяДата()) % 26;
		#КонецЕсли
		
		КодБукваA = КодСимвола("A", 1); 
		КодКаталога = КодБукваA + НомерКаталога;
		
		БукваКаталога = Символ(КодКаталога);
		
		ПодКаталог = ""; // Частичный путь

		// По умолчанию вначале будет класть в корень, а уже потом, 
		//  если не сможет, то в A, B, ... Z,  A1, B1, .. Z1, ..  A2, B2 и т.д.
		Если  Счетчик = 0 Тогда
			ПодКаталог = "";
		Иначе
			ПодКаталог = БукваКаталога; 
			ЦиклНомер = Окр(Счетчик / 26);
			
			Если ЦиклНомер <> 0 Тогда
				ЦиклНомерСтрока = Строка(ЦиклНомер);
				ПодКаталог = ПодКаталог + ЦиклНомерСтрока;
			КонецЕсли;
			
			ПодКаталог = ПодКаталог + "\";  
		КонецЕсли;

		ПолныйПодКаталог = ИмяКаталога + ПодКаталог;  

		// Создать каталог для файлов
		КаталогНаДиске = Новый Файл(ПолныйПодКаталог);
		Если НЕ КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ПолныйПодКаталог);
		КонецЕсли;
		
		ФайлПопытки = ПолныйПодКаталог + ИмяФайла;
		Счетчик = Счетчик + 1;
		
		// Проверить, есть ли файл с таким именем
		ФайлНаДиске = Новый Файл(ФайлПопытки);
		Если НЕ ФайлНаДиске.Существует() Тогда  // нет такого файла
			РезультирующийПуть = ПодКаталог + ИмяФайла;
			Успешно = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультирующийПуть;	
КонецФункции

// Получить уникальное имя файла в рабочем каталоге - если есть совпадения - будет имя типа A1\qqq.doc
//
Функция ПолучитьМассивУникальныхИменСПутем(ИмяКаталога, МассивГлавныйИПодчиненные, МассивПолныхИмен) Экспорт 
	
	Счетчик = 0;
	ЦиклНомер = 0;
	Успешно = Ложь;
	
	ГенераторСлучая = Неопределено;
	#Если Не ВебКлиент Тогда
		ГенераторСлучая = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДата()));
	#КонецЕсли
	
	Пока НЕ Успешно И ЦиклНомер < 100 Цикл
		НомерКаталога = 0;
		#Если Не ВебКлиент Тогда
			НомерКаталога = ГенераторСлучая.СлучайноеЧисло(0, 25);
		#Иначе
			НомерКаталога = Секунда(ТекущаяДата()) % 26;
		#КонецЕсли
		
		КодБукваA = КодСимвола("A", 1); 
		КодКаталога = КодБукваA + НомерКаталога;
		
		БукваКаталога = Символ(КодКаталога);
		
		ПодКаталог = ""; // Частичный путь

		// По умолчанию вначале будет класть в корень, а уже потом, 
		//  если не сможет, то в A, B, ... Z,  A1, B1, .. Z1, ..  A2, B2 и т.д.
		Если  Счетчик = 0 Тогда
			ПодКаталог = "";
		Иначе
			ПодКаталог = БукваКаталога; 
			ЦиклНомер = Окр(Счетчик / 26);
			
			Если ЦиклНомер <> 0 Тогда
				ЦиклНомерСтрока = Строка(ЦиклНомер);
				ПодКаталог = ПодКаталог + ЦиклНомерСтрока;
			КонецЕсли;
			
			ПодКаталог = ПодКаталог + "\";  
		КонецЕсли;

		ПолныйПодКаталог = ИмяКаталога + ПодКаталог;  

		
		МассивПолныхИмен.Очистить();
		Успешно = Истина;
		
		Для Каждого ИмяИПуть Из МассивГлавныйИПодчиненные Цикл
			
			ФайлПопытки = ПолныйПодКаталог + ИмяИПуть;
			
			// Проверить, есть ли файл с таким именем
			ФайлНаДиске = Новый Файл(ФайлПопытки);
			
			Если НЕ ФайлНаДиске.Существует() Тогда  // нет такого файла
				
				// Создать каталог для файлов
				СоздатьКаталог(ФайлНаДиске.Путь);
				
				РезультирующийПуть = ПодКаталог + ИмяИПуть;
				МассивПолныхИмен.Добавить(РезультирующийПуть);
			Иначе	
				МассивПолныхИмен.Очистить();
				Успешно = Ложь;
				Прервать; // выход из цикла подчиненных файлов
			КонецЕсли;

		КонецЦикла;	
		
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Успешно;	
КонецФункции

// Вернет Истина если файл можно загружать (размер не превышает максимальный, расширение не запрещено)
Функция ФайлМожноЗагружать(ВыбранныйФайл, МаксРазмерФайла, ЗапретЗагрузкиФайловПоРасширению, 
	СписокЗапрещенныхРасширений, МассивИменФайловСОшибками) Экспорт
	
	// Размер файла слишком большой
	Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
		
		РазмерВМб = ВыбранныйФайл.Размер() / (1024 * 1024);
		РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
		Запись.Вставить("Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Размер файла (%1 Мб) превышает максимальный размер файла: (%2 Мб)'"),
						?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")), 
						?(РазмерВМбМакс >= 1, Формат(РазмерВМбМакс, "ЧДЦ=0"), Формат(РазмерВМбМакс, "ЧДЦ=1; ЧН=0"))
						)); 
		МассивИменФайловСОшибками.Добавить(Запись);
		
		Возврат Ложь;
	КонецЕсли;
	
	// расширение файла в списке запрещенных
	РасширениеФайла = ВыбранныйФайл.Расширение;
	Если Не РаботаСФайламиКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
		Запись.Вставить("Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				 РасширениеФайла));
		МассивИменФайловСОшибками.Добавить(Запись);
		
		Возврат Ложь;
	КонецЕсли;
	
	// временные файлы Word не импортируем
	Если Лев(ВыбранныйФайл.Имя, 1) = "~" И ВыбранныйФайл.ПолучитьНевидимость() = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции	

// создает элемент справочника Файлы
Функция СоздатьЭлементСправочникаФайлы(ВыбранныйФайл, МассивСтруктурВсехФайлов, Владелец, 
	ИдентификаторФормы, Комментарий, ХранитьВерсии, ДобавленныеФайлы,
	АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста,
	Пользователь = Неопределено) Экспорт
	
	ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
	Расширение = ВыбранныйФайл.Расширение;
	
	Расширение = РасширениеБезТочки(ВыбранныйФайл.Расширение);
	ВремяИзменения = ВыбранныйФайл.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = ВыбранныйФайл.ПолучитьУниверсальноеВремяИзменения();
	Размер = ВыбранныйФайл.Размер();
	
	// Создадим карточку Файла в БД
	ДокСсылка = РаботаСФайлами.СоздатьФайлСВерсией(
		Владелец,
		ИмяБезРасширения,
		Расширение,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Размер,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		Ложь,  // это не веб клиент
		Пользователь,
		Комментарий);
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);	
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаТекста);	
	КонецЕсли;	

	ДобавленныйФайлИПуть = Новый Структура("ФайлСсылка, Путь", ДокСсылка, ВыбранныйФайл.Путь);	
	ДобавленныеФайлы.Добавить(ДобавленныйФайлИПуть);
	
	Запись = Новый Структура;
	Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
	Запись.Вставить("Файл", ДокСсылка);
	МассивСтруктурВсехФайлов.Добавить(Запись);

КонецФункции

// добавляет в конце "\"
Процедура ДобавитьСлешЕслиНужно(НовыйПуть) Экспорт
	Если Прав(НовыйПуть, 1) <> "\" И Прав(НовыйПуть,1) <> "/" Тогда
		НовыйПуть = НовыйПуть + "\";
	КонецЕсли;
КонецПроцедуры	

// удаляет файлы после импорта или загрузки
Процедура УдалитьФайлыПослеДобавления(МассивСтруктурВсехФайлов, МассивВсехПапок, РежимЗагрузки) Экспорт
	
	Для Каждого Элемент Из МассивСтруктурВсехФайлов Цикл
		ВыбранныйФайл = Новый Файл(Элемент.ИмяФайла);
		ВыбранныйФайл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ВыбранныйФайл.ПолноеИмя);
	КонецЦикла;
	
	Если РежимЗагрузки Тогда
		Для Каждого Элемент Из МассивВсехПапок Цикл
			НайденныеФайлы = НайтиФайлы(Элемент, "*.*");
			Если НайденныеФайлы.Количество() = 0 Тогда
				ВыбранныйФайл = Новый Файл(Элемент);
				ВыбранныйФайл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыбранныйФайл.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

// Функция предназначена для преобразования расширения файла в следующий вид: без точки и в нижнем регистре
// Параметры:
//  СтрРасширение - Строка. Расширение для преобразования
// Возвращаемое значение:
//  Преобразованная Строка
Функция РасширениеБезТочки(СтрРасширение) Экспорт
	Расширение = НРег(СокрЛП(СтрРасширение));
	Если Сред(Расширение, 1, 1) = "." Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	Возврат Расширение;
КонецФункции // РасширениеБезТочки()

// Возвращает массив файлов, эмулируя работу НайтиФайлы - но не по файловой системе, а по Соответствию
//  если ПсевдоФайловаяСистема пуста - работает с файловой системой
Функция НайтиФайлыПсевдо(Знач ПсевдоФайловаяСистема, Путь) Экспорт
	Если ПсевдоФайловаяСистема.Количество() = 0 Тогда
		Файлы = НайтиФайлы(Путь, "*.*");
		Возврат Файлы;
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	ЗначениеНайденное = ПсевдоФайловаяСистема.Получить(Строка(Путь));
	Если ЗначениеНайденное <> Неопределено Тогда
		Для Каждого ИмяФайла Из ЗначениеНайденное Цикл
			Попытка
				ФайлИзСписка = Новый Файл(ИмяФайла);
				Файлы.Добавить(ФайлИзСписка);
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Файлы;
КонецФункции
