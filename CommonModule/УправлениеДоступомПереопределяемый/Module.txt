////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМЫЕ ФУНКЦИИ УПРАВЛЕНИЯ ДОСТУПОМ

// Функция ОписанияНачальногоЗаполненияПрофилейГруппДоступа возвращает
// массив структур, которые будут использованы для начального заполнения и
// восстановления начального заполнения профилей.
//
//  Пустая структура может быть получена при помощи функции
// УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
//
// Возвращаемое значение:
//  Массив.
//
Функция ОписанияНачальногоЗаполненияПрофилейГруппДоступа() Экспорт
	
	ОписанияПрофилей = Новый Массив;
		
	Возврат ОписанияПрофилей;
	
КонецФункции // ОписанияНачальногоЗаполненияПрофилейГруппДоступа()

// Процедура ЗаполнитьСвойстваВидаДоступа заполняет свойства видов доступа,
// заданных прикладным разработчиком, как предопределенные элементы
// в плане видов характеристик ВидыДоступа.
//  Структуру свойств см. в функции, вызывающей эту процедуру:
// УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
//
// Параметры:
//  Свойства     - СтрокаТаблицыЗначений, содержащая поля,
//                 описание которых  см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
// 
Процедура ЗаполнитьСвойстваВидаДоступа(Знач Свойства) Экспорт
	
	// Свойства
	Если Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ДополнительныеСведения Тогда
		Свойства.Таблицы.Добавить("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
	// Конец Свойства
	
	// УчетныеЗаписиЭлектроннойПочты
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.УчетныеЗаписиЭлектроннойПочты Тогда
		Свойства.Таблицы.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
	// Конец УчетныеЗаписиЭлектроннойПочты
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа заполняет
// описания возможных прав значений доступа.
//  Структуру описаний см. в функции, вызывающей эту процедуру:
// УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
// 
// Параметры:
//  ВозможныеПрава - ТаблицаЗначений, содержащая поля,
//                 описание которых  см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//
Процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа(Знач ВозможныеПрава) Экспорт
	
КонецПроцедуры

// Функция ТаблицаПодчиненностиПользователей, возвращает в менеджере временных таблиц
// таблицу, содержащую пользователей, подчиненных другим пользователям,
// для расширения доступа пользователей доступом подчиненных пользователей.
//
//  Например, если есть справочник Подразделения у которого есть руководитель (пользователь)
// и состав сотрудников (пользователей), то можно сделать выборку из этого справочника
// и поместить во временную таблицу.
//  При записи групп пользователей, будет учтено, что руководители (пользователи) должны
// иметь доступ, включающий доступ их подчиненных (пользователей).
//  При изменении связи Руководитель<->Подчиненный, например, при изменении руководителя
// в подразделении, нужно вызвать в модуле УправлениеДоступом процедуру
// ЗаписатьГруппыИВидыДоступа(Справочник.ГруппыПользователей.ВсеПользователи), чтобы
// произошло обновление связей, при котором используется эта процедура.
//
//  При записи связей выполняется обновление ролей пользователей информационной базы (если нужно),
// при этом возможны ошибки, например, если роль была переименована.
// Чтобы при интерактивной записи нового руководителя сообщить о ошибке, нужно
// сделать вызов в таком виде:
//
////Процедура ПриЗаписи(Отказ)
////	
////	ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи.ПолучитьОбъект();
////	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(ВсеПользователи);
////	Если ВсеПользователи.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
////		ДополнительныеСвойства.Вставить("ЕстьОшибки");
////	КонецЕсли;
////	
////КонецПроцедуры
//
// А в форме подразделения разместить обработчики событий:
//
////&НаСервере
////Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
////	
////	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
////		ПараметрыЗаписи.Вставить("ЕстьОшибки");
////	КонецЕсли;
////	
////КонецПроцедуры
//
////&НаКлиенте
////Процедура ПослеЗаписи(ПараметрыЗаписи)
////	
////	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
////		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
////	КонецЕсли;
////	
////КонецПроцедуры
//
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в который можно поместить таблицу подчиненности пользователей.
//
// Возвращаемое значение:
//  Булево.      - если Истина, МенеджерВременныхТаблиц - содержит временную таблицу "ТаблицаПодчиненностиПользователей",
//                              с колонками Пользователь и ПодчиненныйПользователь, имеющих тип СправочникСсылка.Пользователи.
//
Функция ТаблицаПодчиненностиПользователей(МенеджерВременныхТаблиц) Экспорт
		
	Возврат Ложь;
	
КонецФункции // ТаблицаПодчиненностиПользователей()

// Функция ТаблицаГруппИсполнителей, возвращает в менеджере временных таблиц
// таблицу, содержащую пользователей некоторой дополнительной группы пользователей,
//
// например, группы доступа исполнителей задач, которая соответствует
// ключу адресации (например, РольИсполнителя + ОсновнойОбъектАдресации + ДополнительныйОбъектАдресации).
//
//  Функция вызывается из процедуры УправлениеДоступом.ЗаписатьГруппыИВидыДоступа() при обновлении соответствия
// пользователей и групп пользователей, выполняемом, обычно при изменении пользователя, группы пользователя
// или некоторой дополнительной группы пользователей.
//
//  Причем, при изменении состава дополнительных групп пользователей, вызов должен сделать прикладной разработчик
// "ЗаписатьГруппыИВидыДоступа(Справочник.ГруппыПользователей.ВсеПользователи);".
//
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в который можно поместить таблицу групп исполнителей.
//
// Возвращаемое значение:
//  Булево       - если Истина, МенеджерВременныхТаблиц - содержит временную таблицу "ТаблицаГруппИсполнителей", с колонками
//                              ГруппаИсполнителей (например, СправочникСсылка.ГруппыДоступаИсполнителей) и
//                              Пользователь (тип СправочникСсылка.Пользователи).
//
Функция ТаблицаГруппИсполнителей(МенеджерВременныхТаблиц) Экспорт
		
	Возврат Ложь;
	
КонецФункции // ТаблицаГруппИсполнителей()

// Процедура ПриИзмененииНаборовЗначенийДоступа объекта позволяет
// реализовать перезапись зависимых наборов значений доступа других объектов.
//
//  Вызывается из процедур:
// УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// УправлениеДоступом.ЗаписатьЗависимыеНаборыЗначенийДоступа().
// 
//
// Параметры:
//  Объект        СправочникОбъект, ДокументОбъект, ...
//                Содержит процедуру ЗаполнитьНаборыЗначенийДоступа().
//
Процедура ПриИзмененииНаборовЗначенийДоступа(Знач Объект) Экспорт
	
		
КонецПроцедуры // СсылкиОбъектовЗависимыхНаборовЗначенийДоступа()

// Процедура ЗаполнитьЗависимостиПравДоступа заполняет зависимости прав доступа
// "подчиненного" объекта, например, задачи ЗадачаИсполнителя,
// от "ведущего" объекта, например,  бизнес-процесса Задание,
// которые отличаются от стандартных, а именно, когда
// в стандартном шаблоне ограничения доступа используется вид доступа "Объект":
// 1) при чтении "подчиненного" объекта
//    проверяется наличие права чтения "ведущего" объекта
//    и проверяется отсутствие ограничения чтения "ведущего" объекта;
// 2) при добавлении, изменении, удалении "подчиненного" объекта
//    проверяется наличие права изменения "ведущего" объекта
//    и проверяется отсутствие ограничения изменения "ведущего" объекта.
//
// Параметры:
//  Таблица      - РегистрСведенийНаборЗаписей.ЗависимостиПравДоступа.
//                 Допустимые значения ресурсов ПланВидовХарактеристикСсылка:
//                 .ПравоЧтения,  .ПравоДобавления, .ПравоИзменения.
//                 
//                 Если задано недопустимое значение, будет установлено значение по умолчанию:
//                 для права Чтение                         - ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения,
//                 для прав Добавление, Изменение, Удаление - ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения.
//                 
//                 Следует иметь в виду, что обычная "жесткость" условия ограничения доступа
//                 уменьшается в порядке "Добавление", "Изменение", "Чтение",
//                 Т.е. то, что можно добавить, можно и изменить и прочитать,
//                 соответственно, то что можно изменить можно и прочитать, но не наоборот.
//
Процедура ЗаполнитьЗависимостиПравДоступа(Знач Таблица) Экспорт
	
		
КонецПроцедуры

