////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМЫЕ ФУНКЦИИ УПРАВЛЕНИЯ ДОСТУПОМ

// Функция ОписанияНачальногоЗаполненияПрофилейГруппДоступа возвращает
// массив структур, которые будут использованы для начального заполнения и
// восстановления начального заполнения профилей.
//
//  Пустая структура может быть получена при помощи функции
// УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа().
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы
// Управление доступом.
//
// Возвращаемое значение:
//  Массив.
//
Функция ОписанияНачальногоЗаполненияПрофилейГруппДоступа() Экспорт
	
	ОписанияПрофилей = Новый Массив;
	
	Возврат ОписанияПрофилей;
	
КонецФункции

// Процедура ЗаполнитьСвойстваВидаДоступа заполняет свойства видов доступа,
// заданных прикладным разработчиком, как предопределенные элементы
// в плане видов характеристик ВидыДоступа.
//  Структуру свойств см. в функции, вызывающей эту процедуру:
// УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
//
// Параметры:
//  Свойства     - СтрокаТаблицыЗначений, содержащая поля,
//                 описание которых  см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.СвойстваВидовДоступа().
// 
Процедура ЗаполнитьСвойстваВидаДоступа(Знач Свойства) Экспорт
	
	// БизнесПроцессыИЗадачи
	Если Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Пользователи Тогда
		Свойства.Таблицы.Добавить("Справочник.ГруппыИсполнителейЗадач");
	// Конец БизнесПроцессыИЗадачи
		
	// РаботаСПочтовымиСообщениями
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.УчетныеЗаписиЭлектроннойПочты Тогда
		Свойства.Таблицы.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
	// Конец РаботаСПочтовымиСообщениями
	
	// Свойства
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ДополнительныеСведения Тогда
		Свойства.Таблицы.Добавить("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
	// Конец Свойства
	КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа заполняет
// описания возможных прав значений доступа.
//  Структуру описаний см. в функции, вызывающей эту процедуру:
// УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
// 
// Параметры:
//  ВозможныеПрава - ТаблицаЗначений, содержащая поля,
//                 описание которых  см. в комментарии к функции
//                 УправлениеДоступомСерверПовтИсп.ВозможныеПраваПоЗначениямДоступа().
//
Процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа(Знач ВозможныеПрава) Экспорт
	
КонецПроцедуры

// Функция ТаблицаПодчиненностиПользователей, возвращает в менеджере временных таблиц
// таблицу, содержащую пользователей, подчиненных другим пользователям,
// для расширения доступа пользователей доступом подчиненных пользователей.
//
//  Например, если есть справочник Подразделения у которого есть руководитель (пользователь)
// и состав сотрудников (пользователей), то можно сделать выборку из этого справочника
// и поместить во временную таблицу.
//  При записи групп пользователей, будет учтено, что руководители (пользователи) должны
// иметь доступ, включающий доступ их подчиненных (пользователей).
//  При изменении связи Руководитель<->Подчиненный, например, при изменении руководителя
// в подразделении, нужно вызвать в модуле УправлениеДоступом процедуру
// ЗаписатьГруппыИВидыДоступа(Справочник.ГруппыПользователей.ВсеПользователи), чтобы
// произошло обновление связей, при котором используется эта процедура.
//
//  При записи связей выполняется обновление ролей пользователей информационной базы (если нужно),
// при этом возможны ошибки, например, если роль была переименована.
// Чтобы при интерактивной записи нового руководителя сообщить о ошибке, нужно
// сделать вызов в таком виде:
//
////Процедура ПриЗаписи(Отказ)
////	
////	ВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи.ПолучитьОбъект();
////	УправлениеДоступом.ЗаписатьГруппыИВидыДоступа(ВсеПользователи);
////	Если ВсеПользователи.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
////		ДополнительныеСвойства.Вставить("ЕстьОшибки");
////	КонецЕсли;
////	
////КонецПроцедуры
//
// А в форме подразделения разместить обработчики событий:
//
////&НаСервере
////Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
////	
////	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
////		ПараметрыЗаписи.Вставить("ЕстьОшибки");
////	КонецЕсли;
////	
////КонецПроцедуры
//
////&НаКлиенте
////Процедура ПослеЗаписи(ПараметрыЗаписи)
////	
////	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
////		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
////	КонецЕсли;
////	
////КонецПроцедуры
//
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в который можно поместить таблицу подчиненности пользователей.
//                 Поля:
//                   Пользователь            - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи
//                   ПодчиненныйПользователь - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи
//                   ВидПодчиненности        - ЛюбаяСсылка, Строка - используется в интерфейсе
//                                             форма ПраваДоступа, форма элемента группы доступа, в отчете права доступа
//                                             Может принимать значения, например, "руководитель", "исполняющий обязанности" и др.
//
// Возвращаемое значение:
//  Булево.      - если Истина, МенеджерВременныхТаблиц - содержит временную таблицу "ТаблицаПодчиненностиПользователей",
//                              с колонками Пользователь и ПодчиненныйПользователь, имеющих тип СправочникСсылка.Пользователи.
//
Функция ТаблицаПодчиненностиПользователей(МенеджерВременныхТаблиц) Экспорт
	
	Возврат Ложь;
	
КонецФункции // ТаблицаПодчиненностиПользователей()

// Функция ТаблицаГруппИсполнителей, возвращает в менеджере временных таблиц
// таблицу, содержащую пользователей некоторой дополнительной группы пользователей,
//
// например, группы доступа исполнителей задач, которая соответствует
// ключу адресации (например, РольИсполнителя + ОсновнойОбъектАдресации + ДополнительныйОбъектАдресации).
//
//  Функция вызывается из процедуры УправлениеДоступом.ЗаписатьГруппыИВидыДоступа() при обновлении соответствия
// пользователей и групп пользователей, выполняемом, обычно при изменении пользователя, группы пользователя
// или некоторой дополнительной группы пользователей.
//
//  Причем, при изменении состава дополнительных групп пользователей, вызов должен сделать прикладной разработчик
// "ЗаписатьГруппыИВидыДоступа(Справочник.ГруппыПользователей.ВсеПользователи);".
//
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в который можно поместить таблицу групп исполнителей.
//
// Возвращаемое значение:
//  Булево       - если Истина, МенеджерВременныхТаблиц - содержит временную таблицу "ТаблицаГруппИсполнителей", с колонками
//                              ГруппаИсполнителей (например, СправочникСсылка.ГруппыДоступаИсполнителей) и
//                              Пользователь (тип СправочникСсылка.Пользователи).
//
Функция ТаблицаГруппИсполнителей(МенеджерВременныхТаблиц) Экспорт
	
	// БизнесПроцессыИЗадачи
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
	|	ИсполнителиЗадач.Исполнитель КАК Пользователь
	|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Возврат Истина;
	// Конец БизнесПроцессыИЗадачи
	
	Возврат Ложь;
	
КонецФункции // ТаблицаГруппИсполнителей()

// Процедура ПриИзмененииНаборовЗначенийДоступа объекта позволяет
// реализовать перезапись зависимых наборов значений доступа других объектов.
//
//  Вызывается из процедур:
// УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// УправлениеДоступом.ЗаписатьЗависимыеНаборыЗначенийДоступа().
// 
//
// Параметры:
//  Ссылка       - СправочникСсылка, ДокументСсылка, ...
//
//  СсылкиНаЗависимыеОбъекты - Массив элементов типа СправочникСсылка, ДокументСсылка, ...
//                 Содержит ссылки на объекты с зависимыми наборами значений доступа
//                 Начальное значение - пустой массив
//
Процедура ПриИзмененииНаборовЗначенийДоступа(Знач Ссылка, СсылкиНаЗависимыеОбъекты) Экспорт
	
КонецПроцедуры

// Процедура ЗаполнитьЗависимостиПравДоступа заполняет зависимости прав доступа
// "подчиненного" объекта, например, задачи ЗадачаИсполнителя,
// от "ведущего" объекта, например,  бизнес-процесса Задание,
// которые отличаются от стандартных, а именно, когда
// в стандартном шаблоне ограничения доступа используется вид доступа "Объект":
// 1) при чтении "подчиненного" объекта
//    проверяется наличие права чтения "ведущего" объекта
//    и проверяется отсутствие ограничения чтения "ведущего" объекта;
// 2) при добавлении, изменении, удалении "подчиненного" объекта
//    проверяется наличие права изменения "ведущего" объекта
//    и проверяется отсутствие ограничения изменения "ведущего" объекта.
//
// Параметры:
//  Таблица      - РегистрСведенийНаборЗаписей.ЗависимостиПравДоступа.
//                 Допустимые значения ресурсов ПланВидовХарактеристикСсылка:
//                 .ПравоЧтения,  .ПравоДобавления, .ПравоИзменения.
//                 
//                 Если задано недопустимое значение, будет установлено значение по умолчанию:
//                 для права Чтение                         - ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения,
//                 для прав Добавление, Изменение, Удаление - ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения.
//                 
//                 Следует иметь в виду, что обычная "жесткость" условия ограничения доступа
//                 уменьшается в порядке "Добавление", "Изменение", "Чтение",
//                 Т.е. то, что можно добавить, можно и изменить и прочитать,
//                 соответственно, то что можно изменить можно и прочитать, но не наоборот.
//
Процедура ЗаполнитьЗависимостиПравДоступа(Знач Таблица) Экспорт
	
	// БизнесПроцессыИЗадачи
	
	// Задача исполнителя может быть изменена, когда бизнес-процесс доступен только для чтения,
	// поэтому проверка права изменения и ограничения изменения не требуется,
	// а требуется более "мягкое" условие - проверка права и ограничения чтения.
	//
	// Для задач права добавление и удаление могут быть использованы только в привилегированном
	// режиме, поэтому для них проверять что-либо не требуется.
	Строка = Таблица.Добавить();
	Строка.ПодчиненнаяТаблица   = "Задача.ЗадачаИсполнителя";
	Строка.ТипВедущейТаблицы = БизнесПроцессы.Задание.ПустаяСсылка();
	// Для права Изменения проверка изменяется с "Изменение" на "Чтение".
	Строка.ПриПроверкеПраваИзменение  = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
	
	// Конец БизнесПроцессыИЗадачи
	
КонецПроцедуры

// Функция УпрощенныйИнтерфейсНастройкиПравДоступа возвращает
// вид используемого интерфейса для настройки прав доступа
//  Это позволяет для прикладных конфигураций
// с небольшим количеством пользователей 
// использовать более простой, но менее
// функциональный интерфейс.
//
// Возвращаемое значение:
//  Булево
//
Функция УпрощенныйИнтерфейсНастройкиПравДоступа() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Процедура ЗаполнитьВидыОграниченийПравОбъектовМетаданных
// заполняет описание видов ограничений прав объектов метаданных
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах явно, виды доступа, используемые в наборах значений
// доступа могут быть получены из текущего состояния регистра
// сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта]
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Добавление.Организации
//                           Документ.ПриходнаяНакладная.Добавление.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Добавление.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Добавление.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ЗаполнитьВидыОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
КонецПроцедуры

