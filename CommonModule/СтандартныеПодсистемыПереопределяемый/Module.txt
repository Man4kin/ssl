// Неинтерактивное обновление данных ИБ при смене версии библиотеки
// Обязательная "точка входа" обновления ИБ в библиотеке.
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления("СтандартныеПодсистемы", ВерсияБиблиотеки(), 
		ОбработчикиОбновления());
	
КонецПроцедуры

// Возвращает номер версии Библиотеки стандартных подсистем.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.7.5";
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки
//
// Возвращаемое значение:
//   Структура - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	// УправлениеДоступом
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьПоставляемыеПрофилиИГруппыДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьТаблицыРолейПрофилейГруппДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьЗависимостиПравДоступа";
	// Конец УправлениеДоступом
	
	// РаботаСПочтовымиСообщениями
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.Процедура = "ЭлектроннаяПочта.ЗаполнитьСистемнуюУчетнуюЗапись";
	// Конец РаботаСПочтовымиСообщениями
	
	// КонтактнаяИнформация
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейПереопределяемый.КонтактнаяИнформацияОбновлениеИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.3";
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ЗагрузитьСтраныМира";
	// Конец КонтактнаяИнформация
	
	// АдресныйКлассификатор
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "АдресныйКлассификатор.ЗагрузитьАдресныеОбъектыПервогоУровня";
	// Конец АдресныйКлассификатор
	
	// БизнесПроцессыИЗадачи
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.2";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.6";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеИнформационнойБазыПредметСтрокой";
	// Конец БизнесПроцессыИЗадачи
	
	// ПолнотекстовыйПоиск
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.10";
	Обработчик.Процедура = "ПолнотекстовыйПоискСервер.ИнициализироватьФункциональнуюОпциюПолнотекстовыйПоиск";
	// Конец ПолнотекстовыйПоиск
	
	// ПолучениеФайловИзИнтернета
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.1";
	Обработчик.Процедура = "ПолучениеФайловИзИнтернета.ОбновлениеХранимыхНастроекПрокси";
	// Конец ПолучениеФайловИзИнтернета
	
	// ВерсионированиеОбъектов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ВерсионированиеОбъектов.ОбновитьНастройкиВерсионированияОбъектов";
	// Конец ВерсионированиеОбъектов
	
	// Пользователи
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2";
	Обработчик.Процедура = "Пользователи.ЗаполнитьИдентификаторыПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.15";
	Обработчик.Процедура = "Пользователи.ЗаполнениеРегистраСоставГруппПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ВнешниеПользователи.ЗаполнитьСоставГруппВнешнихПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ВнешниеПользователи.ДляВнешнихПользователейСоздатьПользователейИБ";
	// Конец Пользователи
	
	// РаботаСФайлами
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2"; // при обновлении на 1.0.5.2 сработает обработчик
	Обработчик.Процедура = "РаботаСФайлами.ЗаполнитьНомерВерсииИзКодаСправочника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2"; // при обновлении на 1.0.5.2 сработает обработчик
	Обработчик.Процедура = "РаботаСФайлами.ЗаполнитьТипХраненияФайлаВБазе";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.7"; // при обновлении на 1.0.5.7 сработает обработчик
	Обработчик.Процедура = "РаботаСФайлами.СменитьИндексПиктограммы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.3"; // при обновлении на 1.0.6.3 сработает обработчик
	Обработчик.Процедура = "РаботаСФайлами.ЗаполнитьПутиТома";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "РаботаСФайлами.ПерезаписатьВсеФайлы";
	// Конец РаботаСФайлами
	
	// ЭЦП
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ОбщегоНазначения.ЗаполнитьНазначенияСертификатовЭЦП";
	// Конец ЭЦП
	
	// Свойства
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.7";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьСписокДополнительныхСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьПереименованныеРоли_БСП_1_0_7_1";
	// Конец Свойства
	
	// Валюты
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.9";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ОбновитьФорматХраненияПрописиНаРусскомЯзыке";
	// Конец Валюты
	
	// КалендарныеГрафики
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.2";
	Обработчик.Процедура = "КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2010Год";
	// Конец КалендарныеГрафики
	
	// ФизическиеЛица
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ФизическиеЛица.ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.8";
	Обработчик.Процедура = "ФизическиеЛица.ПреобразоватьУдостоверенияЛичностиВДокументы";
	// Конец ФизическиеЛица
	
	// ДополнительныеОтчетыИОбработки
	Если Метаданные.Имя <> "УправлениеТорговлей" Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "1.0.7.1";
		Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ОбновитьПользовательскиеНастройкиДоступаКОбработкам";
	КонецЕсли;
	// Конец ДополнительныеОтчетыИОбработки
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает структуру параметров, необходимых для инициализации
// конфигурации на клиенте.
// 
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	Параметры.Вставить("ОшибкаАвторизации", Пользователи.ОшибкаАвторизации());
	Если ЗначениеЗаполнено(Параметры.ОшибкаАвторизации) Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	КонецЕсли;
	Параметры.Вставить("ИнформационнаяБазаЗаблокированаДляОбновления", 
		ОбновлениеИнформационнойБазы.ПроверитьНевозможностьОбновленияИнформационнойБазы());
	Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы", 
		ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы());
	Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации());
	
	Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
	
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	Параметры.Вставить("ИнформационнаяБазаФайловая", ОбщегоНазначения.ИнформационнаяБазаФайловая());
	// Конец СтандартныеПодсистемы
	
	// ЗавершениеРаботыПользователей
	Параметры.Вставить("ПараметрыБлокировкиСеансов", Новый ФиксированнаяСтруктура(СоединенияИБ.ПараметрыБлокировкиСеансов()));
	// Конец ЗавершениеРаботыПользователей
	
	// ОбновлениеКонфигурации
	Параметры.Вставить("НастройкиОбновления", 
		Новый ФиксированнаяСтруктура(ОбновлениеКонфигурации.ПолучитьНастройкиОбновления()));
	// Конец ОбновлениеКонфигурации
	
	// ПроверкаЛегальностиПолученияОбновлений
	Параметры.Вставить("ЭтоГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	// Конец ПроверкаЛегальностиПолученияОбновлений
	
	// ПолучениеФайловИзИнтернета
	Параметры.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.ПолучитьНастройкуПроксиСервера());
	// Конец ПолучениеФайловИзИнтернета
	
	// РаботаСФайлами
	Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами", 
		Новый ФиксированнаяСтруктура(РаботаСФайлами.ПолучитьПерсональныеНастройкиРаботыСФайламиСервер()));
	// Конец РаботаСФайлами
	
	// ЭЦП
	Параметры.Вставить("ПерсональныеНастройкиРаботыСЭЦП",  
		Новый ФиксированнаяСтруктура(ЭлектронноЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер()));
	// Конец ЭЦП
	
	// РегламентныеЗадания
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Параметры.Вставить("ПараметрыОткрытияСеансаОбработкиРегламентныхЗаданий", 
			Новый ФиксированнаяСтруктура(РегламентныеЗаданияСервер.ПараметрыОткрытияСеансаОбработкиРегламентныхЗаданий(Истина)));
	КонецЕсли;
	// Конец РегламентныеЗадания
	
	// Для установки параметров инициализации системы можно использовать шаблон:
	//
	// Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
	//
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции
