
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

// Вызывается из обработчика ПриСозданииНаСервере формы объекта со свойствами
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = Неопределено) Экспорт
	
	ИспользоватьДопРеквизиты = ИспользоватьДопРеквизиты(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(Объект.Ссылка);
	Иначе
		ИмяТипа = ОбщегоНазначения.ВидОбъектаПоСсылке(Объект.Ссылка) + "Объект." + Объект.Ссылка.Метаданные().Имя;
		ОбъектЗначение = ДанныеФормыВЗначение(Объект, Тип(ИмяТипа));
		НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(ОбъектЗначение);
	КонецЕсли;
	
	// Создадим основные объекты на форме
	СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, НаборСвойствОбъекта, ИспользоватьДопРеквизиты);
	
	// Если функциональной опцией использование доп.реквизитов отключено, то больше ничего не делаем
	Если Не Форма.__Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	Форма.__Свойства_ОсновнойНабор = НаборСвойствОбъекта;
	
	Если ИспользоватьДопРеквизиты Тогда
		// Создадим остальные реквизиты и разместим их на форме
		ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.__Свойства_ИспользоватьСвойства И Форма.__Свойства_ИспользоватьДопРеквизиты Тогда
		// Перенесем значения доп.реквизитов из реквизитов форм в объект
		ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Обновить отображаемые данные на форме объекта со свойствами
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект) Экспорт
	
	Если НЕ Форма.__Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.__Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(Объект);
	Форма.__Свойства_ОсновнойНабор = НаборСвойствОбъекта;
	
	// Перенесем значения доп.реквизитов из реквизитов форм в объект
	ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, Объект);
	
	// Создадим реквизиты и разместим их на форме
	ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта)
	
КонецПроцедуры

// Используется при записи элементов справочников, которые являются видами объектов со свойствами
// Если есть справочник Сущности к которому применяется подсистема Свойства, для него создан 
// справочник ВидыСущностей, то при записи элемента ВидыСущностей необходимо вызывать эту процедуру
//
// Параметры:
//	ВидОбъекта - объект, запись которого выполняется
//	ИмяОбъектаСоСвойствами - имя объекта со свойствами вид которого записывается
//
Процедура ПередЗаписьюВидаОбъекта(ВидОбъекта, ИмяОбъектаСоСвойствами) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОбъекта.НаборСвойств) Тогда
		ОбъектНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
	Иначе
		Если Не НаборСвойствНужноИзменить(ВидОбъекта) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектНабора = ВидОбъекта.НаборСвойств.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ОбъектНабора.Ссылка);
	КонецЕсли;
	
	ОбъектНабора.Наименование    = ВидОбъекта.Наименование;
	ОбъектНабора.Родитель        = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяОбъектаСоСвойствами];
	ОбъектНабора.ПометкаУдаления = ВидОбъекта.ПометкаУдаления;
	ОбъектНабора.Записать();
	ВидОбъекта.НаборСвойств = ОбъектНабора.Ссылка;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ФУНКЦИИ ДЛЯ ПОЛУЧЕНИЯ И РЕДАКТИРОВАНИЯ НАБОРОВ СВОЙСТВ

// По владельцу свойства (ссылке) получает его свойства и их значения
// Параметры:
// ВладелецСвойств - ссылка - ссылка на объект информационной базы - владелец свойств
// ПолучатьДопРеквизиты - булево - в результат включать доп. реквизиты
// ПолучатьДопСведения - булево - в результат включать доп. сведения
//
Функция ПолучитьСписокСвойств(ВладелецСвойств, ПолучатьДопРеквизиты = Истина, ПолучатьДопСведения = Истина) Экспорт
	
	Если НЕ (ПолучатьДопРеквизиты ИЛИ ПолучатьДопСведения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	НаборСвойств = ПолучитьДоступныеНаборыСвойств(ВладелецСвойств);
	
	Если ТипЗнч(НаборСвойств) = Тип("СписокЗначений") Тогда
		МассивСвойств = НаборСвойств.ВыгрузитьЗначения();
	Иначе // элемент справочника
		МассивСвойств = Новый Массив;
		МассивСвойств.Добавить(НаборСвойств);
	КонецЕсли;
	
	ТекстЗапросаДопРеквизиты = 
		"ВЫБРАТЬ
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Ссылка В (&МассивСвойств)";
	
	ТекстЗапросаДопСведения = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Ссылка В (&МассивСвойств)";
	
	Запрос = Новый Запрос;
	
	Если ПолучатьДопРеквизиты И ПолучатьДопСведения Тогда
		Запрос.Текст = ТекстЗапросаДопСведения
						+ "
						| ОБЪЕДИНИТЬ ВСЕ
						|"
						+ ТекстЗапросаДопРеквизиты;
		
	ИначеЕсли ПолучатьДопРеквизиты Тогда
		Запрос.Текст = ТекстЗапросаДопРеквизиты;
	ИначеЕсли ПолучатьДопСведения Тогда
		Запрос.Текст = ТекстЗапросаДопСведения;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("МассивСвойств", МассивСвойств);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения дополнительных свойств объекта
// Параметры:
// ВладелецСвойств - ссылка - ссылка на объект информационной базы - владелец свойств
// ПолучатьДопРеквизиты - булево - получать значения доп. реквизитов
// ПолучатьДопСведения - булево - получать значения доп. сведений
// МассивСвойств - Массив - массив свойств, значения которых следует получить, если не передано,
//							заполняется по набору собственных свойств объекта
// Возвращаемое значение - таблица значений - колонки "Свойство" и "Значение"
//
Функция ПолучитьЗначенияСвойств(ВладелецСвойств, ПолучатьДопРеквизиты = Истина, ПолучатьДопСведения = Истина,МассивСвойств = Неопределено) Экспорт
	
	Если МассивСвойств = Неопределено Тогда
		МассивСвойств = ПолучитьСписокСвойств(ВладелецСвойств, ПолучатьДопРеквизиты, ПолучатьДопСведения);
	КонецЕсли;
	
	ИмяОбъектаСоСвойствами = ОбщегоНазначения.ИмяТаблицыПоСсылке(ВладелецСвойств);
	
	ТекстЗапросаДопРеквизиты =
	"ВЫБРАТЬ [РАЗРЕШЕННЫЕ]
	|	ТаблицаСвойств.Свойство КАК Свойство,
	|	ТаблицаСвойств.Значение КАК Значение
	|ИЗ
	|	[ИмяОбъектаСоСвойствами].ДополнительныеРеквизиты КАК ТаблицаСвойств
	|ГДЕ
	|	ТаблицаСвойств.Ссылка = &ВладелецСвойств
	|	И ТаблицаСвойств.Свойство В (&МассивСвойств)";
	
	ТекстЗапросаДопСведения =
	"ВЫБРАТЬ [РАЗРЕШЕННЫЕ]
	|	ТаблицаСвойств.Свойство КАК Свойство,
	|	ТаблицаСвойств.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ТаблицаСвойств
	|ГДЕ
	|	ТаблицаСвойств.Объект = &ВладелецСвойств
	|	И ТаблицаСвойств.Свойство В (&МассивСвойств)";
	
	Запрос = Новый Запрос;
	
	Если ПолучатьДопРеквизиты И ПолучатьДопСведения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДопРеквизиты, "[РАЗРЕШЕННЫЕ]", "РАЗРЕШЕННЫЕ")
						+ "
						| ОБЪЕДИНИТЬ ВСЕ
						|"
						+ СтрЗаменить(ТекстЗапросаДопСведения, "[РАЗРЕШЕННЫЕ]", "");
		
	ИначеЕсли ПолучатьДопРеквизиты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДопРеквизиты, "[РАЗРЕШЕННЫЕ]", "РАЗРЕШЕННЫЕ");
	ИначеЕсли ПолучатьДопСведения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДопСведения, "[РАЗРЕШЕННЫЕ]", "РАЗРЕШЕННЫЕ");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяОбъектаСоСвойствами]", ИмяОбъектаСоСвойствами);
	
	Запрос.Параметры.Вставить("ВладелецСвойств", ВладелецСвойств);
	Запрос.Параметры.Вставить("МассивСвойств", МассивСвойств);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Проверяет, есть ли у объекта свойство
// Параметры:
// ВладелецСвойств - ссылка - ссылка на объект информационной базы - владелец свойств
// Свойство - ПВХ.ДополнительныеРеквизитыИСведения - 
//
Функция ПроверитьСвойствоУОбъекта(ВладелецСвойств, Свойство) Экспорт
	
	МассивСвойств = ПолучитьСписокСвойств(ВладелецСвойств);
	
	Если МассивСвойств.Найти(Свойство) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает массив ссылок на элементы справочника ЗначенияСвойствОбъектов,
// у которых владелец - переданное свойство
// Параметр:
// Свойство - ПВХ ДополнительныеРеквизитыИСведения - владелец свойств
//
Функция ПолучитьСписокЗначенийСвойств(Свойство) Экспорт
	
	ТексЗапроса =
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Свойство";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТексЗапроса;
	Запрос.Параметры.Вставить("Свойство", Свойство);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Записывает дополнительные реквизиты и сведения владельцу свойств
// Изменения происходят в транзакции.
// Параметры
// ВладелецСвойств - ссылка/объект - ссылка на владельца свойств
// ТаблицаСвойствИЗначений - таблицаЗначений - с колонками
//							Свойство - ПВХ.ДополнительныеРеквизитыИСведения
//							Значение - любое значение, допустимое в рамках свойства
//
Процедура ЗаписатьСвойстваУОбъекта(ВладелецСвойств, ТаблицаСвойствИЗначений) Экспорт
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
	
	ТаблицаДопСведений = ТаблицаДопРеквизитов.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицыСвойств Из ТаблицаСвойствИЗначений Цикл
		Если СтрокаТаблицыСвойств.Свойство.ЭтоДополнительноеСведение Тогда
			НоваяСтрока = ТаблицаДопСведений.Добавить();
		Иначе
			НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыСвойств, "Свойство,Значение");
	КонецЦикла;
	
	ЕстьДопРеквизиты = ТаблицаДопРеквизитов.Количество() > 0;
	ЕстьДопСведения  = ТаблицаДопСведений.Количество() > 0;
	
	МассивСвойств = ПолучитьСписокСвойств(ВладелецСвойств);
	
	МассивДопРеквизитов = Новый Массив;
	МассивДопСведений = Новый Массив;
	
	Для Каждого ДопСвойство Из МассивСвойств Цикл
		Если ДопСвойство.ЭтоДополнительноеСведение Тогда
			МассивДопСведений.Добавить(ДопСвойство);
		Иначе
			МассивДопРеквизитов.Добавить(ДопСвойство);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если ЕстьДопРеквизиты Тогда
		ВладелецСвойствОбъект = ВладелецСвойств.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ВладелецСвойствОбъект.Ссылка);
		Для Каждого ДопРеквизит Из ТаблицаДопРеквизитов Цикл
			Если МассивДопРеквизитов.Найти(ДопРеквизит.Свойство) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрок = ВладелецСвойствОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизит.Свойство));
			Если МассивСтрок.Количество() Тогда
				СтрокаСвойства = МассивСтрок[0];
			Иначе
				СтрокаСвойства = ВладелецСвойствОбъект.ДополнительныеРеквизиты.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаСвойства, ДопРеквизит, "Свойство,Значение");
		КонецЦикла;
		ВладелецСвойствОбъект.Записать();
	КонецЕсли;
	
	Если ЕстьДопСведения Тогда
		Для Каждого ДопСведение Из ТаблицаДопСведений Цикл
			Если МассивДопСведений.Найти(ДопСведение.Свойство) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Объект = ВладелецСвойств;
			МенеджерЗаписи.Свойство = ДопСведение.Свойство;
			МенеджерЗаписи.Значение = ДопСведение.Значение;
			
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Проверяет, используется ли дополнительные реквизиты с объектом
//
Функция ИспользоватьДопРеквизиты(ВладелецСвойств) Экспорт
	
	Возврат ВладелецСвойств.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено;
	
КонецФункции

// Проверяет, используется ли дополнительные сведения объектом
//
Функция ИспользоватьДопСведения(ВладелецСвойств) Экспорт
	
	Возврат Метаданные.НайтиПоПолномуИмени("ОбщаяКоманда.ДополнительныеСведения") <> Неопределено И
			Метаданные.ОбщиеКоманды.ДополнительныеСведения.ТипПараметраКоманды.Типы().Найти(ТипЗнч(ВладелецСвойств)) <> Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ЭКСПОРТНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

// По объекту или ссылке на объект получить набор или список наборов доступных ему свойств
// Параметры:
//	ВладелецСвойств - ссылка на объект или сам объект
Функция ПолучитьДоступныеНаборыСвойств(ВладелецСвойств) Экспорт
	
	ДоступныеНаборы = УправлениеСвойствамиПереопределяемый.ПолучитьДоступныеНаборыСвойствПоОбъекту(ВладелецСвойств);
	
	Если ДоступныеНаборы = Неопределено Тогда
		Возврат ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств);
	Иначе
		Возврат ДоступныеНаборы;
	КонецЕсли;
		
КонецФункции

// Получить заполненную таблицу значений свойств объекта
//
Функция ПолучитьТаблицуЗначенийСвойств(ДополнительныеСвойстваОбъекта, Набор, ЭтоДополнительноеСведение) Экспорт
	
	масСвойств = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
	|	МИНИМУМ(НаборыСвойствДополнительныеРеквизиты.НомерСтроки) КАК Порядок
	|ПОМЕСТИТЬ ВсеСвойстваНабора
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|ГДЕ
	|	НаборыСвойствДополнительныеРеквизиты.Ссылка В(&Набор)
	|	И (НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления)
	|	И (НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|	И (НЕ &ЭтоДополнительноеСведение)
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыСвойствДополнительныеРеквизиты.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыСвойствДополнительныеСведения.Свойство,
	|	МИНИМУМ(НаборыСвойствДополнительныеСведения.НомерСтроки)
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
	|ГДЕ
	|	НаборыСвойствДополнительныеСведения.Ссылка В(&Набор)
	|	И (НЕ НаборыСвойствДополнительныеСведения.Ссылка.ПометкаУдаления)
	|	И (НЕ НаборыСвойствДополнительныеСведения.Ссылка.ЭтоГруппа)
	|	И &ЭтоДополнительноеСведение
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыСвойствДополнительныеСведения.Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка В(&масСвойств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойстваНабора.Свойство,
	|	ВсеСвойстваНабора.Порядок,
	|	ЛОЖЬ КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	ВсеСвойстваНабора КАК ВсеСвойстваНабора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеСвойстваНабора КАК ВсеСвойстваНабора
	|		ПО ЗаполненныеСвойства.Свойство = ВсеСвойстваНабора.Свойство
	|ГДЕ
	|	ВсеСвойстваНабора.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.Порядок";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	Запрос.УстановитьПараметр("масСвойств", масСвойств);
	Запрос.УстановитьПараметр("Набор", Набор);
	
	ТабСвойства = Запрос.Выполнить().Выгрузить();
	ТабСвойства.Индексы.Добавить("Свойство");
	ТабСвойства.Колонки.Добавить("Значение");
	
	Для Каждого Стр Из ДополнительныеСвойстваОбъекта Цикл
		СтрСвойства = ТабСвойства.Найти(Стр.Свойство, "Свойство");
		Если СтрСвойства <> Неопределено Тогда
			///////////////////////////////////////////////////////////////
			// поддержка строк неограниченной длины
			Если НЕ ЭтоДополнительноеСведение
			   И ИспользоватьНеограниченнуюСтроку(СтрСвойства.ТипЗначения, СтрСвойства.МногострочноеПолеВвода)
			   И НЕ ПустаяСтрока(Стр.ТекстоваяСтрока) Тогда 
				СтрСвойства.Значение = Стр.ТекстоваяСтрока;
			//
			///////////////////////////////////////////////////////////////
			Иначе
				СтрСвойства.Значение = Стр.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабСвойства;
	
КонецФункции

// Считывает и возвращает значения доп. сведений
//
Функция ПрочитатьЗначенияСвойствИзРегистраСведений(ВладелецСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ВладелецСвойства);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет, используется ли с объектом информационной базы дополнительные реквизиты
// или дополнительные сведения.
//
// Параметры:
//  Ссылка - ссылка на объект информационной базы
//  ИспользоватьДопРеквизиты - устанавливается Истина или Ложь
//  ИспользоватьДопСведения - устанавливается Истина или Ложь
//
// Примечание: может вызывать исключение.
//
Процедура ПолучитьИспользованиеДополнительныхСвойств(знач Ссылка, ИспользоватьДопРеквизиты, ИспользоватьДопСведения) Экспорт
	
	Перем ПерваяЧастьИмени, ВтораяЧастьИмени;
	
	Если Ссылка = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		ИспользоватьДопРеквизиты = Ложь;
		ИспользоватьДопСведения = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Предопределенный И Ссылка.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		СсылкаПредопределенного = Ссылка;
	Иначе
		СсылкаПредопределенного = Ссылка.Родитель;
	КонецЕсли;
	
	Если СсылкаПредопределенного = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		ВызватьИсключение НСтр("ru = 'Не найден владелец свойств!'");
	КонецЕсли;
	
	Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьЧастиИмени(СсылкаПредопределенного, ПерваяЧастьИмени, ВтораяЧастьИмени);
	ИспользоватьДопРеквизиты = Справочники.НаборыДополнительныхРеквизитовИСведений.ИспользуютсяДопРеквизиты(ПерваяЧастьИмени, ВтораяЧастьИмени);
	ИспользоватьДопСведения = Справочники.НаборыДополнительныхРеквизитовИСведений.ИспользуютсяДопСведения(ПерваяЧастьИмени, ВтораяЧастьИмени);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

// По объекту или по ссылке на объект и по имени реквизита, содержащего вид объекта
// получает основной набор свойств.
// Для ссылки на справочник "Сущности" функция вернет
// предопределенный элемент справочника НаборыДополнительныхРеквизитовИСведений "Справочник_Сущности".
// Если передан параметр ВидОбъектаИмяРеквизита, функция вернет ссылку на 
// набор свойств, содержащийся в Ссылка.<ВидОбъектаИмяРеквизита>
//
Функция ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств)
	
	МетаданныеОбъекта = ВладелецСвойств.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	ПереданОбъект = Ложь;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ВладелецСвойств) Тогда
		Ссылка = ВладелецСвойств;
	Иначе
		ПереданОбъект = Истина;
		Ссылка = ВладелецСвойств.Ссылка;
	КонецЕсли;
	
	ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);
	ВидОбъектаИмяРеквизита = УправлениеСвойствамиПереопределяемый.ПолучитьИмяРеквизитаВидаОбъекта(Ссылка);
	Если ВидОбъектаИмяРеквизита = "" Тогда
		Если ВидОбъекта = "Справочник" или ВидОбъекта = "ПланВидовХарактеристик" Тогда
			Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(ВладелецСвойств) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		ИмяЭлемента = ВидОбъекта + "_" + ИмяОбъекта;
		Возврат Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
		
	Иначе
		Если ПереданОбъект = Истина Тогда
			Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВладелецСвойств[ВидОбъектаИмяРеквизита], "НаборСвойств");
			
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ОбъектВладелецСвойств." + ВидОбъектаИмяРеквизита + ".НаборСвойств КАК Набор
			|ИЗ
			|	" + ВидОбъекта + "." + ИмяОбъекта + " КАК ОбъектВладелецСвойств
			|ГДЕ
			|	ОбъектВладелецСвойств.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Если ЗначениеЗаполнено(Выборка.Набор) Тогда
					Возврат Выборка.Набор;
				Иначе
					Возврат Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Возврат Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

// Создать основные объекты (реквизиты, команды, элементы) на форме объекта со свойствами
Процедура СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, НаборСвойствОбъекта, ИспользоватьДопРеквизиты)
	
	масРеквизитов = Новый Массив;
	
	// Проверим значение функциональной опции "Использование свойств"
	ОпцияИспользоватьСвойства = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения");
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("__Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево"));
	масРеквизитов.Добавить(РеквизитИспользоватьСвойства);
	
	Если ОпцияИспользоватьСвойства Тогда
		
		РеквизитИспользоватьДопРеквизиты = Новый РеквизитФормы("__Свойства_ИспользоватьДопРеквизиты", Новый ОписаниеТипов("Булево"));
		масРеквизитов.Добавить(РеквизитИспользоватьДопРеквизиты);
		
		// Добавим реквизит "ОсновнойНабор"
		ИмяТипа = ?(ТипЗнч(НаборСвойствОбъекта) = Тип("СписокЗначений"), "СписокЗначений", "СправочникСсылка.НаборыДополнительныхРеквизитовИСведений");
		РеквизитОсновнойНабор = Новый РеквизитФормы("__Свойства_ОсновнойНабор", Новый ОписаниеТипов(ИмяТипа));
		масРеквизитов.Добавить(РеквизитОсновнойНабор);
			
		Если ИспользоватьДопРеквизиты Тогда
			// Добавим реквизит таблицу значений "ОписаниеДополнительныхРеквизитов" с колонками
			ИмяОписания = "__Свойства_ОписаниеДополнительныхРеквизитов";
			РеквизитОписание_0 = Новый РеквизитФормы(ИмяОписания,            Новый ОписаниеТипов("ТаблицаЗначений"));
			РеквизитОписание_1 = Новый РеквизитФормы("ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания);
			РеквизитОписание_2 = Новый РеквизитФормы("ИмяРеквизитаСвойство", Новый ОписаниеТипов("Строка"), ИмяОписания);
			РеквизитОписание_3 = Новый РеквизитФормы("Свойство",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ИмяОписания);
			масРеквизитов.Добавить(РеквизитОписание_0);
			масРеквизитов.Добавить(РеквизитОписание_1);
			масРеквизитов.Добавить(РеквизитОписание_2);
			масРеквизитов.Добавить(РеквизитОписание_3);
			
			// Добавим реквизит с именем элемента в котором будут размещаться поля ввода
			РеквизитИмяЭлемента = Новый РеквизитФормы("__Свойства_ИмяЭлементаДляРазмещения", Новый ОписаниеТипов("Строка"));
			масРеквизитов.Добавить(РеквизитИмяЭлемента);
		КонецЕсли;
		
		// Команду формы добавляем только если установлена роль "ДобавлениеИзменениеБазовойНСИ" или
		// это полноправный пользователь
		Если РольДоступна(Метаданные.Роли.ДобавлениеИзменениеБазовойНСИ)
		 Или Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
			// Добавляем команду
			Команда = Форма.Команды.Добавить("РедактироватьСоставСвойств");
			Команда.Заголовок = НСтр("ru = 'Изменить состав доп. реквизитов и сведений'");
			Команда.Действие = "Подключаемый_РедактироватьСоставСвойств";
			Команда.Подсказка = НСтр("ru = 'Изменить состав дополнительных реквизитов и сведений'");
			Команда.Картинка = БиблиотекаКартинок.НастройкаСписка;
			
			Кнопка = Форма.Элементы.Добавить("РедактироватьСоставСвойств", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
			Кнопка.ТолькоВоВсехДействиях = Истина;
			Кнопка.ИмяКоманды = "РедактироватьСоставСвойств";
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(масРеквизитов);
	
	Форма.__Свойства_ИспользоватьСвойства = ОпцияИспользоватьСвойства;
	
	Если ОпцияИспользоватьСвойства Тогда
		Форма.__Свойства_ИспользоватьДопРеквизиты = ИспользоватьДопРеквизиты;
	КонецЕсли;
	
	Если ОпцияИспользоватьСвойства И ИспользоватьДопРеквизиты Тогда
		Форма.__Свойства_ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
// поддержка многострочного поля ввода
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода) Экспорт
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И МногострочноеПолеВвода > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
//
///////////////////////////////////////////////////////////////

// Создадим реквизиты с значениями свойств и разместить их на форме
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта)
	
	Если НаборСвойствОбъекта = Неопределено Тогда
		Набор = Форма.__Свойства_ОсновнойНабор;
	Иначе
		Набор = НаборСвойствОбъекта;
	КонецЕсли;
	
	Таблица = ПолучитьТаблицуЗначенийСвойств(Объект.ДополнительныеРеквизиты.Выгрузить(), Набор, Ложь);
	Таблица.Колонки.Добавить("ИмяРеквизитаЗначение");
	Таблица.Колонки.Добавить("ИмяРеквизитаСвойство");
	Таблица.Колонки.Добавить("Булево");
	
	УдалитьСтарыеРеквизиты(Форма);
	Форма.__Свойства_ОписаниеДополнительныхРеквизитов.Очистить();
	
	// Создадим реквизиты
	Номер = 0;
	ДобавляемыеРеквизиты = Новый Массив();
	Для Каждого СтрРеквизит Из Таблица Цикл
		
		Номер = Номер + 1;
		ТипЗначенияСвойства = СтрРеквизит.ТипЗначения;
		
		///////////////////////////////////////////////////////////////
		// поддержка строк неограниченной длины
		Если ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, СтрРеквизит.МногострочноеПолеВвода) Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		//
		///////////////////////////////////////////////////////////////
		
		СтрРеквизит.ИмяРеквизитаЗначение = "ДополнительныйРеквизитЗначение" + Формат(Номер, "ЧГ=0");
		
		Если СтрРеквизит.Удалено Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		Реквизит = Новый РеквизитФормы(СтрРеквизит.ИмяРеквизитаЗначение, ТипЗначенияСвойства, , СтрРеквизит.Наименование, Истина);
		
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		СтрРеквизит.ИмяРеквизитаСвойство = "";
		Если ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства) Тогда
			СтрРеквизит.ИмяРеквизитаСвойство = "ДополнительныйРеквизитСвойство" + Формат(Номер, "ЧГ=0");
			Реквизит = Новый РеквизитФормы(СтрРеквизит.ИмяРеквизитаСвойство, Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), , , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		СтрРеквизит.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));
		
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создадим элементы формы
	Для Каждого СтрРеквизит Из Таблица Цикл
		
		новСтр = Форма.__Свойства_ОписаниеДополнительныхРеквизитов.Добавить();
		новСтр.ИмяРеквизитаЗначение = СтрРеквизит.ИмяРеквизитаЗначение;
		новСтр.ИмяРеквизитаСвойство = СтрРеквизит.ИмяРеквизитаСвойство;
		новСтр.Свойство             = СтрРеквизит.Свойство;
		
		Форма[СтрРеквизит.ИмяРеквизитаЗначение] = СтрРеквизит.Значение;
		
		ИмяЭлементаДляРазмещения = Форма.__Свойства_ИмяЭлементаДляРазмещения;
		Родитель = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
		Элемент = Форма.Элементы.Добавить(СтрРеквизит.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Родитель);
		
		Если СтрРеквизит.Булево И ПустаяСтрока(СтрРеквизит.ФорматСвойства) Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		
		Элемент.ПутьКДанным = СтрРеквизит.ИмяРеквизитаЗначение;
		Элемент.Подсказка	= СтрРеквизит.Свойство.Подсказка;
		
		Если СтрРеквизит.Свойство.МногострочноеПолеВвода > 0 Тогда
			Элемент.МногострочныйРежим = Истина;
			Элемент.Высота= СтрРеквизит.Свойство.МногострочноеПолеВвода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрРеквизит.ФорматСвойства) Тогда
			Элемент.Формат				 = СтрРеквизит.ФорматСвойства;
			Элемент.ФорматРедактирования = СтрРеквизит.ФорматСвойства;
		КонецЕсли;
		
		Если СтрРеквизит.Удалено Тогда
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.УдаленныйДополнительныйРеквизитЦвет;
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элемент.КнопкаОчистки = Истина;
				Элемент.КнопкаВыбора = Ложь;
				Элемент.КнопкаОткрытия = Ложь;
				Элемент.КнопкаСпискаВыбора = Ложь;
				Элемент.РедактированиеТекста = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрРеквизит.ИмяРеквизитаСвойство <> "" Тогда
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", СтрРеквизит.ИмяРеквизитаСвойство);
			масСвязи = Новый Массив;
			масСвязи.Добавить(Связь);
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(масСвязи);
			Форма[СтрРеквизит.ИмяРеквизитаСвойство] = СтрРеквизит.Свойство;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Перенести значения свойств из реквизитов формы в табличную часть объекта
Процедура ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, Объект)
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	Для Каждого Стр Из Форма.__Свойства_ОписаниеДополнительныхРеквизитов Цикл
		Значение = Форма[Стр.ИмяРеквизитаЗначение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Если ТипЗнч(Значение) = Тип("Булево") И Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			новСтр = Объект.ДополнительныеРеквизиты.Добавить();
			новСтр.Свойство = Стр.Свойство;
			новСтр.Значение = Значение;
			
			///////////////////////////////////////////////////////////////
			// поддержка строк неограниченной длины
			Свойство = Стр.Свойство.ПолучитьОбъект();
			Если ИспользоватьНеограниченнуюСтроку(Свойство.ТипЗначения, Свойство.МногострочноеПолеВвода) Тогда
				новСтр.ТекстоваяСтрока = Значение;
			КонецЕсли;
			//
			///////////////////////////////////////////////////////////////
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удалить старые реквизиты и элементы формы
Процедура УдалитьСтарыеРеквизиты(Форма)
	
	// Удалим старые реквизиты и элементы
	масУдалять = Новый Массив;
	Для Каждого СтрРеквизит Из Форма.__Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		масУдалять.Добавить(СтрРеквизит.ИмяРеквизитаЗначение);
		Если Не ПустаяСтрока(СтрРеквизит.ИмяРеквизитаСвойство) Тогда
			масУдалять.Добавить(СтрРеквизит.ИмяРеквизитаСвойство);
		КонецЕсли;
		
		Форма.Элементы.Удалить(Форма.Элементы[СтрРеквизит.ИмяРеквизитаЗначение]);
		
	КонецЦикла;
	
	Если масУдалять.Количество() Тогда
		Форма.ИзменитьРеквизиты(, масУдалять);
	КонецЕсли;
	
КонецПроцедуры

// Проверить, что тип значения свойства содержит ссылку на справочник ЗначенияСвойствОбъектов
Функция ТипЗначенияСодержитЗначенияСвойств(ТипЗначения)
	
	Возврат ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено;
	
КонецФункции

// проверка того, что элемент набора свойств нужно изменить из-за изменений в виде объекта
Функция НаборСвойствНужноИзменить(ВидОбъекта)
	Результат = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВидОбъекта.НаборСвойств, "Наименование,ПометкаУдаления");
	Возврат (Результат.Наименование <> ВидОбъекта.Наименование) ИЛИ (Результат.ПометкаУдаления <> ВидОбъекта.ПометкаУдаления);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.7";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьСписокДополнительныхСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьПереименованныеРоли_БСП_1_0_7_1";
	
КонецПроцедуры

// Процедура обновления наборов дополнительных реквизитов и сведений в информационной базе.
// Используется для перехода к новому формату хранения.
//
Процедура ОбновитьСписокДополнительныхСвойств() Экспорт
	
	НаборыДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.Выбрать();
	
	Пока НаборыДополнительныхРеквизитовИСведений.Следующий() Цикл
		
		ДопСведения = Новый Массив;
		
		НаборСвойствОбъект = НаборыДополнительныхРеквизитовИСведений.Ссылка.ПолучитьОбъект();
		
		Для Каждого Запись Из НаборСвойствОбъект.ДополнительныеРеквизиты Цикл
			Если Запись.Свойство.ЭтоДополнительноеСведение Тогда
				ДопСведения.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ДопСведения.Количество() > 0 Тогда
			
			Для Каждого ДопСведение Из ДопСведения Цикл
				НоваяСтрока = НаборСвойствОбъект.ДополнительныеСведения.Добавить();
				НоваяСтрока.Свойство = ДопСведение.Свойство;
				НаборСвойствОбъект.ДополнительныеРеквизиты.Удалить(
					НаборСвойствОбъект.ДополнительныеРеквизиты.Индекс(ДопСведение));
				
			КонецЦикла;
			НаборСвойствОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет имена ролей в профилях групп доступа
//
Процедура ОбновитьПереименованныеРоли_БСП_1_0_7_1() Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.УправлениеДоступом") <> Неопределено Тогда
		
		УправлениеДоступомМодуль = Вычислить("УправлениеДоступом");
	
		ПереименованныеРоли = Новый ТаблицаЗначений;
		ПереименованныеРоли.Колонки.Добавить("СтароеИмяРоли");
		ПереименованныеРоли.Колонки.Добавить("НовоеИмяРоли");
		
		ПереименованнаяРоль = ПереименованныеРоли.Добавить();
		ПереименованнаяРоль.СтароеИмяРоли = "ДобавлениеИзменениеДополнительныхСведений";
		ПереименованнаяРоль.НовоеИмяРоли  = "ИзменениеДополнительныхСведений";
		
		УправлениеДоступомМодуль.ОбновитьПереименованныеРоли(ПереименованныеРоли);
		
	КонецЕсли;
	
КонецПроцедуры
