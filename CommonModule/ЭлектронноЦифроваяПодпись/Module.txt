////////////////////////////////////////////////////////////////////////////////
//  ОСНОВНЫЕ МЕТОДЫ

// Заносит информацию о одной ЭЦП
//
// Параметры
//  Данные  - Структура - информация для занесения в табличную часть
//                ЭлектронноЦифровыеПодписи
Процедура ЗанестиИнформациюОднойПодписи(Данные) Экспорт
	
	ОбъектСсылка = Данные.ОбъектСсылка;
		
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		СсылкаРедактирует = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Редактирует");			
		Если НЕ СсылкаРедактирует.Пустая() Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать занятый файл: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;	
		
		СсылкаЗашифрован = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Зашифрован");			
		Если СсылкаЗашифрован Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать зашифрованный файл: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗанестиИнформациюОПодписи(Данные.ОбъектСсылка, Данные.НоваяПодписьДвоичныеДанные, 
		Данные.Отпечаток, Данные.ДатаПодписи, Данные.Комментарий, 
		Данные.ИмяФайлаПодписи, Данные.КомуВыданСертификат, 
		Данные.ВерсияАлгоритмаГенерацииФайла);
		
КонецПроцедуры	

// удаляет записи из регистра ЭЦП
//
// Параметры
//  МассивВыделенныеСтроки  - Массив структур - массив структур - данные для поиска объекта и строки в его табличной части
//  РеквизитПодписанИзменен - Булево - возвращаемое значение - если удалена последняя подпись, 
//     РеквизитПодписанИзменен примет значение Истина
Процедура УдалитьПодписи(МассивВыделенныеСтроки, РеквизитПодписанИзменен) Экспорт
	
	РеквизитПодписанИзменен = Ложь;

	Для Каждого ДанныеПодписи Из МассивВыделенныеСтроки Цикл
		УдалитьПодпись(ДанныеПодписи, РеквизитПодписанИзменен);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ

// Заносит информацию о подписи
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (непусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  ВерсияАлгоритмаГенерацииФайла  - Число - версия алгоритма генерации файла для подписи
Процедура ЗанестиИнформациюОПодписи(ОбъектСсылка, НоваяПодписьДвоичныеДанные, 
	Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, 
	КомуВыданСертификат, ВерсияАлгоритмаГенерацииФайла) Экспорт
	
	ОбъектСсылкаДляЗаписи = ОбъектСсылка;
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ОбъектСсылкаДляЗаписи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ТекущаяВерсия");
		
		СсылкаРедактирует = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Редактирует");
		Если НЕ СсылкаРедактирует.Пустая() Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя подписать занятый файл'");
		КонецЕсли;	
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ОбъектВерсия = ОбъектСсылкаДляЗаписи.ПолучитьОбъект();
		ОбъектВерсия.Заблокировать();
		
		НоваяЗапись = ОбъектВерсия.ЭлектронноЦифровыеПодписи.Добавить();
		
		НоваяЗапись.КомуВыданСертификат = КомуВыданСертификат;
		НоваяЗапись.ВерсияАлгоритмаГенерацииФайла = ВерсияАлгоритмаГенерацииФайла;
		НоваяЗапись.ДатаПодписи = ДатаПодписи;
		НоваяЗапись.ИмяФайлаПодписи = ИмяФайлаПодписи;
		НоваяЗапись.Комментарий = Комментарий;
		НоваяЗапись.Отпечаток = Отпечаток;
		НоваяЗапись.Подпись = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные);
		НоваяЗапись.УстановившийПодпись = ОбщегоНазначения.ТекущийПользователь();
		
		ОбъектВерсия.Подписан = Истина;
		ОбъектВерсия.ЗаписьПодписанногоОбъекта = Истина; // чтобы прошла запись ранее подписанной версии
		
		УстановитьПривилегированныйРежим(Истина);
		ОбъектВерсия.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(ОбъектСсылкаДляЗаписи) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			ФайлСсылка = ОбъектСсылка;
			
			ФайлСсылкаПодписан = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФайлСсылка, "Подписан");			
			Если ФайлСсылкаПодписан = Ложь Тогда
				ОбъектФайл = ФайлСсылка.ПолучитьОбъект(); 
				ОбъектФайл.Заблокировать();
				ОбъектФайл.Подписан = Истина;
				
				ОбъектФайл.Записать();
			КонецЕсли;
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Заносит информацию о массиве ЭЦП
//
// Параметры
//  МассивДанныхДляЗанесенияВРегистр  - Массив Структур - информация для занесения в табличную часть
//                ЭлектронноЦифровыеПодписи
//  МассивАдресов - массив строк - с навигационными ссылками файла во временном хранилище
Процедура ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов) Экспорт
	
	Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
		ОбъектСсылка = Данные.ОбъектСсылка;
			
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			СсылкаРедактирует = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Редактирует");			
			Если НЕ СсылкаРедактирует.Пустая() Тогда
				СтрокаИсключения = НСтр("ru = 'Нельзя подписать занятый файл: ""'") + Строка(ОбъектСсылка) + """";
				ВызватьИсключение СтрокаИсключения;
			КонецЕсли;	
			
			СсылкаЗашифрован = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Зашифрован");			
			Если СсылкаЗашифрован Тогда
				СтрокаИсключения = НСтр("ru = 'Нельзя подписать зашифрованный файл: ""'") + Строка(ОбъектСсылка) + """";
				ВызватьИсключение СтрокаИсключения;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
		ЗанестиИнформациюОПодписи(Данные.ОбъектСсылка, Данные.НоваяПодписьДвоичныеДанные, 
			Данные.Отпечаток, Данные.ДатаПодписи, Данные.Комментарий, 
			Данные.ИмяФайлаПодписи, Данные.КомуВыданСертификат, 
			Данные.ВерсияАлгоритмаГенерацииФайла);
	КонецЦикла;	
		
	Для Каждого АдресФайла Из МассивАдресов Цикл
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры	

// Возвращает количество подписей у данного объекта
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//
// Возвращаемое значение:
//   Число  - количество подписей
Функция КоличествоПодписей(ОбъектСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
				   |ИЗ
				   |	";
				   
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектСсылка); 
	Запрос.Текст = Запрос.Текст + ".ЭлектронноЦифровыеПодписи КАК ЭлектронноЦифровыеПодписи
				   |ГДЕ
				   |	ЭлектронноЦифровыеПодписи.Ссылка = &ОбъектСсылка";
				   
	Запрос.Параметры.Вставить("ОбъектСсылка", ОбъектСсылка);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	ЧислоЗаписей = 0;
	Если ВыборкаЗапроса.Следующий() Тогда
		ЧислоЗаписей = ВыборкаЗапроса.ЧислоЗаписей;
	КонецЕсли;
	
	Возврат ЧислоЗаписей;
	
КонецФункции	

// удаляет одну запись из регистра ЭЦП
//
// Параметры
//  ДанныеПодписи  - Структура - данные для поиска объекта и строки в его табличной части
//  РеквизитПодписанИзменен - Булево - возвращаемое значение - если удалена последняя подпись, 
//     РеквизитПодписанИзменен примет значение Истина
Процедура УдалитьПодпись(ДанныеПодписи, РеквизитПодписанИзменен) Экспорт
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда 
		Если ДанныеПодписи.УстановившийПодпись <> ОбщегоНазначения.ТекущийПользователь() Тогда
			ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'");
		КонецЕсли; 		
	КонецЕсли; 
	
	НомерСтроки = ДанныеПодписи.НомерСтроки;
	ОбъектСсылка = ДанныеПодписи.Объект;
	
	НачатьТранзакцию();
	Попытка
		ОбъектВерсия = ОбъектСсылка.ПолучитьОбъект();
		ОбъектВерсия.Заблокировать();
		
		КоличествоПодписейДоУдаления = КоличествоПодписей(ОбъектСсылка);
		
		СтрокаТабличнойЧасти = ОбъектВерсия.ЭлектронноЦифровыеПодписи.Найти(НомерСтроки, "НомерСтроки");
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ОбъектВерсия.ЭлектронноЦифровыеПодписи.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
	
		Если КоличествоПодписейДоУдаления > 1 Тогда
			ОбъектВерсия.Подписан = Истина;
		Иначе
			ОбъектВерсия.Подписан = Ложь;
		КонецЕсли;
		
		ОбъектВерсия.ЗаписьПодписанногоОбъекта = Истина; // чтобы прошла запись ранее подписанной версии
		
		УстановитьПривилегированныйРежим(Истина);
		ОбъектВерсия.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если КоличествоПодписейДоУдаления <= 1 Тогда
			РеквизитПодписанИзменен = Истина;
			
			Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
				ФайлСсылка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Владелец");
				ФайлСсылкаПодписан = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФайлСсылка, "Подписан");			
				
				Если ФайлСсылкаПодписан = Истина Тогда
					ОбъектФайл = ФайлСсылка.ПолучитьОбъект(); 
					ОбъектФайл.Заблокировать();
					ОбъектФайл.Подписан = Ложь;
					ОбъектФайл.Записать();
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает все подписи объекта
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
Процедура ПолучитьВсеПодписи(ОбъектСсылка, УникальныйИдентификатор, МассивВозврата) Экспорт
	
	ОбъектСсылкаВЗапрос = ОбъектСсылка;
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ОбъектСсылкаВЗапрос = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ТекущаяВерсия");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронноЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	               |	ЭлектронноЦифровыеПодписи.Подпись КАК Подпись,
	               |	ЭлектронноЦифровыеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи
	               |ИЗ
	               |	Справочник.ВерсииФайлов.ЭлектронноЦифровыеПодписи КАК ЭлектронноЦифровыеПодписи
	               |ГДЕ
	               |	ЭлектронноЦифровыеПодписи.Ссылка = &ОбъектСсылка";
				   
	Запрос.Параметры.Вставить("ОбъектСсылка", ОбъектСсылкаВЗапрос);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи", 
			АдресПодписи, ВыборкаЗапроса.КомуВыданСертификат, ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
КонецПроцедуры	

// добавляет ЭЦП из сообщения почты
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//  МассивФайловПодписей  - Массив Структур - информация для занесения в табличную часть
//                ЭлектронноЦифровыеПодписи
Процедура ДобавитьЭЦПИзСообщения(ОбъектСсылка, МассивФайловПодписей) Экспорт
	
	ДатаПодписи = ТекущаяДата();
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивФайловПодписей Цикл
		
		НоваяПодписьДвоичныеДанные = ОбъектДляПодписи.ДвоичныеДанные;
		ИмяФайлаПодписи = ОбъектДляПодписи.Имя;
		
		ОбъектСсылкаДляПодписи = ОбъектСсылка;
		
		Отпечаток = ОбъектДляПодписи.Отпечаток;
		КомуВыданСертификат = ОбъектДляПодписи.КомуВыданСертификат;
		
		ДанныеДляЗанесенияВРегистр = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ВерсияАлгоритмаГенерацииФайла",
			ОбъектСсылкаДляПодписи, 
			НоваяПодписьДвоичныеДанные, 
			Отпечаток, 
			ДатаПодписи, 
			"", // Комментарий, 
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			0 //ВерсияАлгоритмаГенерацииФайла
			);
		
		МассивДанныхДляЗанесенияВРегистр.Добавить(ДанныеДляЗанесенияВРегистр);
			
	КонецЦикла;
	
	МассивАдресов = Новый Массив;
	ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов);
	
КонецПроцедуры	

// Возвращает структуру, содержащую различные персональные настройки по работе с ЭЦП
// Возвращаемое значение:
//   Структура  - структура с настройками
Функция ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер() Экспорт
	Настройки = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	Настройки.Вставить("ПровайдерЭЦП", ПровайдерЭЦП);
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	Настройки.Вставить("ТипПровайдераЭЦП", ТипПровайдераЭЦП);
	ВыполнятьПроверкуЭЦПНаСервере = Константы.ВыполнятьПроверкуЭЦПНаСервере.Получить();
	Настройки.Вставить("ВыполнятьПроверкуЭЦПНаСервере", ВыполнятьПроверкуЭЦПНаСервере);
	
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	Настройки.Вставить("АлгоритмПодписи", АлгоритмПодписи);
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	Настройки.Вставить("АлгоритмХеширования", АлгоритмХеширования);
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	Настройки.Вставить("АлгоритмШифрования", АлгоритмШифрования);
	
	ПутьМодуляКриптографии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "ПутьМодуляКриптографии");
	Если ПутьМодуляКриптографии = Неопределено Тогда
		ПутьМодуляКриптографии = "";
	КонецЕсли;
	Настройки.Вставить("ПутьМодуляКриптографии", ПутьМодуляКриптографии);
	
	ДействияПриСохраненииСЭЦП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "ДействияПриСохраненииСЭЦП");
	Если ДействияПриСохраненииСЭЦП = Неопределено Тогда
		ДействияПриСохраненииСЭЦП = Перечисления.ДействияПриСохраненииСЭЦП.Спрашивать;
	КонецЕсли;
	
	СтрокаДействияПриСохраненииСЭЦП = "";
	Если ДействияПриСохраненииСЭЦП = Перечисления.ДействияПриСохраненииСЭЦП.Спрашивать Тогда
		СтрокаДействияПриСохраненииСЭЦП = "Спрашивать";
	ИначеЕсли ДействияПриСохраненииСЭЦП = Перечисления.ДействияПриСохраненииСЭЦП.СохранятьВсеПодписи Тогда
		СтрокаДействияПриСохраненииСЭЦП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Настройки.Вставить("ДействияПриСохраненииСЭЦП", СтрокаДействияПриСохраненииСЭЦП);
	
	Возврат Настройки; 
КонецФункции
