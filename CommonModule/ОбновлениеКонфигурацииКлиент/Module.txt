////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс подсистемы.

// Проверяет наличие обновления конфигурации в Интернете при запуске программы.
//
Процедура ПроверитьОбновлениеКонфигурации() Экспорт
	#Если НЕ ВебКлиент Тогда
	ДоступноеОбновлениеКонфигурации = Неопределено;
	СообщенияДляЖурналаРегистрации = Новый СписокЗначений;
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	НаличиеОбновления = НастройкиОбновления.ПроверитьПрошлыеОбновленияБазы;
	Если НЕ НаличиеОбновления И НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		НаличиеОбновления = НастройкиОбновления.КонфигурацияИзменена;
	КонецЕсли;
	НаименованиеСтраницыДоступногоОбновления	= "ДоступноеОбновление";
	НаименованиеСтраницыФайлОбновления			= "ФайлОбновления";
	ЕстьДоступноеОбновлениеВИнтернете			= Ложь;
	НастройкиОбновленияКонфигурации							= НастройкиОбновления.НастройкиОбновленияКонфигурации;
	
	Если НЕ НаличиеОбновления И НастройкиОбновленияКонфигурации <> Неопределено
		И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления И
		(НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 1 ИЛИ
		 НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 2) Тогда
		// подключение обработчика ожидания для проверки наличия обновления в интернете
		РасписаниеПроверкиНаличияОбновления			= Неопределено;
		Если НастройкиОбновленияКонфигурации <> Неопределено Тогда
			НастройкиОбновленияКонфигурации.Свойство("РасписаниеПроверкиНаличияОбновления", РасписаниеПроверкиНаличияОбновления);
			Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 1 И РасписаниеПроверкиНаличияОбновления <> Неопределено Тогда
				ПодключитьОтключитьПроверкуПоРасписанию(Истина);
			КонецЕсли;
		КонецЕсли;
		
		// если расписание не задано, то проверяем наличие обновления сейчас
		Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске = 2 Тогда
			ПроверитьНаличиеОбновленияЧерезИнтернет();
			ЕстьДоступноеОбновлениеВИнтернете = (ДоступноеОбновлениеКонфигурации <> Неопределено И
												ДоступноеОбновлениеКонфигурации.ИмяСтраницы = НаименованиеСтраницыДоступногоОбновления);
			Если НЕ НаличиеОбновления И ЕстьДоступноеОбновлениеВИнтернете Тогда
				НаличиеОбновления = ЕстьДоступноеОбновлениеВИнтернете;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НастройкиОбновления.КонфигурацияИзменена И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления Тогда
		Если НастройкиОбновленияКонфигурации = Неопределено Тогда
			НастройкиОбновленияКонфигурации = Новый Структура("КодПользователяСервераОбновлений,
				  |ПарольСервераОбновлений, 
				  |ЗапомнитьПарольСервераОбновлений,
				  |ПроверятьНаличиеОбновленияПриЗапуске,
				  |ИсточникОбновления,
				  |РежимОбновления,
				  |ДатаВремяОбновления,
				  |ВыслатьОтчетНаПочту,
				  |АдресЭлектроннойПочты,
				  |КодЗадачиПланировщика,
				  |ПовторныйЗапуск,
				  |ИмяФайлаОбновления,
				  |НуженФайлОбновления,
				  |СоздаватьРезервнуюКопию,
				  |ИмяКаталогаРезервнойКопииИБ",
				  "",
				  "",
				  Ложь,
				  Ложь,
				  2,
				  0,
				  ТекущаяДата(),
				  Ложь,
				  "",
				  0,
				  Ложь,
				  "",
				  Ложь,
				  0,
				  "");
		Иначе
			НастройкиОбновленияКонфигурации.ИсточникОбновления	= 2;  // локальный или сетевой каталог
			НастройкиОбновленияКонфигурации.НуженФайлОбновления	= Ложь;
		КонецЕсли;	
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		
		Если ДоступноеОбновлениеКонфигурации = Неопределено Тогда
			ДоступноеОбновлениеКонфигурации = Новый Структура;
		КонецЕсли;
		ДоступноеОбновлениеКонфигурации.Вставить("ИсточникОбновления"						, НастройкиОбновленияКонфигурации.ИсточникОбновления);
		ДоступноеОбновлениеКонфигурации.Вставить("НуженФайлОбновления"						, НастройкиОбновленияКонфигурации.НуженФайлОбновления);
		ДоступноеОбновлениеКонфигурации.Вставить("ФлагАвтоПереходаНаСтраницуСОбновлением"	, Истина);
		ДоступноеОбновлениеКонфигурации.Вставить("НадписьОповещения"						, "Обнаружено, что конфигурация отличается от основной конфигурации информационной базы!");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление конфигурации'"),
			"e1cib/app/Обработка.ОбновлениеКонфигурации",
			НСтр("ru = 'Конфигурация отличается от основной конфигурации информационной базы.'"), 
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;	
	
	Если ЕстьДоступноеОбновлениеВИнтернете И НастройкиОбновления.ЕстьДоступДляПроверкиОбновления Тогда
		Если НастройкиОбновленияКонфигурации = Неопределено Тогда
			НастройкиОбновленияКонфигурации = Новый Структура("КодПользователяСервераОбновлений,
			|ПарольСервераОбновлений, 
			|ЗапомнитьПарольСервераОбновлений,
			|ПроверятьНаличиеОбновленияПриЗапуске,
			|ИсточникОбновления,
			|РежимОбновления,
			|ДатаВремяОбновления,
			|ВыслатьОтчетНаПочту,
			|АдресЭлектроннойПочты,
			|КодЗадачиПланировщика,
			|ПовторныйЗапуск,
			|ИмяФайлаОбновления,
			|НуженФайлОбновления,
			|СоздаватьРезервнуюКопию,
			|ИмяКаталогаРезервнойКопииИБ",
			"",
			"",
			Ложь,
			Ложь,
			0,
			0,
			ТекущаяДата(),
			Ложь,
			"",
			0,
			Ложь,
			"",
			Ложь,
			0,
			"");
		Иначе
			НастройкиОбновленияКонфигурации.ИсточникОбновления	= 0;
		КонецЕсли;	
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
		
		Если ДоступноеОбновлениеКонфигурации = Неопределено Тогда
			ДоступноеОбновлениеКонфигурации = Новый Структура;
		КонецЕсли;
		ДоступноеОбновлениеКонфигурации.Вставить("ИсточникОбновления"						, НастройкиОбновленияКонфигурации.ИсточникОбновления);
		ДоступноеОбновлениеКонфигурации.Вставить("НуженФайлОбновления"						, НастройкиОбновленияКонфигурации.НуженФайлОбновления);
		ДоступноеОбновлениеКонфигурации.Вставить("ФлагАвтоПереходаНаСтраницуСОбновлением"	, Истина);
		ДоступноеОбновлениеКонфигурации.Вставить("НадписьОповещения"						, "Обнаружено доступное обновление в Интернете");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Доступно обновление конфигурации'"),
			"e1cib/app/Обработка.ОбновлениеКонфигурации",
			НСтр("ru = 'Версия: '")	+ ДоступноеОбновлениеКонфигурации.ПараметрыФайлаПроверкиОбновления.Version, 
			БиблиотекаКартинок.Информация32);
		Возврат;	
	КонецЕсли;
	
	Если НаличиеОбновления Тогда
		// надо завершить предыдущее обновление
		ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Форма");
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Получить адрес страницы на веб-сервере поставщика конфигурации, на которой находится
// информация о доступных обновлениях.
//
// Возвращаемое значение:
//   Строка   – адрес веб-страницы.
//
Функция АдресРесурсовДляПроверкиНаличияОбновления() Экспорт
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	КороткоеИмяКонфигурации = НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "\", "/");	
	Результат = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НастройкиОбновления.АдресРесурсаДляПроверкиНаличияОбновления) +
		КороткоеИмяКонфигурации + "/";	
	Возврат Результат;
КонецФункции

// Получить адрес веб-страницы с информацией о том, как получить доступ к 
// пользовательскому разделу на сайте поставщика конфигурации.
//
// Возвращаемое значение:
//   Строка   – адрес веб-страницы.
Функция АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту() Экспорт
	
	Значение = "http://users.v8.1c.ru/Rules.aspx";  // Значение по умолчанию
	
	ЗначениеПереопределяемогоМодуля = ОбновлениеКонфигурацииКлиентПереопределяемый.АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту();
	Если НЕ ПустаяСтрока(ЗначениеПереопределяемогоМодуля) Тогда  // Переопределяемое значение
		Значение = ЗначениеПереопределяемогоМодуля;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

// Получить адрес каталога файлов обновления на сервере обновлений.
//
// Возвращаемое значение:
//   Строка   – адрес каталога на веб-сервере.
//
Функция АдресКаталогаШаблоновНаСервереОбновлений() Экспорт
	
	СерверОбновлений = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КаталогОбновлений;
	СерверОбновлений = СтрЗаменить(СерверОбновлений, "http://", "");  
	КаталогШаблоновНаСервере = "";
	Позиция = Найти(СерверОбновлений, "/");
	Если Позиция > 0 Тогда
		КаталогШаблоновНаСервере = Сред(СерверОбновлений, Позиция, СтрДлина(СерверОбновлений));
	КонецЕсли;
	Возврат КаталогШаблоновНаСервере;
	
КонецФункции

// Получить адрес сервера обновлений.
//
// Возвращаемое значение:
//   Строка   – адрес веб-сервера.
//
Функция АдресСервераОбновлений() Экспорт
	
	СерверОбновлений = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КаталогОбновлений;
	СерверОбновлений = СтрЗаменить(СерверОбновлений, "http://", "");  
	Позиция = Найти(СерверОбновлений, "/");
	Если Позиция > 0 Тогда
		СерверОбновлений = Сред(СерверОбновлений, 1, Позиция - 1);
	КонецЕсли;
	Возврат "http://" + СерверОбновлений;
	
КонецФункции

// Получить имя файла с информацией о доступном обновлении на сайте поставщика
// конфигурации.
//
// Возвращаемое значение:
//   Строка   – имя файла.
//
Функция ИмяФайлаПроверкиНаличияОбновления() Экспорт
	
	Возврат "UpdInfo.txt";
	
КонецФункции

Функция ПодключитьОтключитьПроверкуПоРасписанию(ФлагПодключитьИЛИОтключить = Истина) Экспорт
	Если ФлагПодключитьИЛИОтключить Тогда
		ПодключитьОбработчикОжидания("ОбработатьПроверкуОбновленияПоРасписанию", 10); //60 * 5); // каждые 5 минут
	Иначе
		ОтключитьОбработчикОжидания("ОбработатьПроверкуОбновленияПоРасписанию");
	КонецЕсли;
КонецФункции

Процедура ПроверитьНаличиеОбновленияЧерезИнтернет(ВыдаватьСообщения = Ложь) Экспорт
	Состояние("Проверка наличия обновления в Интернете..");
	
	Если ТипЗнч(ДоступноеОбновлениеКонфигурации) = Тип("Структура") Тогда
		ВремяПолученияОбновления = Неопределено;
		ДоступноеОбновлениеКонфигурации.Свойство("ВремяПолученияОбновления", ВремяПолученияОбновления);
		Если ВремяПолученияОбновления <> Неопределено И
				ТекущаяДата() - ВремяПолученияОбновления < 30 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДоступноеОбновлениеКонфигурации = Новый Структура;
	
	ДоступноеОбновлениеКонфигурации.Вставить("ПараметрыФайлаПроверкиОбновления", ПолучитьФайлПроверкиНаличияОбновлений(ВыдаватьСообщения));
	Если ТипЗнч(ДоступноеОбновлениеКонфигурации.ПараметрыФайлаПроверкиОбновления) = Тип("Строка") Тогда
		СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) + НСтр("ru = ' Невозможно подключиться к сети Интернет для проверки обновлений.'"), "Предупреждение");
		ДоступноеОбновлениеКонфигурации.Вставить("ИмяСтраницы", "ПодключениеКИнтернет");
		Возврат;
	КонецЕсли;
	
	ДоступноеОбновлениеКонфигурации.Вставить("ПоследняяВерсияКонфигурации", ДоступноеОбновлениеКонфигурации.ПараметрыФайлаПроверкиОбновления.Version);
	Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ВерсияКонфигурации,
													ДоступноеОбновлениеКонфигурации.ПоследняяВерсияКонфигурации) >= 0 Тогда  
		СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) + НСтр("ru = ' Обновление не требуется: последняя версия конфигурации уже установлена.'"), "Информация");
		ДоступноеОбновлениеКонфигурации.Вставить("ИмяСтраницы", "ОбновленияНеОбнаружено");
		Возврат;
	КонецЕсли;
	
	СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) + НСтр("ru = ' Обнаружена более новая версия конфигурации в Интернете: '") + ДоступноеОбновлениеКонфигурации.ПоследняяВерсияКонфигурации + ".", "Информация");
	ДоступноеОбновлениеКонфигурации.Вставить("ИмяСтраницы"				, "ДоступноеОбновление");
	ДоступноеОбновлениеКонфигурации.Вставить("ВремяПолученияОбновления"	, ТекущаяДата());
КонецПроцедуры

Процедура ПроверитьОбновлениеПоРасписанию() Экспорт
	НастройкиОбновленияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.НастройкиОбновленияКонфигурации;
	РасписаниеПроверкиНаличияОбновления	= Неопределено;
	Если НастройкиОбновленияКонфигурации = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	НастройкиОбновленияКонфигурации.Свойство("РасписаниеПроверкиНаличияОбновления", РасписаниеПроверкиНаличияОбновления);
	Если НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске <> 1 ИЛИ
		 РасписаниеПроверкиНаличияОбновления = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
			
	Если НЕ РасписаниеПроверкиНаличияОбновления.ТребуетсяВыполнение() Тогда
		Возврат;	
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(РасписаниеПроверкиНаличияОбновления.ПериодПовтораДней) Тогда
		РасписаниеПроверкиНаличияОбновления.ДатаНачала = ДобавитьДни(ТекущаяДата(),
			РасписаниеПроверкиНаличияОбновления.ПериодПовтораДней);
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
	КонецЕсли;
	СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) + "ru = ' Проверка наличия обновления в интернете по расписанию.'");
	НаименованиеСтраницыДоступногоОбновления	= "ДоступноеОбновление";
	ОбновлениеКонфигурацииКлиент.ПроверитьНаличиеОбновленияЧерезИнтернет();
	Если ДоступноеОбновлениеКонфигурации <> Неопределено И
			ДоступноеОбновлениеКонфигурации.ИмяСтраницы = НаименованиеСтраницыДоступногоОбновления Тогда
		СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) +
			НСтр("ru = 'Обнаружена новая версия конфигурации: '") + ДоступноеОбновлениеКонфигурации.ПараметрыФайлаПроверкиОбновления.Version);
		НастройкиОбновленияКонфигурации.ИсточникОбновления = 0;
		НастройкиОбновленияКонфигурации.Вставить("РасписаниеПроверкиНаличияОбновления"	, РасписаниеПроверкиНаличияОбновления);
		НастройкиОбновленияКонфигурации.Вставить("ПроверятьНаличиеОбновленияПриЗапуске"	, НастройкиОбновленияКонфигурации.ПроверятьНаличиеОбновленияПриЗапуске);
		ОбновлениеКонфигурации.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации, СообщенияДляЖурналаРегистрации);
		
		ДоступноеОбновлениеКонфигурации.Вставить("ИсточникОбновления"						, НастройкиОбновленияКонфигурации.ИсточникОбновления);
		ДоступноеОбновлениеКонфигурации.Вставить("НуженФайлОбновления"						, НастройкиОбновленияКонфигурации.НуженФайлОбновления);
		ДоступноеОбновлениеКонфигурации.Вставить("ФлагАвтоПереходаНаСтраницуСОбновлением"	, Истина);
		ДоступноеОбновлениеКонфигурации.Вставить("НадписьОповещения"						, "Обнаружено доступное обновление в Интернете");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Доступно обновление конфигурации'"),
			"e1cib/app/Обработка.ОбновлениеКонфигурации",
			НСтр("ru = 'Версия: '")	+ ДоступноеОбновлениеКонфигурации.ПараметрыФайлаПроверкиОбновления.Version, 
			БиблиотекаКартинок.Информация32);
	Иначе
		СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) + НСтр("ru = 'Доступных обновлений не обнаружено.'"));
		ОбновлениеКонфигурации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьФайлПроверкиНаличияОбновлений(Знач ВыдаватьСообщения = Истина)
	
	ВременныйФайл	=	ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().КаталогФайловОбновления +
						ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().ИмяФайлаПроверкиНаличияОбновления;
	Результат		= ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(	СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления +
																				ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().АдресРесурсовДляПроверкиНаличияОбновления +
																				ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().ИмяФайлаПроверкиНаличияОбновления,
																			Новый Структура("ПутьДляСохранения",
						                                        				? (ПустаяСтрока(ВременныйФайл), Неопределено, ВременныйФайл)));
	Если Результат.Статус <> Истина Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось проверить наличие обновлений.
			|%1'"), Результат.СообщениеОбОшибке);
		Если ВыдаватьСообщения Тогда
			Предупреждение(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СообщениеОбОшибке;
	КонецЕсли;																
	
	Возврат ПараметрыДистрибутива(ВременныйФайл);
	
КонецФункции

Функция СкопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение, ВыдаватьСообщения = Ложь) Экспорт
	Попытка
		СоздатьКаталог(ПолучитьКаталогФайла(ИмяФайлаНазначение));
		КопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 Ошибка при копировании: %2
				|(источник: %3; приемник: %4)'"), 
				ТекущаяДата(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ИмяФайлаИсточник, ИмяФайлаНазначение);
		СообщенияДляЖурналаРегистрации.Добавить(Сообщение, "Предупреждение");
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ПолучитьПараметрыОбновленияИТС(КаталогОбновленияНаДискеИТС, Знач ВыдаватьСообщения = Истина) Экспорт
	
	Если ПустаяСтрока(КаталогОбновленияНаДискеИТС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйФайл = ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().КаталогФайловОбновления +
					ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().ИмяФайлаПроверкиНаличияОбновления;
	Если НЕ СкопироватьФайл(КаталогОбновленияНаДискеИТС + ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().ИмяФайлаПроверкиНаличияОбновления, ВременныйФайл, ВыдаватьСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДискИТС = ПараметрыДистрибутива(ВременныйФайл);
	Если ТипЗнч(ПараметрыДискИТС) = Тип("Строка") Тогда
		Возврат Неопределено;                     
	КонецЕсли;
	Возврат ПараметрыДискИТС;
	
КонецФункции

Функция ПолучитьПараметрыРелизовНаДискеИТС(ДискИТС, Знач ВыдаватьСообщения = Истина) Экспорт
	
	Если ПустаяСтрока(ДискИТС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления();
	ВременныйФайл = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаАдресовРелизовИТС;
	Если НЕ СкопироватьФайл(
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДискИТС) + 
		ПараметрыОбновления.ИмяФайлаАдресовРелизовИТС, ВременныйФайл, ВыдаватьСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыРелизовНаДискеИТС = ПрочитатьАдресаРелизовНаДискеИТС(ВременныйФайл, ДискИТС);
	Если ТипЗнч(ПараметрыРелизовНаДискеИТС) <> Тип("Структура") Тогда // ошибки при чтении файла
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru = 'Обновления на диске ИТС не найдены.'"));
		КонецЕсли;
		Возврат Неопределено;		
   	КонецЕсли;
	Возврат ПараметрыРелизовНаДискеИТС;
	
КонецФункции

Функция СуществуетФайлПроверкиНаличияОбновления(Знач ПутьККаталогу)
	ФайлПроверки = Новый Файл(ПутьККаталогу + ОбновлениеКонфигурацииКлиентПовтИсп.ПолучитьПараметрыОбновления().ИмяФайлаПроверкиНаличияОбновления);
	Возврат ФайлПроверки.Существует();
КонецФункции

// Возвратить каталог файла - часть пути без имени файла.
//
// Параметры
//  ПутьКФайлу  – Строка – путь к файлу.
//
// Возвращаемое значение:
//   Строка   – каталог файла
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу) Экспорт

	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "\"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Чтение данных по обновлению из файла ИмяФайлаПроверкиНаличияОбновления (UpdInfo.txt)
// Вычисляются: 
//		номер версии обновления на сервере, 
//		номера версий, с которых производится обновление (раздляются символом ";")
//		дата публикации обновления
//
// Параметры:
//  ИмяФайла - полное имя файла UpdInfo.txt
// 
// Возвращаемое значение:
//  Структура: 
//		Version - версия обновления
//		FromVersions - с каких версий обновляет
//		UpdateDate - дата опубликования
//  Строка - описание ошибки, если файл не найден или не содержит нужных значений
//
Функция ПараметрыДистрибутива(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru = 'Файл описания обновлений не получен'");
	КонецЕсли;	
	ТД = Новый ТекстовыйДокумент(); 
	ТД.Прочитать(Файл.ПолноеИмя);
	ПарКомпл = Новый Структура();
	Для Н = 1 По ТД.КоличествоСтрок() Цикл
		СтрТмп = НРег(СокрЛП(ТД.ПолучитьСтроку(Н)));
		Если ПустаяСтрока(СтрТмп) Тогда
			Продолжить;
		КонецЕсли; 
		Если Найти(СтрТмп,"fromversions=")>0 Тогда
			СтрТМП = СокрЛП(Сред(СтрТмп,Найти(СтрТмп,"fromversions=")+СтрДлина("fromversions=")));
			СтрТМП = ?(Лев(СтрТМП,1)=";","",";") + СтрТмп + ?(Прав(СтрТМП,1)=";","",";");
			ПарКомпл.Вставить("FromVersions",СтрТМП);
		ИначеЕсли Найти(СтрТмп,"version=")>0 Тогда
			ПарКомпл.Вставить("Version",Сред(СтрТмп,Найти(СтрТмп,"version=")+СтрДлина("version=")));
		ИначеЕсли Найти(СтрТмп,"updatedate=")>0 Тогда
			// формат даты = Дата, 
			СтрТмп = Сред(СтрТмп,Найти(СтрТмп,"updatedate=")+СтрДлина("updatedate="));
			Если СтрДлина(СтрТмп)>8 Тогда
				Если Найти(СтрТмп,".")=5 Тогда
					// дата в формате  ГГГГ.ММ.ДД
					СтрТмп = СтрЗаменить(СтрТмп,".","");
				ИначеЕсли Найти(СтрТмп,".")=3 Тогда
					// дата в формате ДД.ММ.ГГГГ
					СтрТмп = Прав(СтрТмп,4)+Сред(СтрТмп,4,2)+Лев(СтрТмп,2);
				Иначе 
					// дата в формате ГГГГММДД
				КонецЕсли;
			КонецЕсли;
			ПарКомпл.Вставить("UpdateDate",Дата(СтрТмп));
		Иначе
			Возврат НСтр("ru = 'Неверный формат сведений о наличии обновлений'");
		КонецЕсли;
	КонецЦикла;
	Возврат ПарКомпл;
КонецФункции

Функция ПрочитатьАдресаРелизовНаДискеИТС(Знач ИмяФайла, Знач ДискИТС)
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат НСтр("ru = 'Файл описания обновлений не получен'");
	КонецЕсли;	
	
	КороткоеИмяКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "/", "\");	
	КороткоеИмяКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КороткоеИмяКонфигурации);
	ВозвращаемаяСтруктура = Новый Структура("ПутьКФайламОбновленияНаДискеИТС, ПутьКСтатьеПеречнюРелизов", "", "");
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		ЧтениеXML.Прочитать();
		
		// Путь к статье с перечнем релизов на диске ИТС
		ПутьКСтатьеПеречнюРелизов = ЧтениеXML.ПолучитьАтрибут("UpdateListFile");
		Если НЕ ПустаяСтрока(ПутьКСтатьеПеречнюРелизов) Тогда
			ВозвращаемаяСтруктура.Вставить("ПутьКСтатьеПеречнюРелизов", ПутьКСтатьеПеречнюРелизов);
		КонецЕсли;
		
		// Читаем начало элемента Update или конец элемента UpdateList.
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "UpdateSourceList" Тогда
				Прервать;					
			КонецЕсли;
			Если ЧтениеXML.Имя <> "source" Тогда
				Продолжить;
			КонецЕсли;
				
			ЧтениеXML.Прочитать();
			ЗначениеПутиКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДискИТС) + 
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(
					СокрЛП(ЧтениеXML.Значение))) + 
				КороткоеИмяКонфигурации;
			Если НЕ ПустаяСтрока(ЗначениеПутиКаталога) И СуществуетФайлПроверкиНаличияОбновления(ЗначениеПутиКаталога) Тогда
				ВозвращаемаяСтруктура.Вставить("ПутьКФайламОбновленияНаДискеИТС", ЗначениеПутиКаталога);
				Прервать;
			КонецЕсли;
			ЧтениеXML.Прочитать();
		КонецЦикла;
		ЧтениеXML.Закрыть();
	Исключение
		СообщенияДляЖурналаРегистрации.Добавить(Строка(ТекущаяДата()) + НСтр("ru = ' ПрочитатьАдресаРелизовНаДискеИТС: '") + 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ВозвращаемаяСтруктура;
КонецФункции

Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат 0;
  	
КонецФункции

Функция КаталогLocalAppData() Экспорт
	App			= Новый COMОбъект("Shell.Application");
	Folder		= App.Namespace(28);
	Результат	= Folder.Self.Path;
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
КонецФункции

Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, Знач Заголовок = "") Экспорт
	
	ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Обозреватель", 
		Новый Структура("АдресСтраницы,Заголовок", АдресСтраницы, Заголовок));

КонецПроцедуры

// Добавляет заданное количество дней к дате
//
// Параметры:
//  Дата		- Дата	- Исходная дата
//  ЧислоДней	- Число	- Количество дней, добавляемых к исходной дате
Функция ДобавитьДни(Знач Дата, Знач ЧислоДней) Экспорт
	
	Если ЧислоДней > 0 Тогда
		Разница = День(Дата) + ЧислоДней - День(КонецМесяца(Дата));
		Если Разница > 0 Тогда
			НоваяДата = ДобавитьМесяц(Дата, 1);	
			Возврат Дата(Год(НоваяДата), Месяц(НоваяДата), Разница, 
				Час(НоваяДата), Минута(НоваяДата), Секунда(НоваяДата));
		КонецЕсли;
	ИначеЕсли ЧислоДней < 0 Тогда
		Разница = День(Дата) + ЧислоДней - День(НачалоМесяца(Дата));
		Если Разница < 1 Тогда
			НоваяДата = ДобавитьМесяц(Дата, -1);	
			Возврат Дата(Год(НоваяДата), Месяц(НоваяДата), День(КонецМесяца(НоваяДата)) - Разница, 
				Час(НоваяДата), Минута(НоваяДата), Секунда(НоваяДата));
		КонецЕсли;
	КонецЕсли; 
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата) + ЧислоДней, Час(Дата), Минута(Дата), Секунда(Дата));
	
КонецФункции

