// Сохраняет путь к рабочему каталогу пользователя в настройках и параметре сеанса
//
Функция ПолучитьПутьКРабочемуКаталогуПользователя() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
КонецФункции

// Извлекает текст из файлов на диске
Процедура ИзвлечениеТекста() Экспорт
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	
	Если НЕ ЭтоПлатформаWindows() Тогда
		Возврат; // извлечение текста работает только под Windows
	КонецЕсли;
	
	ИмяСРасширениемФайла = "";
	
	ЗаписьЖурналаРегистрации("Извлечение текста",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное извлечение текста'"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = ФайловыеФункцииПереопределяемый.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаВыгрузки Цикл
		
		ФайлОбъект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			ФайлОбъект.Заблокировать();
		Исключение
			// если файл уже заблокирован - не обрабатываем его
			Продолжить;
		КонецПопытки;
		
		ИмяСРасширениемФайла = ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение;
		ИмяФайлаСПутем = "";
		
		Попытка
			
			ИмяФайлаСПутем = ФайловыеФункцииПереопределяемый.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлОбъект.Ссылка);
			
			Если ПустаяСтрока(ИмяФайлаСПутем) Тогда
				Продолжить;
			КонецЕсли;
			
			Текст = "";
			
			Если ИмяФайлаСПутем <> "" Тогда
				// Извлекаем текст из файла
				Извлечение = Новый ИзвлечениеТекста(ИмяФайлаСПутем);
				Текст = Извлечение.ПолучитьТекст();
				ФайлОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			КонецЕсли;
		
		Исключение // Ничего не пишем - это нормальная ситуация - когда Текст некому извлечь
			ФайлОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		КонецПопытки;
		
		Если Строка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			УдалитьФайлы(ИмяФайлаСПутем);
		КонецЕсли;
		
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст, Новый СжатиеДанных);
		
		Попытка
			ФайловыеФункцииПереопределяемый.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
		Исключение
			
			ОписаниеОшибкиИнфо = ОписаниеОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Во время регламентного извлечения текста из файла ""%1"" произошла неизвестная ошибка.'"), 
									ИмяСРасширениемФайла);
			ТекстСообщения = ТекстСообщения + Строка(ОписаниеОшибкиИнфо);
			
			ЗаписьЖурналаРегистрации("Извлечение текста",
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	ЗаписьЖурналаРегистрации("Извлечение текста", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное извлечение текста'"));
	
КонецПроцедуры

// Получает строку из временного хранилища (передача с клиента на сервер,
// делается через временное хранилище)
//
Функция ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста) Экспорт
	
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТекста).Записать(ИмяВременногоФайла);
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Текст;
	
КонецФункции

// Возвращает максимальный размер файла
//
Функция ПолучитьМаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает значение константы ИзвлекатьТекстыФайловНаСервере
Функция ИзвлекатьТекстыФайловНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows
Функция ЭтоПлатформаWindows() Экспорт
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
	 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста
Процедура ЗаписатьРезультатИзвлеченияТекста(ФайлИлиВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста) Экспорт
	
	ФайлИлиВерсияОбъект = ФайлИлиВерсияСсылка.ПолучитьОбъект();
	ФайлИлиВерсияОбъект.Заблокировать();
	
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Текст = "";
	Иначе
		Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ФайлИлиВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаТекста);
	КонецЕсли;
	
	Если РезультатИзвлечения = "НеИзвлечен" Тогда
		ФайлИлиВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
		ФайлИлиВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
		ФайлИлиВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;
	
	ФайловыеФункцииПереопределяемый.ЗаписатьИзвлеченныйТекст(ФайлИлиВерсияОбъект);
	
КонецПроцедуры

// Возвращает ЗапретЗагрузкиФайловПоРасширению
Функция ПолучитьЗапретЗагрузкиФайловПоРасширению() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапретЗагрузкиФайловПоРасширению = Константы.ЗапретЗагрузкиФайловПоРасширению.Получить();
	Возврат ЗапретЗагрузкиФайловПоРасширению;
	
КонецФункции

// Возвращает СписокЗапрещенныхРасширений
Функция ПолучитьСписокЗапрещенныхРасширений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	Возврат СписокЗапрещенныхРасширений;
	
КонецФункции

// Возвращает тип платформы сервера
Функция ТипПлатформыСервера() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат СисИнфо.ТипПлатформы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с томами файлов

// Добавляет файл в один из томов (где есть свободное место)
//
Процедура ДобавитьНаДиск(
		ДвоичныеДанные,
		ПутьКФайлуВТоме,
		СсылкаНаТом,
		ВремяИзменения,
		НомерВерсии,
		ИмяБезРасширения,
		Расширение,
		РазмерФайла = 0,
		Зашифрован = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
	ОписаниеВсехОшибок = ""; // здесь соберем ошибки со всех томов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТомаХраненияФайлов.ПорядокЗаполнения";

	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ВызватьИсключение(НСтр("ru = 'Нет ни одного тома для размещения файла!'"));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаТом = Выборка.Ссылка;
		
		ПутьКТому = ПолныйПутьТома(СсылкаНаТом);
		// Добавляем слэш в конце, если его нет
		ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПутьКТому);
		
		// Имя файла для хранения на диске формировать следующим образом
		// - имя файла.номер версии.расширение файла
		Если ПустаяСтрока(НомерВерсии) Тогда
			ИмяФайла = ИмяБезРасширения + "." + Расширение;
		Иначе
			ИмяФайла = ИмяБезРасширения + "." + НомерВерсии + "." + Расширение;
		КонецЕсли;
		
		Если Зашифрован Тогда
			ИмяФайла = ИмяФайла + "." + "p7m";
		КонецЕсли;	
		
		Попытка
			
			// Если МаксимальныйРазмер = 0 - нет ограничения на размер файлов на томе
			Если СсылкаНаТом.МаксимальныйРазмер <> 0 Тогда
				ТекущийРазмерВБайтах = ПодсчитатьРазмерФайловНаТоме(СсылкаНаТом.Ссылка); 
				НовыйРазмерВБайтах = ТекущийРазмерВБайтах + РазмерФайла;
				НовыйРазмер = НовыйРазмерВБайтах / (1024 * 1024);
				
				Если НовыйРазмер > СсылкаНаТом.МаксимальныйРазмер Тогда
					СтрокаОшибки 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Превышен максимальный размер тома (%1 Мб)!'"),
						СсылкаНаТом.МаксимальныйРазмер);
					ВызватьИсключение(СтрокаОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Дата = ТекущаяДата();
			ПутьДня = Формат(Дата, "ДФ=ггггММдд") + "\";
			ПутьКТому = ПутьКТому + ПутьДня;
			
			ИмяФайлаСПутем = ФайловыеФункцииКлиентСервер.ПолучитьУникальноеИмяСПутем(ПутьКТому, ИмяФайла);
			ПолноеИмяФайлаСПутем = ПутьКТому + ИмяФайлаСПутем;
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные.Записать(ПолноеИмяФайлаСПутем);
			Иначе // считаем, что иначе это путь к файлу на диске
				КопироватьФайл(ДвоичныеДанные, ПолноеИмяФайлаСПутем);
			КонецЕсли;
			
			// Установим время изменения файла таким, как оно стоит в текущей версии
			ФайлНаДиске = Новый Файл(ПолноеИмяФайлаСПутем);
			ФайлНаДиске.УстановитьВремяИзменения(ВремяИзменения);
			ФайлНаДиске.УстановитьТолькоЧтение(Истина);
			
			ПутьКФайлуВТоме = ПутьДня + ИмяФайлаСПутем;
			Возврат; // закончили - выйдем из процедуры
			
		Исключение
			Если ОписаниеВсехОшибок <> "" Тогда
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + НСтр("ru = 'Ошибка при добавлении файла на том: '");
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + СсылкаНаТом;
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + " (" + ПутьКТому + "): ";
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СсылкаНаТом.ПолныйПутьLinux = СсылкаНаТом.ПолныйПутьWindows Тогда
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + Символы.ПС;
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + НСтр("ru = 'Настройте полный путь к тому.'");
			КонецЕсли;
			// надо переходить к следующему тому
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	// запись в журнал регистрации для администратора
	// здесь выдадим ошибки со всех томов
	СообщениеОбОшибке = НСтр("ru = 'Не удалось добавить файл ни на один из томов! Список ошибок: '") + Символы.ПС + Символы.ПС + ОписаниеВсехОшибок;
	ЗаписьЖурналаРегистрации("Добавление файла", УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
	
	// здесь сообщение пользователю
	СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			 НСтр("ru = 'Не удалось добавить файл: ""%1.%2"". Обратитесь к администратору системы.'"),
			 ИмяБезРасширения, Расширение);
	ВызватьИсключение(СтрокаИсключения);

КонецПроцедуры // ДобавитьНаДиск()

// Вернет размер файлов на томе - в байтах
Функция ПодсчитатьРазмерФайловНаТоме(СсылкаТома) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	               |ИЗ
	               |	Справочник.ВерсииФайлов КАК Версии
	               |ГДЕ
	               |	Версии.Том = &Том";
	
	Запрос.Параметры.Вставить("Том", СсылкаТома);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.РазмерФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает полный путь тома - в зависимости от ОС
Функция ПолныйПутьТома(СсылкаНаТом) Экспорт
	
	ТипПлатформыСервера = ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат СсылкаНаТом.ПолныйПутьWindows;
	Иначе	
		Возврат СсылкаНаТом.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

//Есть ли хоть один том хранения файлов
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	Выборка = Справочники.ТомаХраненияФайлов.Выбрать(,,, "ПорядокЗаполнения Возр");
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает тип хранения файлов
//
Функция ПолучитьТипХраненияФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипХраненияФайлов = Константы.ТипХраненияФайлов.Получить();
	Если ТипХраненияФайлов.Пустая() Тогда
		ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		Константы.ТипХраненияФайлов.Установить(ТипХраненияФайлов);
	КонецЕсли;
	
	Возврат ТипХраненияФайлов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭЦП

// Получает все подписи файла
//
// Параметры
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	МассивВозврата = Новый Массив;
	
	//ВерсияСсылка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФайлСсылка, "ТекущаяВерсия");
	ПолноеИмяОбъектаСЭЦП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЭлектронныеЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
					|	ЭлектронныеЦифровыеПодписи.Подпись             КАК Подпись,
					|	ЭлектронныеЦифровыеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи
					|ИЗ
					|	[ПолноеИмяОбъектаСЭЦП].ЭлектронныеЦифровыеПодписи КАК ЭлектронныеЦифровыеПодписи
					|ГДЕ
					|	ЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭЦП]", ПолноеИмяОбъектаСЭЦП);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи",
											АдресПодписи,
											ВыборкаЗапроса.КомуВыданСертификат,
											ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Проверяет все подписи (на сервере) из массива ДанныеВыделенныхСтрок
Процедура ПроверитьНаСервере(ДанныеВыделенныхСтрок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	Для Каждого ДанныеСтроки Из ДанныеВыделенныхСтрок Цикл
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет все подписи (на сервере) из ТаблицаПодписей
Процедура ПроверитьВсеНаСервере(ТаблицаПодписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	Для Каждого Строка Из ТаблицаПодписей Цикл
		Если Строка.Объект <> Неопределено И (НЕ Строка.Объект.Пустая()) Тогда
			ПроверитьОднуПодписьНаСервере(Строка, МенеджерКриптографии);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет одну подпись( на сервере)
Процедура ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии)
	
	СтруктураВозврата = ФайловыеФункцииПереопределяемый.ПолучитьДвоичныеДанныеФайлаИПодписи(ДанныеСтроки);
	
	ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
	ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
	
	Попытка
		ЭлектроннаяЦифроваяПодпись.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// Конвертация файлов из подсистемы Работа с файлами в подсистему Присоединенные файлы.

// Переносит файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы
// Конвертирует файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы.
//
// Для использования в процедурах обновления ИБ, если выполняется переход от использования
// одной подсистемы к другой в каком-либо объекте-владельце файлов.
// Выполняется последовательно для каждого элемента объекта-владельца файлов
// (элемента справочника, ПВХ, документа и т.п.).
//
// Параметры:
//   ВладелецФайловСсылка - ЛюбаяСсылка - ссылка на объект-владелец файлов.
//
Функция СконвертироватьФайлыВПрисоединенные(ВладелецФайловСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	Файл.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Файлы КАК Файл
					|ГДЕ
					|	Файл.ВладелецФайла = &ВладелецФайла";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайловСсылка);
	ФайлыИсточник = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПолноеИмяОМ = ВладелецФайловСсылка.Метаданные().ПолноеИмя();
	КраткоеИмяОМ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОМ, ".")[1];
	МенеджерПрисоединенныхФайлов = Справочники[КраткоеИмяОМ + "ПрисоединенныеФайлы"];
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла				= ВладелецФайловСсылка;
			ПрисоединенныйФайл.Наименование					= ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор						= ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная	= ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания					= ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован					= ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил						= ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание						= ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭЦП					= ФайлИсточникОбъект.ПодписанЭЦП;
			ПрисоединенныйФайл.Размер						= ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение					= ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует					= ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище				= ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла				= ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления 				= ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - сошлемся на существующий файл
			ПрисоединенныйФайл.Том							= ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу					= ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.СертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.СертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Для Каждого ЭЦПСтрока Из ТекущаяВерсияОбъект.ЭлектронныеЦифровыеПодписи Цикл
				НоваяСтрока = ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭЦПСтрока);
			КонецЦикла;
			
			ПрисоединенныйФайл.Записать();
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ДвоичныеДанные = ТекущаяВерсияОбъект.ФайлХранилище.Получить();
				// Применяется Вычислить для случая, когда подсистема Присоединенные файлы отсутствует 
				// в конфигурации.
				МенеджерЗаписи = Вычислить("РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи()");
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удалим ссылки в старом файле на том, что бы при удалении,
			// файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ТекущаяВерсияПутьКФайлу = "";
				ФайлИсточникОбъект.ТекущаяВерсияТом = "";
				ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ТекущаяВерсияОбъект.Записать();
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
		ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Процедура ПометитьНаУдалениеВерсииФайла(ФайлСсылка, ВерсияИсключение)
	
	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ВерсииФайлов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|ГДЕ
			|	ВерсииФайлов.Владелец = &Владелец
			|	И НЕ ВерсииФайлов.ПометкаУдаления
			|	И ВерсииФайлов.Ссылка <> &Исключение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Запрос.УстановитьПараметр("Исключение", ВерсияИсключение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияОбъект.ПометкаУдаления = Истина;
		ВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
		ВерсияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Получает ссылки на объекты с файлами
Функция ПолучитьСсылкиНаОбъектыСФайлами(ПолноеИмяОМ) Экспорт
	
	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОбъектСФайлами.Ссылка КАК Ссылка
			|ИЗ
			|	[ПолноеИмяОМ] КАК ОбъектСФайлами
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
			|		ПО ОбъектСФайлами.Ссылка = Файлы.ВладелецФайла
			|ГДЕ
			|	Файлы.Ссылка <> ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
			|СГРУППИРОВАТЬ ПО
			|	ОбъектСФайлами.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОМ]", ПолноеИмяОМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки

// Устанавливает персональные настройки файловых функций
Процедура УстановитьПерсональныеНастройкиФайловыхФункций(Настройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// МаксимальныйРазмерЛокальногоКэшаФайлов 
	МаксимальныйРазмерЛокальногоКэшаФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов");
	
	Если МаксимальныйРазмерЛокальногоКэшаФайлов = Неопределено Тогда
		МаксимальныйРазмерЛокальногоКэшаФайлов = 100*1024*1024; // 100 мб
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", МаксимальныйРазмерЛокальногоКэшаФайлов);
	КонецЕсли;
	
	Настройки.Вставить("МаксимальныйРазмерЛокальногоКэшаФайлов", МаксимальныйРазмерЛокальногоКэшаФайлов);
	
	// ПутьКЛокальномуКэшуФайлов
	ПутьКЛокальномуКэшуФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
	Настройки.Вставить("ПутьКЛокальномуКэшуФайлов", ПутьКЛокальномуКэшуФайлов);
	
	// УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования
	УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования");
	Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Неопределено Тогда
		УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
	КонецЕсли;
	Настройки.Вставить("УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования);
	
	// ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов
	ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов");
	Если ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Неопределено Тогда
		ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Ложь;
	КонецЕсли;
	Настройки.Вставить("ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов", ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов);
	
	// ИзвлекатьТекстыФайловНаСервере
	ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	Если ИзвлекатьТекстыФайловНаСервере = Неопределено Тогда
		ИзвлекатьТекстыФайловНаСервере = Ложь;
	КонецЕсли;
	Настройки.Вставить("ИзвлекатьТекстыФайловНаСервере", ИзвлекатьТекстыФайловНаСервере);
	
	// МаксимальныйРазмерФайла
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	Настройки.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	
	// ЗапретЗагрузкиФайловПоРасширению
	ЗапретЗагрузкиФайловПоРасширению = Константы.ЗапретЗагрузкиФайловПоРасширению.Получить();
	Если ЗапретЗагрузкиФайловПоРасширению = Неопределено Тогда
		ЗапретЗагрузкиФайловПоРасширению = Ложь;
		Константы.ЗапретЗагрузкиФайловПоРасширению.Установить(ЗапретЗагрузкиФайловПоРасширению);
	КонецЕсли;
	Настройки.Вставить("ЗапретЗагрузкиФайловПоРасширению", ЗапретЗагрузкиФайловПоРасширению);
	
	// СписокЗапрещенныхРасширений
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	Если СписокЗапрещенныхРасширений = Неопределено ИЛИ СписокЗапрещенныхРасширений = "" Тогда
		СписокЗапрещенныхРасширений = "COM EXE BAT CMD VBS VBE JS JSE WSF WSH SCR";
		Константы.СписокЗапрещенныхРасширений.Установить(СписокЗапрещенныхРасширений);
	КонецЕсли;
	Настройки.Вставить("СписокЗапрещенныхРасширений", СписокЗапрещенныхРасширений);
	
	Настройки.Вставить("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
	Настройки.Вставить("ИмяКонфигурации", Метаданные.Имя);
	
	// ПоказыватьПодсказкиПриРедактированииФайлов
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Если ПоказыватьПодсказкиПриРедактированииФайлов = Неопределено Тогда
		ПоказыватьПодсказкиПриРедактированииФайлов = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	
	// ОтпечатокЛичногоСертификатаДляШифрования
	ОтпечатокЛичногоСертификатаДляШифрования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "ОтпечатокЛичногоСертификатаДляШифрования");
	Настройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
	
КонецПроцедуры

// При переименовании пользователя переносит его настройки - РабочийКаталог, ДействиеПоДвойномуЩелчкуМыши и пр
//
Процедура ПеренестиНастройкиПриСменеИмениПользователя(знач ИмяТекущее, знач ИмяУстанавливаемое) Экспорт
	
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяТекущее, ИмяУстанавливаемое); // путь к раб каталогу тоже переносим - чтобы файлы не потерялись
	ПеренестиНастройку("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	
КонецПроцедуры

// Переносит настройку (копирует в новое место, в старом удаляет)
//
Процедура ПеренестиНастройку(Объект, Настройка, ИмяТекущее, ИмяУстанавливаемое) Экспорт
	
	Значение = ХранилищеОбщихНастроек.Загрузить(Объект, Настройка, , ИмяТекущее);
	
	Если Значение <> Неопределено Тогда
		ХранилищеОбщихНастроек.Сохранить(Объект, Настройка, Значение, , ИмяУстанавливаемое);
		ХранилищеОбщихНастроек.Удалить(Объект, Настройка, ИмяТекущее);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные функции поддержки обмена файлами

// Служебная функция используется при создании начального образа
// Выполняется всегда на сервере
//
Процедура СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла) Экспорт
	
	Попытка
		// если файл в томе - скопируем его во временный каталог (при создании начального образа)
		КопироватьФайл(ПолныйПуть, НовыйПутьФайла);
		ФайлВременный = Новый Файл(НовыйПутьФайла);
		ФайлВременный.УстановитьТолькоЧтение(Ложь);
	Исключение
		// не регистрируется, возможно файл не найден
	КонецПопытки;
	
КонецПроцедуры

// Служебная функция используется для помещения двоичных данных файла в томе
// в хранилище значения
//
Функция ПоместитьДвоичныеДанныеВХранилище(Том, ПутьКФайлу, УникальныйИдентификатор) Экспорт
	
	ПолныйПуть = ПолныйПутьТома(Том) + ПутьКФайлу;
	УникальныйИдентификатор = УникальныйИдентификатор;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
	Возврат Новый ХранилищеЗначения(ДвоичныеДанные);
	
КонецФункции

// Служебная функции. Используется для удаления файла на сервере
// 
Процедура УдалитьФайлыНаСервере(Ссылка, ПрежнийПутьНаТоме) Экспорт
	
	ФайлВременный = Новый Файл(ПрежнийПутьНаТоме);
	ФайлВременный.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПрежнийПутьНаТоме);
	ФайловыеФункцииПереопределяемый.УдалитьФайлыПриПолученииДанныхФайла(Ссылка, ФайлВременный.Путь);
	
КонецПроцедуры
