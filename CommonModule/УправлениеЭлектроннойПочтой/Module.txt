Процедура ПолучитьПисьма(УчетнаяЗапись, ЕстьОшибки, СтрОшибка, Получено)

	// -----------------------------------------------------------------
	// Сформируем почтовый профиль и подключимся к почтовому серверу
	Профиль = ЭлектроннаяПочта.СформироватьИнтернетПрофиль(УчетнаяЗапись);
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль);
	Исключение
		ЕстьОшибки = Истина;
		СтрОшибка = ПолучитьОписаниеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;

	// -----------------------------------------------------------------
	// Получим идентификаторы сообщений на сервере
	Идентификаторы = Почта.ПолучитьИдентификаторы();
	Если Идентификаторы.Количество() = 0 Тогда
		// если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений ИдентификаторыПолученныхЭлектронныхПисем
		УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись);
		Почта.Отключиться();
		Возврат;
	КонецЕсли;

	// -----------------------------------------------------------------
	// Определим какие сообщения нужно получать
	ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись);
	Получено = 0;
	Если ИдЗагружать.Количество() <> 0 Тогда
		// Получим нужные сообщения
		Сообщения = Почта.Выбрать(Ложь, ИдЗагружать);

		// Запишем их
		Для Каждого Сообщение Из Сообщения Цикл
			ЗаписатьВходящееЭлектронноеПисьмо(УчетнаяЗапись, Сообщение, УчетнаяЗапись.ОтветственныйЗаОбработкуПисем);
		КонецЦикла;
		
		Получено = Сообщения.Количество();
	КонецЕсли;
	
	// -----------------------------------------------------------------
	// Удалим ненужные сообщения на сервере
	ОставлятьКопии = (УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере <> 0);
	ОставлятьДней  = УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере;
	Если Не ОставлятьКопии Тогда
		// удалять все
		масУдалять = Идентификаторы;
		УдалятьВсе = Истина;
	Иначе
		масУдалять = ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ТекущаяДата() - ОставлятьДней*24*60*60);
		УдалятьВсе = Ложь;
	КонецЕсли;
	
	Если масУдалять.Количество() <> 0 Тогда
		Почта.УдалитьСообщения(масУдалять);
	КонецЕсли;
	
	// -----------------------------------------------------------------
	// Удалим ненужные идентификаторы в регистре сведений
	Если УдалятьВсе Тогда
		УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись);
	Иначе
		УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, Идентификаторы, масУдалять);
	КонецЕсли;
	
	// -----------------------------------------------------------------
	// Отключимся от почтового сервера
	Почта.Отключиться();

КонецПроцедуры

Функция ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо)

	 Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Процедура УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ИдентификаторыНаСервере, ИдентификаторыУдалять)
	
	// Получим список идентификаторов которые не нужно удалять
	соотвУдалять = Новый Соответствие;
	Для Каждого Элемент Из ИдентификаторыУдалять Цикл
		соотвУдалять.Вставить(Элемент, Истина);
	КонецЦикла;
	
	масОставлять = Новый Массив;
	Для Каждого Элемент Из ИдентификаторыНаСервере Цикл
		Если соотвУдалять.Получить(Элемент) <> Истина Тогда
			масОставлять.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Получим идентификаторы которые нужно удалить, те которые есть в регистре, но не нужно оставлять
	табИдентификаторы = СоздатьТаблицуСИдентификаторами(масОставлять);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("табИдентификаторы", табИдентификаторы);
	Запрос.УстановитьПараметр("УчетнаяЗапись",     УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	табИдентификаторы.Идентификатор
	|ПОМЕСТИТЬ табИдентификаторы
	|ИЗ
	|	&табИдентификаторы КАК табИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ табИдентификаторы КАК табИдентификаторы
	|		ПО табИдентификаторы.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	табИдентификаторы.Идентификатор ЕСТЬ NULL ";

	масУдалять = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	
	// Удалим все ненужные идентификаторы
	Для Каждого Идентификатор Из масУдалять Цикл
		Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
		Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		Набор.Отбор.Идентификатор.Установить(Идентификатор);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	табИдентификаторы = Новый ТаблицаЗначений;
	табИдентификаторы.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", ,, Новый КвалификаторыСтроки(100)));
	Для Каждого Ид Из Идентификаторы Цикл
		новСтр = табИдентификаторы.Добавить();
		новСтр.Идентификатор = Ид;
	КонецЦикла;
	
	Возврат табИдентификаторы;
	
КонецФункции

Функция ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись)

	// Получим список сообщений которые не были раньше получены
	табИдентификаторы = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("табИдентификаторы", табИдентификаторы);
	Запрос.УстановитьПараметр("УчетнаяЗапись",     УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	табИдентификаторы.Идентификатор
	|ПОМЕСТИТЬ табИдентификаторы
	|ИЗ
	|	&табИдентификаторы КАК табИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табИдентификаторы.Идентификатор
	|ИЗ
	|	табИдентификаторы КАК табИдентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО табИдентификаторы.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ДатаПоКоторуюУдалять)

	// 
	табИдентификаторы = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("табИдентификаторы", табИдентификаторы);
	Запрос.УстановитьПараметр("УчетнаяЗапись",     УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаПолучения",     ДатаПоКоторуюУдалять);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	табИдентификаторы.Идентификатор
	|ПОМЕСТИТЬ табИдентификаторы
	|ИЗ
	|	&табИдентификаторы КАК табИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табИдентификаторы.Идентификатор
	|ИЗ
	|	табИдентификаторы КАК табИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО табИдентификаторы.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.ДатаПолучения <= &ДатаПолучения";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ПолучитьОписаниеОшибки(Информация)

	Возврат ?(Информация.Причина = Неопределено, Информация.Описание, Информация.Причина.Описание);

КонецФункции

Процедура ЗаписатьВходящееЭлектронноеПисьмо(УчетнаяЗапись, Сообщение, ОтветственныйЗаОбработкуПисем)
	
	НачатьТранзакцию();

	// Создадим документ и заполним его реквизиты на основе сообщения
	Письмо = Документы.ЭлектронноеПисьмоВходящее.СоздатьДокумент();
	Письмо.УчетнаяЗапись = УчетнаяЗапись;
	ЗаполнитьДокументЭлектронноеПисьмоВходящее(Письмо, Сообщение);

	// Найдем основание письма, проставим предмет и определим контакты
	ЗаполнитьПредметИКонтакты(Письмо);
	
	// Заполним ответственного
	Ответственный = ?(ЗначениеЗаполнено(Письмо.Предмет), Письмо.Предмет.Ответственный, Неопределено);
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		 Ответственный = ОтветственныйЗаОбработкуПисем;
	КонецЕсли;
	Письмо.Ответственный = Ответственный;
	
	// Запишем письмо
	Письмо.Записать();
	
	МассивИменВложений = Новый Массив;
	
	//Запишем вложения
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		МассивИменВложений.Добавить(Вложение.ИмяФайла);
	КонецЦикла;
	
	СоответствиеВложенийИПодписей = ФайловыеФункцииКлиентСервер.ПолучитьСоответствиеФайловИПодписей(МассивИменВложений);
	
	Для каждого ЭлементСоответствия Из СоответствиеВложенийИПодписей Цикл
		
		НайденноеВложение	= Неопределено;
		МассивПодписей		= Новый Массив;
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если Вложение.ИмяФайла = ЭлементСоответствия.Ключ Тогда
				НайденноеВложение = Вложение;
				Прервать;
			КонецЕсли
		КонецЦикла;
		
		Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
			Для каждого Вложение Из Сообщение.Вложения Цикл
				Если ЭлементСоответствия.Значение.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					МассивПодписей.Добавить(Вложение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденноеВложение <> Неопределено Тогда
			ЗаписатьВложениеЭлектронногоПисьма(Письмо.Ссылка, НайденноеВложение,МассивПодписей);
		КонецЕсли;
		
	КонецЦикла;
	
	// Запишем идентификатор
	ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись, Письмо.ИдентификаторНаСервере, Сообщение.ДатаПолучения);

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьПредметИКонтакты(Письмо)

	// -----------------------------------------------------------------
	// Получим идентификаторы писем оснований
	масИД = Новый Массив;
	СтрИД = Письмо.ИдентификаторыОснований;
	Пока Не ПустаяСтрока(СтрИД) Цикл
		Поз = Найти(СтрИД, "<");
		Если Поз = 0 Тогда
			Прервать;
		КонецЕсли;
		СтрИД = Сред(СтрИД, Поз+1);
		
		Поз = Найти(СтрИД, ">");
		Если Поз = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекИД = СокрЛП(Лев(СтрИД, Поз-1));
		СтрИД = СокрЛП(Сред(СтрИД, Поз+1));
		
		Если Не ПустаяСтрока(ТекИД) Тогда
			масИД.Добавить(ТекИД);
		КонецЕсли;
	КонецЦикла;
	
	Если (масИД.Найти(Письмо.ИдентификаторОснования) = Неопределено) И (НЕ ПустаяСтрока(Письмо.ИдентификаторОснования)) Тогда
		масИД.Добавить(Письмо.ИдентификаторОснования);
	КонецЕсли;
	
	табИД = СоздатьТаблицуСИдентификаторами(масИД);

	// -----------------------------------------------------------------
	// Получим все основания
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("табИдентификаторы", табИД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	табИдентификаторы.Идентификатор
	|ПОМЕСТИТЬ табИдентификаторы
	|ИЗ
	|	&табИдентификаторы КАК табИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата КАК Дата
	|ПОМЕСТИТЬ ВсеЭлектронныеПисьма
	|ИЗ
	|	табИдентификаторы КАК табИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО табИдентификаторы.Идентификатор = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата
	|ИЗ
	|	табИдентификаторы КАК табИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО табИдентификаторы.Идентификатор = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеЭлектронныеПисьма.Ссылка,
	|	ВсеЭлектронныеПисьма.Дата КАК Дата
	|ИЗ
	|	ВсеЭлектронныеПисьма КАК ВсеЭлектронныеПисьма
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Основание = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	ИмяВидаОснования = ?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"), "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее");

	// -----------------------------------------------------------------
	// Получим предмет взаимодействия
	Если ЗначениеЗаполнено(Основание) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронноеПисьмо.Ссылка,
		|	ЭлектронноеПисьмо.Предмет
		|ИЗ
		|	Документ." + ИмяВидаОснования + " КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.Предмет) Тогда
				Предмет = Выборка.Предмет;
			Иначе
				ОбъектОснование = Основание.ПолучитьОбъект();
				ОбъектОснование.Предмет = Выборка.Ссылка;
				ОбъектОснование.Записать();
				Предмет = Выборка.Ссылка;
			КонецЕсли;
			
			Письмо.Предмет = Предмет;
			
		КонецЕсли;
	КонецЕсли;

	// -----------------------------------------------------------------
	// Получим проставленные контакты в предмете
	соотвКонтакты = ПолучитьСоответствиеКонтактовВПисьме(Основание);

	// -----------------------------------------------------------------
	// Проставим контакты на основании предмета
	НеопределенныеАдреса = Новый Массив;
	УстановитьКонтактыВоВходящемПисьме(Письмо, соотвКонтакты, НеопределенныеАдреса);

	// -----------------------------------------------------------------
	// Если есть неопределенные адреса, то поищем их по контактной информации
	соотвКонтакты = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса);
	Если соотвКонтакты.Количество() > 0 Тогда
		УстановитьКонтактыВоВходящемПисьме(Письмо, соотвКонтакты, НеопределенныеАдреса);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(масАдреса)

	соотвКонтакты = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка,
	|	Контакты.АдресЭП КАК АдресЭП
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&масАдреса)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
      	|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&масАдреса)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;	
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
	|ИТОГИ ПО
	|	АдресЭП";

	Запрос.УстановитьПараметр("масАдреса", масАдреса);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если (ВыборкаПоСсылкам.Количество() = 1) И (ВыборкаПоСсылкам.Следующий()) Тогда
			соотвКонтакты.Вставить(Выборка.АдресЭП, ВыборкаПоСсылкам.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат соотвКонтакты;

КонецФункции

Процедура УстановитьКонтактыВоВходящемПисьме(Письмо, соотвКонтакты, НеопределенныеАдреса)

	ОбработатьПоляКонтактИАдрес(Письмо.ОтправительАдрес, Письмо.ОтправительКонтакт, соотвКонтакты, НеопределенныеАдреса);
	
	Для Каждого Стр Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(Стр.Адрес, Стр.Контакт, соотвКонтакты, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого Стр Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(Стр.Адрес, Стр.Контакт, соотвКонтакты, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого Стр Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(Стр.Адрес, Стр.Контакт, соотвКонтакты, НеопределенныеАдреса);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПоляКонтактИАдрес(Адрес, Контакт, соотвКонтакты, НеопределенныеАдреса)
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	нКонтакт = соотвКонтакты.Получить(Адрес);
	Если нКонтакт <> Неопределено И ТипЗнч(нКонтакт) <> Тип("Строка") Тогда
		Контакт = нКонтакт;
		Возврат;
	КонецЕсли;
	
	Контакт = Адрес;
	Если НеопределенныеАдреса.Найти(Адрес) = Неопределено Тогда
		НеопределенныеАдреса.Добавить(Адрес);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеКонтактовВПисьме(Письмо)
	
	соотвКонтакты = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат соотвКонтакты;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адреса.Адрес,
	|	Адреса.Контакт
	|ИЗ
	|	(" + ?(ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"), "", "ВЫБРАТЬ
	|		ПОДСТРОКА(ЭлектронноеПисьмоВходящее.ОтправительАдрес, 1, 100) КАК Адрес,
	|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|	ГДЕ
	|		ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	") + "ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Адрес,
	|		Таблица.Контакт
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка = &Письмо) КАК Адреса
	|ГДЕ
	|	(НЕ Адреса.Контакт ЕСТЬ NULL )";
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронноеПисьмоВходящее", "ЭлектронноеПисьмоИсходящее");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) <> Тип("Строка") Тогда
			соотвКонтакты.Вставить(Выборка.Адрес, Выборка.Контакт);
		КонецЕсли;
	КонецЦикла;

	Возврат соотвКонтакты;
	
КонецФункции

Процедура ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись, Идентификатор, ДатаПолучения)

	Запись = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьМенеджерЗаписи();
	Запись.УчетнаяЗапись = УчетнаяЗапись;
	Запись.Идентификатор = Идентификатор;
	Запись.ДатаПолучения = ДатаПолучения;
	Запись.Записать();

КонецПроцедуры

Процедура ЗаполнитьДокументЭлектронноеПисьмоВходящее(Письмо, Сообщение)

	Письмо.Важность = ПолучитьВажностьЭлектронногоПисьма(Сообщение.Важность);
	Письмо.Дата = ?(Сообщение.ДатаОтправления = Дата(1,1,1), ТекущаяДата(), Сообщение.ДатаОтправления);
	Письмо.ДатаПолучения = Сообщение.ДатаПолучения;
	Письмо.ВнутреннийЗаголовок = Сообщение.Заголовок;
	Письмо.ИдентификаторНаСервере = ?(Сообщение.Идентификатор.Количество() = 0, "", Сообщение.Идентификатор[0]);
	Письмо.ИдентификаторСообщения = Сообщение.ИдентификаторСообщения;
	Письмо.Кодировка = Сообщение.Кодировка;
	
	Если ТипЗнч(Сообщение.Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда
		Письмо.ОтправительАдрес = Сообщение.Отправитель.Адрес;
	Иначе
		Письмо.ОтправительАдрес = Сообщение.Отправитель;
	КонецЕсли;
	Письмо.ОтправительПредставление = ?(ПустаяСтрока(Сообщение.ИмяОтправителя), Сообщение.Отправитель.Адрес, Сообщение.ИмяОтправителя);
	
	Письмо.Размер = Сообщение.Размер;
	Письмо.Тема = Сообщение.Тема;
	
	УстановитьТекстПисьма(Письмо, Сообщение);
	
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиКопий,  Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, Сообщение.ОбратныйАдрес);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.Получатели);
	
	Письмо.ИдентификаторОснования  = ИзПисьмаПолучитьИдентификаторОснования(Сообщение);
	Письмо.ИдентификаторыОснований = Сообщение.ПолучитьПолеЗаголовка("References", "Строка");

	Письмо.ЕстьВложения = (Сообщение.Вложения.Количество() <> 0);

КонецПроцедуры

Процедура ЗаписатьВложениеЭлектронногоПисьма(Объект, Вложение,МассивПодписей)
	
	Адрес = ПоместитьВоВременноеХранилище(Вложение.Данные, "");
	
	Размер = 0;
	Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
		Размер = Вложение.Данные.Размер();
	КонецЕсли;
	
	ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Объект, Адрес, Вложение.ИмяФайла, Размер);
	
	Если МассивПодписей.Количество() > 0 Тогда
		
		ВложениеПисьмаОбъект = ВложениеПисьмаСсылка.ПолучитьОбъект();
		Для каждого ПодписьВложения Из МассивПодписей Цикл
			ЭЦП = ВложениеПисьмаОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
			ЭЦП.ИмяФайлаПодписи = ПодписьВложения.ИмяФайла;
			ЭЦП.Подпись = Новый ХранилищеЗначения(ПодписьВложения.Данные);
		КонецЦикла;
		
		ВложениеПисьмаОбъект.ПодписанЭЦП = Истина;
		
		ВложениеПисьмаОбъект.Записать();
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры

//Записывает вложение электронного письма, расположенное во временном хранилище в файл.
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо, АдресВоВременномХранилище, ИмяФайла, Размер) Экспорт
	
	РасширениеБезТочки = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(ИмяФайла);
	ИмяБезРасширения = ИмяФайла;
	ИмяБезРасширения = ?(РасширениеБезТочки = "", ИмяБезРасширения, Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	ВремяИзменения = ТекущаяДата();
	
	Возврат ПрисоединенныеФайлы.ДобавитьФайл(
			Письмо,
			ИмяБезРасширения,
			РасширениеБезТочки,
			ВремяИзменения,
			ВремяИзменения,
			АдресВоВременномХранилище,
			"",
			Ложь);

КонецФункции

Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТабличнаяЧасть, Адреса)
	
	Для Каждого Адрес Из Адреса Цикл
		новСтр = ТабличнаяЧасть.Добавить();
		новСтр.Адрес = Адрес.Адрес;
		новСтр.Представление = Адрес.ОтображаемоеИмя;
	КонецЦикла;
	
КонецПроцедуры

Функция ИзПисьмаПолучитьИдентификаторОснования(Сообщение)

	СтрИД = СокрЛП(Сообщение.ПолучитьПолеЗаголовка("In-Reply-To", "Строка"));
	
	Поз = Найти(СтрИД, "<");
	Если Поз <> 0 Тогда
		СтрИД = Сред(СтрИД, Поз+1);
	КонецЕсли;
	
	Поз = Найти(СтрИД, ">");
	Если Поз <> 0 Тогда
		СтрИД = Лев(СтрИД, Поз-1);
	КонецЕсли;

	Возврат СтрИД;

КонецФункции

Процедура УстановитьТекстПисьма(Письмо, Сообщение)
	
	ТекстHTML = "";	
	ТекстПростой = "";
	ТекстРазмеченный = "";

	Для Каждого ТекстПочтовогоСообщения Из Сообщение.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			ТекстHTML = ТекстПочтовогоСообщения.Текст;

		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			ТекстПростой = ТекстПочтовогоСообщения.Текст;
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда
			ТекстРазмеченный = ТекстПочтовогоСообщения.Текст;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Если ТекстHTML <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Письмо.ТекстHTML = ТекстHTML;
		Письмо.Текст = ?(ТекстПростой <> "", ТекстПростой, ТекстHTML);
		
	ИначеЕсли ТекстHTML <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст;
		Письмо.Текст = ТекстРазмеченный;
		
	Иначе
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Письмо.Текст = ТекстПростой;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВажностьЭлектронногоПисьма(Важность)
	
	Если (Важность = ВажностьИнтернетПочтовогоСообщения.Высокая) ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая) Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;

	ИначеЕсли (Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая) ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Низкая) Тогда
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;

	Иначе
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;

	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////
//  ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Функция возвращает таблицу имен кодировок
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Таблица значений
//
Функция ПолучитьСписокКодировок() Экспорт

	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",       "ibm852 (Центральноевропейская DOS)");
	СписокКодировок.Добавить("ibm866",       "ibm866 (Кириллица DOS)");
	СписокКодировок.Добавить("iso-8859-1",   "iso-8859-1 (Западноевропейская ISO)");
	СписокКодировок.Добавить("iso-8859-2",   "iso-8859-2 (Центральноевропейская ISO)");
	СписокКодировок.Добавить("iso-8859-3",   "iso-8859-3 (Латиница 3 ISO)");
	СписокКодировок.Добавить("iso-8859-4",   "iso-8859-4 (Балтийская ISO)");
	СписокКодировок.Добавить("iso-8859-5",   "iso-8859-5 (Кириллица ISO)");
	СписокКодировок.Добавить("iso-8859-7",   "iso-8859-7 (Греческая ISO)");
	СписокКодировок.Добавить("iso-8859-9",   "iso-8859-9 (Турецкая ISO)");
	СписокКодировок.Добавить("iso-8859-15",  "iso-8859-15 (Латиница 9 ISO)");
	СписокКодировок.Добавить("koi8-r",       "koi8-r (Кириллица KOI8-R)");
	СписокКодировок.Добавить("koi8-u",       "koi8-u (Кириллица KOI8-U)");
	СписокКодировок.Добавить("us-ascii",     "us-ascii США");
	СписокКодировок.Добавить("utf-8",        "utf-8 (Юникод UTF-8)");
	СписокКодировок.Добавить("windows-1250", "windows-1250 (Центральноевропейская Windows)");
	СписокКодировок.Добавить("windows-1251", "windows-1251 (Кириллица Windows)");
	СписокКодировок.Добавить("windows-1252", "windows-1252 (Западноевропейская Windows)");
	СписокКодировок.Добавить("windows-1253", "windows-1253 (Греческая Windows)");
	СписокКодировок.Добавить("windows-1254", "windows-1254 (Турецкая Windows)");
	СписокКодировок.Добавить("windows-1257", "windows-1257 (Балтийская Windows)");
	
	Возврат СписокКодировок;

КонецФункции

// Возвращает важность интернет почтового сообщения в зависимости от переданного значения
//	перечисления ВариантыВажностиВзаимодействия.
//
// Параметры
//  ВажностьВзаимодействия  - Перечисление.ВариантыВажностиВзаимодействия 
//
// Возвращаемое значение:
//   ВажностьИнтернетПочтовогоСообщения   
//
Функция ПолучитьВажность(ВажностьВзаимодействия) Экспорт
	
	Если ВажностьВзаимодействия = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Высокая;
	ИначеЕсли ВажностьВзаимодействия = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
		Возврат ВажностьИнтернетПочтовогоСообщения.Низкая;
	Иначе
		Возврат ВажностьИнтернетПочтовогоСообщения.Обычная;
	КонецЕсли;
	
КонецФункции

// Получает вложения электронного письма
//
// Параметры
//  Письмо  - ДокументСсылка - документ электронное письмо для которого необходимо получить вложения.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица значений, содержащая информацию о вложениях.
//
Функция ПолучитьВложенияЭлектронногоПисьма(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо";
	
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Устанавливает или снимает пометку удаления у вложений электронного письма
//
// Параметры
//  Письмо  		- ДокументСсылка - письмо, для вложений которого будут выполнены действия.
//  ПометкаУдаления - Булево - признак необходимости установить или снять пометку.
//
Процедура УстановитьПометкуУдаленияУВложенийПисьма(Письмо, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления <> &ПометкаУдаления
	|	И Файлы.ВладелецФайла = &ВладелецФайла
	|");
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ВладелецФайла", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЦикла;

КонецПроцедуры

// Удаляет вложения электронного письма
//
// Параметры
//
Процедура УдалитьВложенияУПисьма(Письмо) Экспорт

	ИмяОбъектаМетаданных = ПолучитьИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо);
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление адресата электронной почты
//
// Параметры
//  Имя			- Строка - имя адресата
//  Адрес  		- Строка - адрес электронной почты адресата
//  Контакт		- СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка	   - сформированное представление адресата электронной почты.
// 
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт) Экспорт
	
	Результат = ?(Имя = Адрес ИЛИ Имя = "", Адрес, Имя + " <" + Адрес + ">");
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Результат = Результат + " [" + ПолучитьПредставлениеКонтакта(Контакт) + "]";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление списка адресатов электронной почты для коллекции адресатов
//
// Параметры
//  ТаблицаАдресатов 	- ТаблицаЗначений - таблица с данным адресатов
//  ВключатьИмяКонтакта - Булево - признак необходимости включения в представление данных контакта
//  Контакт		- СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка	   - сформированное представление списка адресатов электронной почты.
// 
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина) Экспорт

	Представление = "";
	Для Каждого Стр Из ТаблицаАдресатов Цикл
		Представление = Представление + ?(Представление = "", "", ", ") + ПолучитьПредставлениеАдресата(Стр.Представление, Стр.Адрес, ?(ВключатьИмяКонтакта, Стр.Контакт, ""));
	КонецЦикла;

	Возврат Представление;

КонецФункции

Функция ПолучитьПредставлениеКонтакта(Контакт)

	Возврат Строка(Контакт);

КонецФункции

// Выполняет процедуру отправки и получения электронных писем.
// 
Процедура ПолучениеИОтправкаЭлектронныхПисем() Экспорт
	
	// Получим список учетных записей для которых включено автополучение
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЕстьОшибки = Ложь;
		СтрОшибка = "";
		Получено = 0;
		
		ПолучитьПисьма(Выборка.Ссылка, ЕстьОшибки, СтрОшибка, Получено);
		
	КонецЦикла;

	Возврат;
	
КонецПроцедуры

// Выполняет получение электронной почты по доступным для пользователя учетным записям.
//
// Параметры
//  Получено  	 			- Число - в данный параметр будет возвращено количество полученных писем
//  ДоступноУчетныхЗаписей  - Число - в данный параметр будет возвращено количество доступных пользователю учетных записей
//  масОшибок  				- Массив - в данных массив будут помещены ошибки, если таковые возникнут.
//
Процедура ЗагрузитьПочтуПользователя(ПолученоПисем, ДоступноУчетныхЗаписей, масОшибок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ПолученоПисем = 0;
	ДоступноУчетныхЗаписей = Выборка.Количество();
	Если ДоступноУчетныхЗаписей = 0 Тогда
		масОшибок.Добавить(НСтр("ru='Нет доступных учетных записей!'"));
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ЕстьОшибки = Ложь;
		СтрОшибка = "";
		Получено = 0;
		
		ПолучитьПисьма(Выборка.Ссылка, ЕстьОшибки, СтрОшибка, Получено);
		
		ПолученоПисем = ПолученоПисем + Получено;
		Если ЕстьОшибки Тогда
			масОшибок.Добавить(СтрОшибка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает и добавляет в список значений доступные пользователю учетные записи электронной почты
//
// Параметры
//  СписокВыбора  - СписокЗначений - в него будут добавлены доступные пользователю записи электронной почты.
//
Процедура ПолучитьДоступныеУчетныеЗаписиДляОтправки(СписокВыбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка, ПолучитьПредставлениеАдресата(Выборка.ИмяПользователя, Выборка.АдресЭлектроннойПочты, ""));
	КонецЦикла;
	
КонецПроцедуры

// Получает учетную запись электронной почты используемую для отправки по умолчанию
//
// Возвращаемое значение:
//   Справочник.УчетныеЗаписиЭлектроннойПочты   
//
Функция ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

