
// Функция СвойстваВидовДоступа возвращает таблицу свойств видов доступа, 
// созданную на основе данных, заполняемых в процедуре, подготовленной прикладным разработчиком:
// УправлениеДоступомПереопределяемый.ЗаполнитьСвойстваВидаДоступа(ВидДоступа).
// 
// Возвращаемое значение:
//  ТаблицаЗначений с полями:
//    ВидДоступа                                    - ПланВидовХарактеристикСсылка.ВидыДоступа,
//    ВидДоступаИспользуется                        - Булево (начальное значение Истина),
//    Таблицы                                       - Массив имен таблиц значений доступа (в формате функции ПолноеИмя() объекта метаданных),
//    ВидДоступаЧерезПраваПоЗначениямДоступа        - Булево (начальное значение Ложь),
//    ВидДоступаЕдинственныйДляТипаЗначенияДоступа  - Булево (начальное значение Истина),
//    ВидДоступаБезГруппЗначенияДоступа             - Булево (начальное значение Истина),
//    ВидДоступаСОднойГруппойЗначенияДоступа        - Булево (начальное значение Истина).
//
Функция СвойстваВидовДоступа() Экспорт
	
	СвойстваВидовДоступа = Новый ТаблицаЗначений;
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступа",                                   Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаИспользуется",                       Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("Таблицы",                                      Новый ОписаниеТипов("Массив"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаЧерезПраваПоЗначениямДоступа",       Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаЕдинственныйДляТипаЗначенияДоступа", Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаБезГруппЗначенияДоступа",            Новый ОписаниеТипов("Булево"));
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаСОднойГруппойЗначенияДоступа",       Новый ОписаниеТипов("Булево"));
	// Свойство для управления интерфейсом и отказом записи профиля групп доступа.
	СвойстваВидовДоступа.Колонки.Добавить("ВидДоступаИспользуетсяВсегда",                 Новый ОписаниеТипов("Булево"));

	НачальныеЗначенияСвойств = Новый Структура;
	НачальныеЗначенияСвойств.Вставить("Таблицы", Новый Массив);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаИспользуется",                       Истина);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаЧерезПраваПоЗначениямДоступа",       Ложь);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаЕдинственныйДляТипаЗначенияДоступа", Истина);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаБезГруппЗначенияДоступа",            Истина);
	НачальныеЗначенияСвойств.Вставить("ВидДоступаСОднойГруппойЗначенияДоступа",       Истина);
	
	// Подготовка свойств всех видов доступа.
	ЗапросВидовДоступа = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка КАК ВидДоступа
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный");
	Выборка = ЗапросВидовДоступа.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Свойства = СвойстваВидовДоступа.Добавить();
		ЗаполнитьЗначенияСвойств(Свойства, НачальныеЗначенияСвойств);
		Свойства.ВидДоступа = Выборка.ВидДоступа;
		Свойства.Таблицы    = Новый Массив;
		
		Если Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения ИЛИ
		     Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления ИЛИ
		     Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения Тогда
			
			Свойства.ВидДоступаИспользуетсяВсегда = Истина;
		Иначе
			УправлениеДоступомПереопределяемый.ЗаполнитьСвойстваВидаДоступа(Свойства);
			
			// Неизменяемые свойства вида доступа Пользователи и вида доступа ВнешниеПользователи
			Если Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Пользователи Тогда
				Если Свойства.Таблицы.Найти("Справочник.Пользователи") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.Пользователи");
				КонецЕсли;
				Если Свойства.Таблицы.Найти("Справочник.ГруппыПользователей") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.ГруппыПользователей");
				КонецЕсли;
				Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = Истина;
				Свойства.ВидДоступаБезГруппЗначенияДоступа            = Ложь;
				Свойства.ВидДоступаСОднойГруппойЗначенияДоступа       = Ложь;
				
			ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи Тогда
				Если Свойства.Таблицы.Найти("Справочник.ВнешниеПользователи") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.ВнешниеПользователи");
				КонецЕсли;
				Если Свойства.Таблицы.Найти("Справочник.ГруппыВнешнихПользователей") = Неопределено Тогда
					Свойства.Таблицы.Добавить("Справочник.ГруппыВнешнихПользователей");
				КонецЕсли;
				Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа = Истина;
				Свойства.ВидДоступаБезГруппЗначенияДоступа            = Ложь;
				Свойства.ВидДоступаСОднойГруппойЗначенияДоступа       = Ложь;
			КонецЕсли;
			
			Свойства.ВидДоступаИспользуетсяВсегда = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СвойстваВидовДоступа;
	
КонецФункции

// Функция ВозможныеПраваПоЗначениямДоступа возвращает таблицу описаний возможных прав значений доступа,
// созданную с использованием процедуры, подготовленной прикладным разработчиком:
// УправлениеДоступомПереопределяемый.ЗаполнитьВозможныеПраваПоЗначениямДоступа().
//
// Описание возможных прав - это описание связей:
// <владелец прав> - <право> - <таблица прав> - <ограничиваемые права таблицы>,
// где
//   владелец прав - это таблица, по элементам которой записываются назначенные права,
//           например, Справочник.ПапкиФайлов;
//   право - это набор из ограничиваемых, интерактивных, дополнительных прав,
//           например, ДобавлениеИзменениеПапокИФайлов, ЭлектроннаяПодписьФайлов;
//   таблица прав - это таблица, для которой предназначены ограничиваемые права,
//           например Справочник.ПапкиФайлов, Справочник.Файлы;
//   ограничиваемые права - это права чтение, добавление, изменение, удаление к объектам метаданных.
//
//  <Таблиц прав> и <ограничиваемых прав> может не быть, например, в случае дополнительных прав ПометкаУдаления.
// Эти связи требуются при заполнения данных для стандартных шаблонов ограничения доступа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений
//   ВладелецПрав - Строка - полное имя таблицы значения доступа,
//   Имя         - Строка - идентификатор права, например, ЧтениеПапокИФайлов,
//                 право с имененем "УправлениеПравами" должно быть обязательно определено для общей формы настройки прав
//                 "Права доступа", "Управление правами" - это право на изменение прав по владельцу прав,
//                 которое проверяется при открытии ОбщаяФорма.ПраваПоЗначениямДоступа;
//   Синоним     - Строка - полное наименование права, например, "Чтение папок и файлов";
//   Сокращение  - Строка - краткое наименование права среди прав одного владельца, например "Чтение";
//   Заголовок   - Строка - заголовок права в форме "Права по значениям доступа", например "Чт";
//   НачальноеЗначение - Булево - начальное значение флажка права при добавлении новой строки в форме "Права по значениям доступа";
//   ТребуемыеПрава - Массив строк - имена прав, требуемых для от этого права,
//                 например, право "ДобавлениеПапокИФайлов" требует право "ЧтениеПапокИФайлов" и
//                 право "ИзменениеПапокИФайлов"
//   ТребуемаяРоль - Массив строк - содержащий роли, хотя бы одна из которых, обязательна для работы права,
//                 используется в функции УправлениеДоступом.ЕстьПраво();
//   ЧтениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право чтения
//                 (требуется для работы шаблонов ограничения доступа);
//   ДобавлениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право добавления
//                 (требуется для работы шаблонов ограничения доступа);
//   ИзменениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право изменения
//                 (требуется для работы шаблонов ограничения доступа);
//   УдалениеВТаблицах - Массив строк - полные имена таблиц, для которых устанавливается право удаления
//                 (требуется для работы шаблонов ограничения доступа);
//
Функция ВозможныеПраваПоЗначениямДоступа() Экспорт
	
	ВозможныеПрава = Новый ТаблицаЗначений();
	ВозможныеПрава.Колонки.Добавить("ВладелецПрав",        Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВозможныеПрава.Колонки.Добавить("Имя",                 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(60)));
	ВозможныеПрава.Колонки.Добавить("Синоним",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВозможныеПрава.Колонки.Добавить("Сокращение",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВозможныеПрава.Колонки.Добавить("Заголовок",           Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ВозможныеПрава.Колонки.Добавить("НачальноеЗначение",   Новый ОписаниеТипов("Булево"));
	ВозможныеПрава.Колонки.Добавить("ТребуемыеПрава",      Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ТребуемаяРоль",       Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ЧтениеВТаблицах",     Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ДобавлениеВТаблицах", Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("ИзменениеВТаблицах",  Новый ОписаниеТипов("Массив"));
	ВозможныеПрава.Колонки.Добавить("УдалениеВТаблицах",   Новый ОписаниеТипов("Массив"));
	
	УправлениеДоступомПереопределяемый.ЗаполнитьВозможныеПраваПоЗначениямДоступа(ВозможныеПрава);
	
	Возврат ВозможныеПрава;
	
КонецФункции

// Функция ОграничиваемыеПраваОбъектовМетаданныхРолей возвращает таблицу,
// содержащую права Чтение, Добавление, Изменение, Удаление
// доступа, заданные в ролях по все объектам метаданных.
//  Таблица применяется при обновлении таблиц ролей в профилях групп доступа
// и при получении списка профилей групп доступа, в которых требуется
// выполнить обновление этих таблиц.
//
Функция ОграничиваемыеПраваОбъектовМетаданныхРолей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка структуры имен коллекций метаданных, которые нужно проанализировать
	// на доступность ролям группы доступа.
	ИменаКоллекцийОбъектовМетаданных = Новый Структура;
	ИменаКоллекцийОбъектовМетаданных.Вставить("Справочники",             "Справочник");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Документы",               "Документ");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ЖурналыДокументов",       "ЖурналДокументов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыСчетов",             "ПланСчетов");
	ИменаКоллекцийОбъектовМетаданных.Вставить("ПланыВидовРасчета",       "ПланВидовРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыСведений",        "РегистрСведений");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыНакопления",      "РегистрНакопления");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыБухгалтерии",     "РегистрБухгалтерии");
	ИменаКоллекцийОбъектовМетаданных.Вставить("РегистрыРасчета",         "РегистрРасчета");
	ИменаКоллекцийОбъектовМетаданных.Вставить("БизнесПроцессы",          "БизнесПроцесс");
	ИменаКоллекцийОбъектовМетаданных.Вставить("Задачи",                  "Задача");
	// Подготовка структуры наличия права добавления у коллекций метаданных.
	ПравоДобавления = Новый Структура;
	ПравоДобавления.Вставить("Справочники",             Истина);
	ПравоДобавления.Вставить("Документы",               Истина);
	ПравоДобавления.Вставить("ЖурналыДокументов",       Ложь);
	ПравоДобавления.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоДобавления.Вставить("ПланыСчетов",             Истина);
	ПравоДобавления.Вставить("ПланыВидовРасчета",       Истина);
	ПравоДобавления.Вставить("РегистрыСведений",        Ложь);
	ПравоДобавления.Вставить("РегистрыНакопления",      Ложь);
	ПравоДобавления.Вставить("РегистрыБухгалтерии",     Ложь);
	ПравоДобавления.Вставить("РегистрыРасчета",         Ложь);
	ПравоДобавления.Вставить("БизнесПроцессы",          Истина);
	ПравоДобавления.Вставить("Задачи",                  Истина);
	// Подготовка структуры наличия права изменения у коллекций метаданных.
	ПравоИзменения = Новый Структура;
	ПравоИзменения.Вставить("Справочники",             Истина);
	ПравоИзменения.Вставить("Документы",               Истина);
	ПравоИзменения.Вставить("ЖурналыДокументов",       Ложь);
	ПравоИзменения.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоИзменения.Вставить("ПланыСчетов",             Истина);
	ПравоИзменения.Вставить("ПланыВидовРасчета",       Истина);
	ПравоИзменения.Вставить("РегистрыСведений",        Истина);
	ПравоИзменения.Вставить("РегистрыНакопления",      Истина);
	ПравоИзменения.Вставить("РегистрыБухгалтерии",     Истина);
	ПравоИзменения.Вставить("РегистрыРасчета",         Истина);
	ПравоИзменения.Вставить("БизнесПроцессы",          Истина);
	ПравоИзменения.Вставить("Задачи",                  Истина);
	// Подготовка структуры наличия права удаления у коллекций метаданных.
	ПравоУдаления = Новый Структура;
	ПравоУдаления.Вставить("Справочники",             Истина);
	ПравоУдаления.Вставить("Документы",               Истина);
	ПравоУдаления.Вставить("ЖурналыДокументов",       Ложь);
	ПравоУдаления.Вставить("ПланыВидовХарактеристик", Истина);
	ПравоУдаления.Вставить("ПланыСчетов",             Истина);
	ПравоУдаления.Вставить("ПланыВидовРасчета",       Истина);
	ПравоУдаления.Вставить("РегистрыСведений",        Ложь);
	ПравоУдаления.Вставить("РегистрыНакопления",      Ложь);
	ПравоУдаления.Вставить("РегистрыБухгалтерии",     Ложь);
	ПравоУдаления.Вставить("РегистрыРасчета",         Ложь);
	ПравоУдаления.Вставить("БизнесПроцессы",          Истина);
	ПравоУдаления.Вставить("Задачи",                  Истина);
	
	ПраваОМДРолей = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент().ТаблицыРолей.Выгрузить();
	
	Для каждого КлючИЗначение Из ИменаКоллекцийОбъектовМетаданных Цикл
		
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			
			Таблица = КлючИЗначение.Значение + "." + ОбъектМетаданных.Имя;
			
			// Подготовка пустой ссылки, как идентификатора типа для таблиц объектов.
			Если ПравоДобавления[КлючИЗначение.Ключ] Тогда
				ОписаниеТипаТаблицы = Новый ОписаниеТипов(КлючИЗначение.Значение + "Ссылка." + ОбъектМетаданных.Имя);
				ТипТаблицы = ОписаниеТипаТаблицы.ПривестиЗначение(Неопределено);
			Иначе
				ТипТаблицы = Неопределено;
			КонецЕсли;
			
			Для каждого Роль Из Метаданные.Роли Цикл
				
				Если ПравоДоступа("Чтение", ОбъектМетаданных, Роль) Тогда
					
					НоваяСтрока = ПраваОМДРолей.Добавить();
					НоваяСтрока.Роль       = Роль.Имя;
					НоваяСтрока.Таблица    = Таблица;
					НоваяСтрока.Добавление = ПравоДобавления[КлючИЗначение.Ключ] И ПравоДоступа("Добавление", ОбъектМетаданных, Роль);
					НоваяСтрока.Изменение  = ПравоИзменения [КлючИЗначение.Ключ] И ПравоДоступа("Изменение",  ОбъектМетаданных, Роль);
					НоваяСтрока.Удаление   = ПравоУдаления  [КлючИЗначение.Ключ] И ПравоДоступа("Удаление",   ОбъектМетаданных, Роль);
					
					// Установка пустой ссылки, как идентификатора типа для таблиц объектов.
					НоваяСтрока.ТипТаблицы = ТипТаблицы;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;
	
	Возврат ПраваОМДРолей;
	
КонецФункции

// Функция ТипыСсылок возвращает таблицу,
// содержащую имена таблиц объектов метаданных и
// пустую ссылку, как "тип" этой таблицы.
//  Результат применяется для обновления табличной части
// ТипыСсылок профиля групп доступа Администратор.
//
Функция ТипыСсылок() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыСсылок = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент().ТипыСсылок.Выгрузить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить();
	Для каждого Тип Из ТипыСсылок.Колонки["ТипТаблицы"].ТипЗначения.Типы() Цикл
		МассивТипов[0] = Тип;
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Строка = ТипыСсылок.Добавить();
		Строка.ТипТаблицы = ОписаниеТипа.ПривестиЗначение(Неопределено);
		Строка.Таблица    = Метаданные.НайтиПоТипу(ТипЗнч(Строка.ТипТаблицы)).ПолноеИмя();
	КонецЦикла;
	
	ТипыСсылок.Свернуть("ТипТаблицы, Таблица");
	
	Возврат ТипыСсылок;
	
КонецФункции
