// Возвращает коэффициент, позволяющий вычислить количество секунд в каждом интервале.
//
Функция ПолучитьВременнойПараметрПоСтроке(ТипПериодаСтрока) Экспорт
	Если ТипПериодаСтрока = "Минута" Тогда 
		Возврат 60; 
	ИначеЕсли ТипПериодаСтрока = "Час" Тогда
		Возврат 3600;
	ИначеЕсли ТипПериодаСтрока = "День" Тогда 
		Возврат 3600*24;
	ИначеЕсли ТипПериодаСтрока = "Неделя" Тогда
		Возврат 3600*24*7; 
	КонецЕсли;			
КонецФункции

// Возвращает сохраненные параметры резервного копирования.
//
Функция ПолучитьПараметрыРезервногоКопирования() Экспорт
	Параметры = ХранилищеОбщихНастроек.Загрузить("ПараметрыРезервногоКопирования");
	Если Параметры = Неопределено ИЛИ Не Параметры.Свойство("ОтложенноеРезервноеКопирование") Тогда
		Параметры = НачальноеЗаполнениеНастроекРезервногоКопирования();	
	КонецЕсли;
	Возврат Параметры;
КонецФункции

// Сохраняет параметры резервного копирования.
//
Процедура УстановитьПараметрыРезервногоКопирования(СтруктураПараметров) Экспорт
	ХранилищеОбщихНастроек.Сохранить("ПараметрыРезервногоКопирования", , СтруктураПараметров);
КонецПроцедуры

// Проверяет, не настало ли время проводить автоматическое резервное копирование.
//
// Возвращаемое значение:
//   Булево - Истина, если настал момент проведения резервного копирования.
//
Функция НеобходимостьАвтоматическогоРезервногоКопирования() Экспорт
	Параметры = ПолучитьПараметрыРезервногоКопирования();
	Если Параметры = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Расписание = Параметры.РасписаниеКопирования;
	Если Расписание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаПроверки = ТекущаяДата();
	Если Параметры.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования > ДатаПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаНачалаПроверки = Параметры.ДатаПоследнегоРезервногоКопирования;
	РасписаниеЗначение = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Расписание);
	Возврат РасписаниеЗначение.ТребуетсяВыполнение(ДатаПроверки, ДатаНачалаПроверки);
КонецФункции

// Устанавливает значение ближайшего следующего автоматического резервного копирования в соответствии с расписанием.
//
Процедура УстановитьДатуСледующегоАвтоматическогоКопирования(НачальнаяНастройка = Ложь) Экспорт
	Параметры = ПолучитьПараметрыРезервногоКопирования();
	ТекущаяДата = ТекущаяДата();
	Если НачальнаяНастройка Тогда 
		Параметры.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования = ТекущаяДата;
		Параметры.ДатаПоследнегоРезервногоКопирования = ТекущаяДата;
	Иначе
		РасписаниеКопирования = Параметры.РасписаниеКопирования;
		ПериодПовтораВТечениеДня = РасписаниеКопирования.ПериодПовтораВТечениеДня;
		ПериодПовтораДней = РасписаниеКопирования.ПериодПовтораДней;
		
		Если ПериодПовтораВТечениеДня <> 0 Тогда
			Значение = ТекущаяДата + ПериодПовтораВТечениеДня;
		ИначеЕсли ПериодПовтораДней <> 0 Тогда
			Значение = ТекущаяДата + ПериодПовтораДней * ПолучитьВременнойПараметрПоСтроке("День");
		Иначе
			Значение = НачалоДня(КонецДня(ТекущаяДата) + 1);
		КонецЕсли;	
		Параметры.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования = Значение;
	КонецЕсли;
	УстановитьПараметрыРезервногоКопирования(Параметры);
КонецПроцедуры

// Возвращает значение настройки "Статус резервного копирования" в части результата.
// Используется при начале работы системы для показа формы с результатами резервного копирования.
//
Процедура УстановитьРезультатРезервногоКопирования() Экспорт
	СтруктураПараметров = ПолучитьПараметрыРезервногоКопирования();
	СтруктураПараметров.ПроведеноКопирование = Ложь;
	УстановитьПараметрыРезервногоКопирования(СтруктураПараметров);
КонецПроцедуры

// Устанавлиавает значение настройки "ДатаПоследнегоРезервногоКопирования".
//
// Параметры: 
//   ДатаКопирования - дата и время последнего резервного копирования.
//
Процедура УстановитьДатуПоследнегоКопирования(ДатаКопирования) Экспорт
	СтруктураПараметров = ПолучитьПараметрыРезервногоКопирования();
	СтруктураПараметров.ДатаПоследнегоРезервногоКопирования = ДатаКопирования;
	УстановитьПараметрыРезервногоКопирования(СтруктураПараметров);
КонецПроцедуры

// Возвращает количество работающих с ИБ пользователей.
//
// Параметры: ТолькоАдминистраторы - булево, 
// признак того, что учитываются только работающие пользователи с административными правами.
Функция ПолучитьКоличествоАктивныхПользователей(ТолькоАдминистраторы = Ложь) Экспорт
	СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();
	Если Не ТолькоАдминистраторы Тогда
		Возврат  СоединенияИнформационнойБазы.Количество();
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	КоличествоАдминистраторов = 0;
	Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл
		
		Если Соединение.Пользователь = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Соединение.Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			КоличествоАдминистраторов = КоличествоАдминистраторов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоАдминистраторов;
КонецФункции

// Устанавливает дату последнего оповещения пользователя.
//
// Параметры: 
//   ДатаНапоминания - дата и время последнего оповещения пользователя
//                     о необходимости проведения резервного копирования.
//
Процедура УстановитьДатуПоследнегоНапоминания(ДатаНапоминания) Экспорт
	ПараметрыОповещений = ПолучитьПараметрыРезервногоКопирования();
	ПараметрыОповещений.ДатаПоследнегоОповещения = ДатаНапоминания;
	
	Если ПараметрыОповещений.ПериодОповещения <>  0 Тогда
		ПараметрыОповещений.ПериодОповещения = 3600;
	КонецЕсли;
	
	УстановитьПараметрыРезервногоКопирования(ПараметрыОповещений);
КонецПроцедуры

// Останавливает механизм автоматического резервного копирования.
// Устанавливает пустое расписание и минимальную дату копирования в будущее время.
//
Процедура ОстановитьАвтоматическоеРезервноеКопирование(ПроводитьПриЗавершении = Ложь) Экспорт
	ПараметрыАвтоматическогоКопирования = ПолучитьПараметрыРезервногоКопирования();
	ПараметрыАвтоматическогоКопирования.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования = Дата(2100, 12, 31);
	ПараметрыАвтоматическогоКопирования.ПроводитьРезервноеКопированиеПриЗавершенииРаботы = ПроводитьПриЗавершении;
	УстановитьПараметрыРезервногоКопирования(ПараметрыАвтоматическогоКопирования);
КонецПроцедуры

Процедура УстановитьЗначениеНастройки(ИмяЭлемента, ЗначениеЭлемента)
	СтруктураНастроек = ПолучитьПараметрыРезервногоКопирования();
	СтруктураНастроек.Вставить(ИмяЭлемента, ЗначениеЭлемента);
	УстановитьПараметрыРезервногоКопирования(СтруктураНастроек);
КонецПроцедуры

// Возвращает структуру с параметрами для работы клиентского приложения.
// 
Функция ПолучитьНастройкиРезервногоКопирования() Экспорт
	Если Не ПолучитьДоступностьРолейОповещения() Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьПараметрыРезервногоКопирования();
	Если Не СтруктураВозврата.Свойство("ПервыйЗапуск") Тогда
		УстановитьЗначениеНастройки("ПервыйЗапуск", Истина);
	КонецЕсли;
	
	ПараметрОповещения = ПроверитьНеобходимостьОповещенияПользователя();
	Если ПараметрОповещения > 0 И ПараметрОповещения < 4 Тогда     
		УстановитьДатуПоследнегоНапоминания(ТекущаяДата());
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ПараметрОповещения", ПараметрОповещения);
	СтруктураВозврата.Вставить("ИнформацияОПользователе", ПолучитьИнформациюОПользователе());
	Если СтруктураВозврата.ПроведеноКопирование И СтруктураВозврата.РезультатКопирования  Тогда
		УстановитьДатуПоследнегоКопирования(ТекущаяДата());
	КонецЕсли;
	
	Если СтруктураВозврата.ПроведеноВосстановление Тогда
		ОбновитьРезультатВосстановления();
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ОбновитьРезультатВосстановления()
	СтруктураВозврата = ПолучитьПараметрыРезервногоКопирования();
	СтруктураВозврата.ПроведеноВосстановление = Ложь;
	УстановитьПараметрыРезервногоКопирования(СтруктураВозврата);
КонецПроцедуры

// Возвращает признак необходимости оповещения о резервном копировании.
//
Функция ПроверитьНеобходимостьОповещенияПользователя()
	Возврат ?(ПолучитьДоступностьРолейОповещения(), ПолучитьВариантОповещения(), 0);
КонецФункции

// Выбирает, какой вариант оповещения показать пользователю.
// Также вызывается из формы помощника резервного копирования для определения стартовой формы.
//
// Возвращаемое значение: 
//   Число - от 1 до 3:
//     1 - просрочено автоматическое резервное копирование.
//     2 - необходимо сделать напоминание о резервном копировании.
//     3 - резервное копирование еще не настроено.	
//
Функция ПолучитьВариантОповещения() Экспорт
	ПараметрВозврата = 0;
	ПараметрыОповещенияОКопировании = ПолучитьПараметрыРезервногоКопирования();
	ОповещатьОНеобходимостиРезервногоКопирования = ?((ТекущаяДата() >= (ПараметрыОповещенияОКопировании.ДатаПоследнегоОповещения + 
		?(ПараметрыОповещенияОКопировании.ПериодОповещения = Неопределено, 0, ПараметрыОповещенияОКопировании.ПериодОповещения)) 
		И ПараметрыОповещенияОКопировании.ПериодОповещения > 0), Истина, Ложь);
	
	Если ПараметрыОповещенияОКопировании.НастроеноПользователем Тогда
		Просрочено = НеобходимостьАвтоматическогоРезервногоКопирования();
		Если Просрочено Тогда
			ПараметрВозврата = 1;
		Иначе			
			Если ОповещатьОНеобходимостиРезервногоКопирования Тогда
				ПараметрВозврата = 2;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОповещатьОНеобходимостиРезервногоКопирования ИЛИ ПараметрыОповещенияОКопировании.ПериодОповещения = 3600 Тогда
			ПараметрВозврата = 3;  
		Иначе
			ПараметрВозврата = 4;
		КонецЕсли;		
	КонецЕсли;
	Возврат ПараметрВозврата;
КонецФункции

// Выполняет начальное заполнение настроек автоматического резервного копирования.
//
Функция НачальноеЗаполнениеНастроекРезервногоКопирования() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ПериодОповещения", 24*3600); // раз в сутки
	Параметры.Вставить("ДатаПоследнегоОповещения", ТекущаяДата());
	Параметры.Вставить("НастроеноПользователем", Ложь);
	Параметры.Вставить("ДатаПоследнегоРезервногоКопирования", ТекущаяДата());
	Параметры.Вставить("РасписаниеКопирования", ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Новый РасписаниеРегламентногоЗадания));
	Параметры.Вставить("КаталогХраненияРезервныхКопий", "");
	Параметры.Вставить("МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования", Дата(2100, 12, 31));
	Параметры.Вставить("ПроизводитьУдаление", Истина);
	Параметры.Вставить("УдалятьПоПериоду",  Истина);
	Параметры.Вставить("ЗначениеПараметра", ДобавитьМесяц(ТекущаяДата(), 6) - ТекущаяДата());
	Параметры.Вставить("ПроведеноКопирование", Ложь);
	Параметры.Вставить("ПроведеноВосстановление", Ложь);
	Параметры.Вставить("РезультатКопирования", Неопределено);
	Параметры.Вставить("ИмяФайлаРезервнойКопии", "");
	Параметры.Вставить("ВыборПунктаНастройки", 3);
	Параметры.Вставить("ПроводитьРезервноеКопированиеПриЗавершенииРаботы", Ложь);
	Параметры.Вставить("ПервыйЗапуск", Истина);
	
	// Параметры обработчиков ожидания.
	Параметры.Вставить("ЕжечасноеОповещение", Ложь);
	Параметры.Вставить("АвтоматическоеРезервноеКопирование", Ложь);
	Параметры.Вставить("ОтложенноеРезервноеКопирование", Ложь);
	
	УстановитьПараметрыРезервногоКопирования(Параметры);
	Возврат Параметры;
КонецФункции

// Возвращает признак доступности ролей "Полные права", "Получатель напоминания о резервном копировании"
// или ПолноправныйПользовательИБ().
Функция ПолучитьДоступностьРолейОповещения() Экспорт
	Возврат РольДоступна("ПолучениеНапоминанийОРезервномКопировании") 
		ИЛИ РольДоступна("ПолныеПрава") 
		ИЛИ Пользователи.ЭтоПолноправныйПользовательИБ();
КонецФункции

// Останавливает оповещения о резервном копировании.
Процедура ОстановитьСервисОповещения() Экспорт
	Настройка = ПолучитьПараметрыРезервногоКопирования();
	Настройка.ПериодОповещения = 0;
	Настройка.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования =  Дата(2100, 12, 31);
	Настройка.НастроеноПользователем = Истина;
	УстановитьПараметрыРезервногоКопирования(Настройка);
КонецПроцедуры

// Возвращает информационную структуру, содержащую информацию о текущем пользователе системы.
Функция ПолучитьИнформациюОПользователе()
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат Новый Структура("Имя, ПолноеИмя, ПарольУстановлен, АутентификацияСтандартная, АутентификацияОС",
		ТекущийПользователь.Имя, ТекущийПользователь.ПолноеИмя, ТекущийПользователь.ПарольУстановлен,
		ТекущийПользователь.АутентификацияСтандартная, ТекущийПользователь.АутентификацияОС);
КонецФункции

// Устанавливает элемент "Код выбора" настроек резервного копирования.
//
// Параметры:  КодПереключателя - число.
Процедура УстановитьКодВыбора(КодПереключателя) Экспорт
	Структура = ПолучитьПараметрыРезервногоКопирования();
	Структура.ВыборПунктаНастройки = КодПереключателя;
	
	Если КодПереключателя = 3 Тогда
		Структура.НастроеноПользователем = Ложь;
	КонецЕсли;
	
	УстановитьПараметрыРезервногоКопирования(Структура);
КонецПроцедуры

// Процедура, вызываемая из скрипта через com-соединение.
// Записывает результат проведенного копирования в настройки.
Процедура ЗавершитьРезервноеКопирование(Результат, ИмяФайлаРезервнойКопии =  "") Экспорт
	СтруктураРезультата = ПолучитьПараметрыРезервногоКопирования();
	СтруктураРезультата.ПроведеноКопирование = Истина;
	СтруктураРезультата.РезультатКопирования = Результат;
	СтруктураРезультата.ИмяФайлаРезервнойКопии = ИмяФайлаРезервнойКопии;
	СтруктураРезультата.ПервыйЗапуск = Ложь;
	УстановитьПараметрыРезервногоКопирования(СтруктураРезультата);
КонецПроцедуры

// Вызывается из скрипта через com-соединение для
// записи результата проведенного восстановления ИБ в настройки.
//
Процедура ЗавершитьВосстановление(Результат) Экспорт
	СтруктураРезультата = ПолучитьПараметрыРезервногоКопирования();
	СтруктураРезультата.ПроведеноВосстановление = Истина;
	УстановитьПараметрыРезервногоКопирования(СтруктураРезультата);
КонецПроцедуры

// Возвращает настройки обработчиков ожидания.
//
Функция ПолучитьНастройкиОбработчиковОжидания() Экспорт
	СтруктураВозврата = Новый Структура;
	ПараметрыКопирования = ПолучитьПараметрыРезервногоКопирования();
	ПроводитьАвтоматическоеРезервноеКопирование = НеобходимостьАвтоматическогоРезервногоКопирования();
	
    СтруктураВозврата.Вставить("ПараметрОповещения", ПараметрыКопирования.ПараметрОповещения);
	СтруктураВозврата.Вставить("ОтложенноеРезервноеКопирование", ПараметрыКопирования.ОтложенноеРезервноеКопирование);
	СтруктураВозврата.Вставить("ПроводитьАвтоматическоеРезервноеКопирование", ПроводитьАвтоматическоеРезервноеКопирование И ПараметрыКопирования.АвтоматическоеРезервноеКопирование);
	СтруктураВозврата.Вставить("КоличествоПользователей", ПолучитьКоличествоАктивныхПользователей());
	СтруктураВозврата.Вставить("ПараметрыКопирования", ПараметрыКопирования);
	Возврат СтруктураВозврата;
КонецФункции
