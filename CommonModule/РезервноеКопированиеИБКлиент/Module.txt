// Процедура проверяет необходимость проведения резервного копирования
// или показа пользователю необходимого информационного сообщения.
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПараметрыНастроек = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ;		
	
	// настройки не определены только в том случае, если у пользователя нет доступа к подсистеме
	Если ПараметрыНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещатьОРезервномКопированииПриЗавершенииСеанса = Ложь;
	ДатаОтложенногоРезервногоКопирования = Дата('00010101');
	ПодключитьОбработчикОжидания("ОбработчикДействийРезервногоКопирования", 30);
	ПараметрВозврата = ПараметрыНастроек.ПараметрОповещения;
	
	Если ПараметрВозврата > 0 И ПараметрВозврата < 4 Тогда     
		ОповеститьПользователяОРезервномКопировании(ПараметрВозврата);
	КонецЕсли;
	
	ПроверитьРезервноеКопированиеИБ(ПараметрыНастроек);
	
	Если ПараметрыНастроек.ПроведеноВосстановление Тогда
		ТекстОповещения = НСтр("ru = 'Восстановление данных проведено успешно'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные восстановлены'"), , ТекстОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет настройки резервного копирования
// и, в случае необходимости, выдает соответствующее сообщение пользователю.
Функция ПередЗавершениемРаботыСистемы()  Экспорт
	
	Если Не РезервноеКопированиеИБСервер.ПолучитьДоступностьРолейОповещения() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	ОповещатьПостоянно = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ.ПроводитьРезервноеКопированиеПриЗавершенииРаботы;
	КоличествоАктивныхАдминистраторов = РезервноеКопированиеИБСервер.ПолучитьКоличествоАктивныхПользователей(Истина);
	
	Если ОповещатьОРезервномКопированииПриЗавершенииСеанса ИЛИ (ОповещатьПостоянно И КоличествоАктивныхАдминистраторов = 1) Тогда
		
		ТекстВопроса = НСтр("ru = '	Выполнить резервное копирование информационной базы перед завершением работы программы?
		|
		|	- Нажмите ""Да"", чтобы выполнить резервное копирование прямо сейчас.
		|	- Нажмите ""Нет"", чтобы отказаться от резервного копирования и закрыть программу.
		|	- Нажмите ""Отмена"" чтобы продолжить работу с программой'");	
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ВыполнитьКопированиеПередЗавершениемРаботыСистемы();
			Отказ = Истина;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ДатаОтложенногоРезервногоКопирования > ТекущаяДата() Тогда
		
		ТекстВопроса = НСтр("ru = '	Резервное копирование запланирована на %1. 
		| 	 Для его выполнения требуется оставить компьютер включенным. Вы хотите провести резервное копирование в установленное время?
		|
		|	- Нажмите ""Да"", чтобы оставить программу работающей и выполнить резервное копирование в %1.
		|	- Нажмите ""Нет"", чтобы выполнить резервное копирование прямо сейчас и завершить работу.
		|	- Нажмите ""Отмена"", чтобы отказаться от резервного копирования и завершить работу.'");
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ДатаОтложенногоРезервногоКопирования);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ТекстВопроса, МассивПараметров);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			
			ДатаОтложенногоРезервногоКопирования = ТекущаяДата()-1;		
			ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница, ЗаголовокНадписи", 
			1, "СтраницаИнформацииИВыполненияРезервногоКопирования", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива("Резервное копирование будет произведено автоматически не позднее %1", МассивПараметров));
			
			ФормаОбработки = ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
			Отказ = Истина;
		КонецЕсли;			
	КонецЕсли;
	Возврат Отказ;
КонецФункции

// Процедура запускает выполнение резервного копирования 
// при завершении работы системы при выборе соответствующего 
// пункта настройки помощника.
Процедура ВыполнитьКопированиеПередЗавершениемРаботыСистемы() Экспорт
	ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница", 2, "СтраницаИнформацииИВыполненияРезервногоКопирования");
	ФормаОбработки = ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
КонецПроцедуры

// Запускает резервное копирование по расписанию. 
// Состоит из двух этапов: 1 - очистка каталога с копиями, 2 - непосредственно резервное копирование.
Процедура ПровестиРезервноеКопирование() Экспорт
	// Очистка архива с копиями.
	НастройкиУдаления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыРезервногоКопированияИБ;
	КаталогХранения = НастройкиУдаления.КаталогХраненияРезервныхКопий;
	
	Если НастройкиУдаления.ПроизводитьУдаление И КаталогХранения <> Неопределено Тогда
		
		Попытка
			Файл  = Новый Файл(КаталогХранения);
			Если  НЕ Файл.ЭтоКаталог() Тогда
				Возврат;
			КонецЕсли;
			
			МассивФайлов = НайтиФайлы(КаталогХранения, "*", Истина);
			СписокУдаляемыхФайлов = Новый СписокЗначений;
			
			Если НастройкиУдаления.УдалятьПоПериоду Тогда
				Для Каждого ЭлементФайл Из МассивФайлов Цикл					
					ПараметрУдаления = ?((ТекущаяДата() - НастройкиУдаления.ЗначениеПараметра) > ЭлементФайл.ПолучитьВремяИзменения(), Истина, Ложь);
					Если ПараметрУдаления Тогда
						СписокУдаляемыхФайлов.Добавить(ЭлементФайл);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли МассивФайлов.Количество() < НастройкиУдаления.ЗначениеПараметра Тогда				
				Возврат;
			Иначе
				СписокФайлов = Новый СписокЗначений;
				СписокФайлов.ЗагрузитьЗначения(МассивФайлов);
				
				Для Каждого Файл Из СписокФайлов Цикл
					Файл.Значение = Файл.Значение.ПолучитьВремяИзменения();
				КонецЦикла;
				
				СписокФайлов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				Индекс = НастройкиУдаления.ЗначениеПараметра;
				ДатаПоследнегоАрхива = СписокФайлов[Индекс-1].Значение;
				
				Для Каждого ЭлементФайл ИЗ МассивФайлов Цикл
					
					Если ЭлементФайл.ПолучитьВремяИзменения() < ДатаПоследнегоАрхива Тогда
						СписокУдаляемыхФайлов.Добавить(ЭлементФайл);
					КонецЕсли;
					
				КонецЦикла;								
				
			КонецЕсли;
			
			Для Каждого УдаляемыйФайл Из СписокУдаляемыхФайлов Цикл
				УдалитьФайлы(УдаляемыйФайл.Значение.ПолноеИмя);
			КонецЦикла;
			
		Исключение
			
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),"Ошибка",
			НСтр("ru = 'Не удалось провести очистку каталога с резервными копиями'"),,Истина);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// резервное копирование
	РезервноеКопированиеИБСервер.УстановитьДатуСледующегоАвтоматическогоКопирования();
	ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница", 2, "СтраницаИнформацииИВыполненияРезервногоКопирования");
	ФормаОбработки = ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
	
КонецПроцедуры

// При старте системы проверяет, первый ли это запуск после проведения резервного копирования. 
// Если да - выводит форму обработчика с результатами резервного копирования.
Процедура ПроверитьРезервноеКопированиеИБ(ПараметрыРезервногоКопирования) Экспорт
	
	ЗначениеНастройкиРезервногоКопирования = ПараметрыРезервногоКопирования;
	Если Не ЗначениеНастройкиРезервногоКопирования.Свойство("АвтоматическоеРезервноеКопирование") Тогда
		РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(Неопределено);
		СтрокаПредупреждения = Нстр("ru = 'Изменилась структура настроек резервного копирования. Необходимо перезапустить программу'");
		Предупреждение(СтрокаПредупреждения);
		ЗавершитьРаботуСистемы();
		Возврат;
	КонецЕсли;
	
	ЗначениеНастройкиРезервногоКопирования.АвтоматическоеРезервноеКопирование = Истина;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(ЗначениеНастройкиРезервногоКопирования);
	
	Если ЗначениеНастройкиРезервногоКопирования.ПроведеноКопирование Тогда	
		
		ПараметрыФормы = Новый Структура("ТипВызова", 2);
		НазваниеТекущейСтраницы = "";                 
		
		Если ЗначениеНастройкиРезервногоКопирования.РезультатКопирования Тогда
			НазваниеТекущейСтраницы = "СтраницаУспешногоВыполненияКопирования";
		Иначе
			НазваниеТекущейСтраницы = "СтраницаОшибокПриКопировании";
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ТекущаяСтраница", НазваниеТекущейСтраницы);
		ПараметрыФормы.Вставить("ТекстПути",  ЗначениеНастройкиРезервногоКопирования.ИмяФайлаРезервнойКопии);
		ФормаОповещения= ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
		
	КонецЕсли;
КонецПроцедуры

// По результатам анализа параметров резервного копирования выдает соответствующее оповещение.
// Параметры : ЗначениеПроверки - число, результат проверки на посылку оповещения
Процедура ОповеститьПользователяОРезервномКопировании(ЗначениеПроверки) Экспорт
	
	ТекстПояснения = "";
	Если ЗначениеПроверки = 1 Тогда
		
		ТекстПояснения = НСтр("ru = 'Автоматическое резервное копирование не было выполнено.'"); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование'"),"e1cib/app/Обработка.РезервноеКопированиеИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		
	ИначеЕсли ЗначениеПроверки = 2 Тогда
		
		НастройкаОповещения = РезервноеКопированиеИБСервер.ПолучитьПараметрыРезервногоКопирования().ДатаПоследнегоРезервногоКопирования;
		ТекстПояснения = НСтр("ru = 'Резервное копирование не выполнялось с %1.'");
		
		МассивЗамены = Новый Массив;
		МассивЗамены.Добавить(НастройкаОповещения);
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ТекстПояснения, МассивЗамены);
		
		ТекстПояснения = СтрЗаменить(ТекстПояснения,"%НастройкаОповещения%",НастройкаОповещения);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование'"),"e1cib/app/Обработка.РезервноеКопированиеИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		
	ИначеЕсли ЗначениеПроверки  = 3 Тогда
		
		ТекстПояснения = НСтр("ru = 'Рекомендуется настроить резервное копирование информационной базы.'"); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование'"),"e1cib/app/Обработка.НастройкаРезервногоКопированияИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		
	КонецЕсли;	
КонецПроцедуры

// Подключает обработчик ожидания начала резервного копирования.
Процедура ПодключитьОжиданиеРезервногоКопирования() Экспорт
	ПараметрыКопирования = РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования();
	ПараметрыКопирования.ОтложенноеРезервноеКопирование = Истина;
	РезервноеКопированиеИБСервер.УстановитьПараметрыРезервногоКопирования(ПараметрыКопирования);
КонецПроцедуры

// Получает каталог файла по его имени
//
// Параметры: ПутьКФайлу - Строка, путь к указанному файлу.
//
// Возвращаемое значение: Строка, путь к каталогу с указанным файлом.
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу) Экспорт
	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "\"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;
	Возврат 0;
КонецФункции

// Возвращает значение глобальной переменной модуля приложения.
// Используется для обработчиков ожидания из глобального клиентского модуля.
Функция ПолучитьДатуКопирования() Экспорт
	Возврат ДатаОтложенногоРезервногоКопирования;
КонецФункции

// Возвращает тип события журнала регистрации для данной подсистемы.
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Резервное копирование информационной базы'");
КонецФункции

// Возвращает параметры скрипта резервного копирования.
//
Функция КлиентскиеПараметрыРезервногоКопирования() Экспорт
	#Если НЕ ВебКлиент Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ДатаВремяОбновленияУстановлена", Ложь);
		
		// Интернет
		СтруктураПараметров.Вставить("ИмяZipФайлаСпискаШаблонов", "v8upd11.zip");
		СтруктураПараметров.Вставить("ИмяФайлаСпискаШаблонов", "v8cscdsc.xml");
		СтруктураПараметров.Вставить("ИмяФайлаОписанияОбновления", "news.htm");
		СтруктураПараметров.Вставить("ИмяФайлаПорядкаОбновления", "update.htm");
		
		// Имена служебных файлов
		#Если ТонкийКлиент Тогда
			СтруктураПараметров.Вставить("ИмяФайлаПрограммы", "1cv8c.exe");
		#КонецЕсли
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СтруктураПараметров.Вставить("ИмяФайлаПрограммы", "1cv8.exe");
		#КонецЕсли
		
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			СтруктураПараметров.Вставить("ИмяФайлаПрограммы", "1cv8.exe");
		#КонецЕсли
		
		СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации", НСтр("ru = 'Резервное копирование ИБ'"));
		
		// Определение каталога временных файлов.
		СтруктураПараметров.Вставить("КаталогВременныхФайловОбновления"	, КаталогВременныхФайлов() + "1Cv8Backup." + Формат(ТекущаяДата(), "ДФ=ггММддЧЧммсс") + "\");
		
		Возврат СтруктураПараметров;
	#КонецЕсли
КонецФункции
