////////////////////////////////////////////////////////////////////////////////
//  ОСНОВНЫЕ МЕТОДЫ

// Формирует подпись объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектСсылкаДляПодписи  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанныеФайла  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//  ВерсияАлгоритмаГенерацииФайла  - Число - версия алгоритма генерации файла для подписи
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭЦП
Функция СформироватьПодпись(МенеджерКриптографии, ОбъектСсылкаДляПодписи, 
		ДвоичныеДанныеФайла, СтруктураПараметровПодписи, ВерсияАлгоритмаГенерацииФайла) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	ПодключитьРасширениеРаботыСКриптографией();
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = ТекущаяДата();
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанныеФайла, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	
	ДанныеДляЗанесенияВРегистр = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ВерсияАлгоритмаГенерацииФайла",
		ОбъектСсылкаДляПодписи, 
		НоваяПодписьДвоичныеДанные, 
		Отпечаток, 
		ДатаПодписи, 
		СтруктураПараметровПодписи.Комментарий, 
		"", // ИмяФайлаПодписи 
		КомуВыданСертификат,
		ВерсияАлгоритмаГенерацииФайла);
		
	Возврат ДанныеДляЗанесенияВРегистр;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//  ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ

// По окончании подписания нотифицирует о подписании
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
Процедура ИнформироватьОПодписанииОбъекта(ОбъектСсылка) Экспорт
	
	ОповеститьОбИзменении(ОбъектСсылка);	

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		ОбъектСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры	

// добавляет ЭЦП из файла
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
//  МассивФайловПодписей  - Массив структур - массив структур (ПутьКФайлу, Комментарий)
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  ВладелецФайла  - любая ссылка - значение реквизита ВладелецФайла у ОбъектСсылка
Процедура ДобавитьЭЦП(ОбъектСсылка, МассивФайловПодписей, УникальныйИдентификатор, ВладелецФайла) Экспорт
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ДатаПодписи = ТекущаяДата();
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивФайловПодписей Цикл
		
		ИмяФайлаСПутем = ОбъектДляПодписи.ПутьКФайлу;
		ОбъектСсылкаДляПодписи = ОбъектСсылка;
		
		НоваяПодписьДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
		
		Сертификат = Неопределено;
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(НоваяПодписьДвоичныеДанные);
		Если Сертификаты.Количество() <> 0 Тогда
			Сертификат = Сертификаты[0];
		КонецЕсли;	
		
		Файл = Новый Файл(ИмяФайлаСПутем);
		ИмяФайлаПодписи = Файл.Имя;
		
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		КомуВыданСертификат = ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		
		ДанныеДляЗанесенияВРегистр = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, ВерсияАлгоритмаГенерацииФайла",
			ОбъектСсылкаДляПодписи, 
			НоваяПодписьДвоичныеДанные, 
			Отпечаток, 
			ДатаПодписи, 
			ОбъектДляПодписи.Комментарий, 
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			0 //ВерсияАлгоритмаГенерацииФайла
			);
		
		МассивДанныхДляЗанесенияВРегистр.Добавить(ДанныеДляЗанесенияВРегистр);
			
	КонецЦикла;
	
	МассивАдресов = Новый Массив;
	ЭлектронноЦифроваяПодпись.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов);
	
	ОповеститьОбИзменении(ОбъектСсылка);	
	Оповестить("ОбъектПодписан", ОбъектСсылка);
	Оповестить("ПрисоединенныйФайлПодписан", ВладелецФайла);
	
	ТекстСообщения = "";
	Если МассивФайловПодписей.Количество() = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1""'"),
			ОбъектСсылка);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файла для ""%1""'"),
			ОбъектСсылка);
	КонецЕсли;	
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры	

// Процедура предназначена для коррекции имени файла  - замена некорректных символов на пробел
//
// Параметры
//  СтрИмяФайла  - Строка - Имя файла
Процедура КорректноеИмяФайла(СтрИмяФайла)
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru.
	// При этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Сч=1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, " ");
		КонецЕсли;
	КонецЦикла;
	
	СтрИмяФайла = СокрЛП(СтрИмяФайла);
	
КонецПроцедуры // КорректноеИмяФайла()

// "Сохранить как" вместе с подписями - все или выбранные
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//  ПолноеИмяФайла - Строка - полное имя с путем, под которым сохранен файл
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  МассивВозврата - Массив  - массив структур подписей. Если Неопределено - сохраняем все подписи
Процедура СохранитьПодписи(ОбъектСсылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивВозврата = Неопределено) Экспорт
	
	Если МассивВозврата = Неопределено Тогда
		МассивВозврата = Новый Массив;
		ЭлектронноЦифроваяПодпись.ПолучитьВсеПодписи(ОбъектСсылка, УникальныйИдентификатор, МассивВозврата);
	КонецЕсли;	
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ОсновнойФайл.Имя);
	
	Для Каждого СтруктураПодписи Из МассивВозврата Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда 
			ИмяФайлаПодписи = Строка(ОбъектСсылка) + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
		КонецЕсли;	
		КорректноеИмяФайла(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПолныйПутьПодписи);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";	
			КорректноеИмяФайла(ИмяФайлаПодписи);
			
			ПолныйПутьПодписи = Путь;
			ФайловыеФункцииКлиентСервер.ДобавитьСлешЕслиНужно(ПолныйПутьПодписи);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;	
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, СтруктураПодписи.АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
	КонецЦикла;	
	
	Если МассивВозврата.Количество() <> 0 Тогда
		Текст = НСтр("ru = 'Каталог:'") + Символы.ПС;
		Текст = Текст + Путь;	
		Текст = Текст + Символы.ПС + Символы.ПС;	
		Текст = Текст + НСтр("ru = 'Файлы:'") + Символы.ПС;
		
		Для Каждого ИмяФайла Из МассивИмен Цикл
			Текст = Текст + ИмяФайла + Символы.ПС;
		КонецЦикла;	
		
		ПараметрыФормы = Новый Структура("Текст", Текст);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаОтчетаОСохранении", ПараметрыФормы);
		
	КонецЕсли;	 
	
КонецПроцедуры	

// Получает назначение сертификата ЭЦП
//
// Параметры
//  ФиксированныйМассивСвойств  - ФиксированныйМассив - массив расширенных свойств сертификата (EKU)
Функция ПолучитьНазначение(ФиксированныйМассивСвойств)
	
	Назначение = "";
	
	Для Индекс = 0 По ФиксированныйМассивСвойств.Количество() - 1 Цикл
		Назначение = Назначение + ФиксированныйМассивСвойств.Получить(Индекс);
		Назначение = Назначение + Символы.ПС;
	КонецЦикла;	
	
	Возврат Назначение;
	
КонецФункции	

// Получает представление поля КомуВыдан или КемВыдан сертификата ЭЦП
//
// Параметры
//  СтруктураПользователя  - Структура - структура поля КомуВыдан или КемВыдан сертификата
// Возвращаемое значение - таблица значений - колонки "Свойство" и "Значение"
//
// Возвращаемое значение:
//   Строка  - представление
Функция ПолучитьПредставлениеПользователя(СтруктураПользователя) Экспорт
	
	Представление = "";
	CN = "";
	Если СтруктураПользователя.Свойство("CN", CN) Тогда
		Представление = Представление + CN;
	КонецЕсли;	
	O = "";
	Если СтруктураПользователя.Свойство("O", O) Тогда
		Представление = Представление + ", " + O;
	КонецЕсли;	
	OU = "";
	Если СтруктураПользователя.Свойство("OU", OU) Тогда
		Представление = Представление + ", " + OU;
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции	

// Заполняет структуру полями сертификата
//
// Параметры
//  Сертификат  - СертификатКриптографии - сертификат криптографии 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификата(Сертификат) Экспорт
	
	КомуВыдан = ПолучитьПредставлениеПользователя(Сертификат.Субъект);
	КемВыдан = ПолучитьПредставлениеПользователя(Сертификат.Издатель);
	ДействителенДо = Сертификат.ДатаОкончания;
	
	EKU = Неопределено;
	Если Сертификат.РасширенныеСвойства.Свойство("EKU", EKU) Тогда
		Назначение = ПолучитьНазначение(EKU);
	КонецЕсли;	
	
	Отпечаток = Base64Строка(Сертификат.Отпечаток);
	
	СтруктураВозврата = Новый Структура("КомуВыдан, КемВыдан, ДействителенДо, Назначение, Отпечаток",
		КомуВыдан, КемВыдан, ДействителенДо, Назначение, Отпечаток);
		
	Возврат СтруктураВозврата;
КонецФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции	

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Отказ = Истина;
		Предупреждение(НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции	

//  Получает массив структур сертификатов
//
// Параметры
//  ДляШифрования  - Булево - если Истина, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(ДляШифрования) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	ТекущаяДата = ТекущаяДата();
	
	// для подписи
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
			Продолжить; // отфильтровываем истекшие сертификаты
		КонецЕсли;
		
		СтруктураСертификата = ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДляШифрования Тогда    	
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // отфильтровываем истекшие сертификаты
			КонецЕсли;
			
			СтруктураСертификата = ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции	

// Создает на клиенте менеджер криптографии.  Пароль не устанавливается
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
Функция ПолучитьМенеджерКриптографии() Экспорт
	
	ПодключитьРасширениеРаботыСКриптографией();
	
	ПровайдерЭЦП = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПровайдерЭЦП;
	ПутьМодуляКриптографии = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ПутьМодуляКриптографии;
	ТипПровайдераЭЦП = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ТипПровайдераЭЦП;
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	
	МенеджерКриптографии.АлгоритмПодписи = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
КонецФункции	

// Открывает форму просмотра сертификата ЭЦП
//
// Параметры
//  ТекущиеДанные  - Структура - структура с данными файла
//
Процедура ОткрытьСертификат(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	ПодключитьРасширениеРаботыСФайлами();
	ПодключитьРасширениеРаботыСКриптографией();
	
	Если ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая()) Тогда
		Отпечаток = ТекущиеДанные.Отпечаток;
		
		СтруктураСертификата = ЭлектронноЦифроваяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
		Если СтруктураСертификата <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток", СтруктураСертификата, Отпечаток);
			СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ФормаСертификатаЭЦП", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры
