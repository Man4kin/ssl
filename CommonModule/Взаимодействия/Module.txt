
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за полнотекстовый поиск

// Обновляет информацию о актуальности индекса Полнотекстового поиска
//
// Параметры
//  ИнформацияОбАктуальностиИндексаППД  - Строка - в данный параметр помещается строковая информация о актуальности индекса
//  ППДВключен							 - Булево - признак доступности полнотекстового поиска
//
Процедура ОбновитьИнформациюОбАктуальностиИндексаППД(ИнформацияОбАктуальностиИндексаППД, ППДВключен, ИндексАктуален) Экспорт
	
	ИндексАктуален = Ложь;
    	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		ППДВключен = Ложь;
		ИнформацияОбАктуальностиИндексаППД = НСтр("ru = 'ППД не включен'");
	Иначе
		ППДВключен = Истина;
		Если ПолнотекстовыйПоиск.ИндексАктуален() Тогда
			ИнформацияОбАктуальностиИндексаППД = НСтр("ru = 'Индекс актуален'");
			ИндексАктуален = Истина;
		Иначе
			ИнформацияОбАктуальностиИндексаППД = НСтр("ru = 'Дата актуальности:'")+ " " + ПолнотекстовыйПоиск.ДатаАктуальности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет индекс полнотекстового поиска если это доступно.
//
// Параметры
// ИнформацияОбАктуальностиИндексаППД  - Строка - в данный параметр помещается строковая информация о актуальности индекса
//
// Возвращаемое значение:
//   Строка	   - информации о ошибке при выполнении обновления
//
Функция ОбновитьИндексППД(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален) Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		Возврат НСтр("ru = 'Использование индекса полнотекстового поиска данных запрещено!'");
	КонецЕсли;
	
	Если Не ПолнотекстовыйПоиск.ИндексАктуален() Тогда
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	КонецЕсли;
	ОбновитьИнформациюОбАктуальностиИндексаППД(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален);
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции отвечающие за поиск контактов

// Возвращает список доступных видов поиска контактов
//
// Параметры
//  ППДВключен  		- Булево - признак доступности полнотекстового поиска
//  Параметры  		- Структура - параметры содержащие Представление и Адрес контакта
//  ЭлементыФормы 		- ЭлементыФормы 
//  ДляАдреснойКниги 	- Булево - истина если список формируется для адресной книги
//
// Возвращаемое значение:
//   Структура  		 - структура содержащая виды поиска и значения поиска в них.
//
Функция ПолучитьСписокДоступныхПоисков(ППДВключен, Параметры, ЭлементыФормы, ДляАдреснойКниги) Экспорт
	
	ВсеСпискиПоиска = Новый Структура;
	
	Если ДляАдреснойКниги Тогда
		Адрес = "";
		ДоменныйАдрес = "";
		ВариантыПоискаПоСтроке = "";
		Представление = "";
	Иначе
		Адрес = Параметры.Адрес;
		ДоменныйАдрес = ПолучитьДоменныйАдресДляПоиска(Параметры.Адрес);
		ВариантыПоискаПоСтроке = ПолучитьВариантыПоискаПоСтроке(Параметры.Представление, Параметры.Адрес);
		Представление = Параметры.Представление;
	КонецЕсли;
	
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоEmail",      НСтр("ru = 'По email'"),           Адрес);
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоДомену",     НСтр("ru = 'По доменному имени'"), ДоменныйАдрес);
	Если Не ДляАдреснойКниги Тогда
		ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоТелефону", НСтр("ru = 'По телефону'"),      Адрес);
	КонецЕсли;
	
	Если ППДВключен Тогда
		ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоСтроке", НСтр("ru = 'По строке'"),          ВариантыПоискаПоСтроке);
	КонецЕсли;
	
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "НачинаетсяС", НСтр("ru = 'Начинается с'"),       Представление);
	
	Возврат ВсеСпискиПоиска;
	
	
КонецФункции

// Добавляет вариант поиска в список доступных поисков
//
// Параметры
//  ВсеСпискиПоиска  - Структура - в нее происходит добавление варианта поиска и значения в этом варианте
//  ЭлементыФормы 	  - ЭлементыФормы 
//  ИмяВарианта	  - Строка - Имя варианта поиска
//  Представление	  - Строка - Представление варианта поиска
//  Значение		  - Строка - Значение для поиска в данном варианте поиска	
// 
Процедура ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, ИмяВарианта, Представление, Значение)
	
	ЭлементыФормы.ВариантыПоиска.СписокВыбора.Добавить(ИмяВарианта, Представление);
	ВсеСпискиПоиска.Вставить(ИмяВарианта, Значение);
	
КонецПроцедуры

// Устанавливает текущим контакт в форме "Адресной книге" и "Выборе контактов".
//
// Параметры
//  Контакт 	 - СправочникСсылка - контакт на котором необходимо спозиционироваться в форме
//  Форма		 - УправляемаяФорма - форма для которой выполняются действия.
//
Процедура УстановитьТекущимКонтакт(Контакт, Форма) Экспорт
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаПользователей;
		Форма.Элементы.СписокПользователей.ТекущаяСтрока = Контакт;
		
	Иначе
		
		МассивОписанийКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
		ИмяМетаданныхКонтакта = Контакт.Метаданные().Имя;
		
		Для каждого ЭлементМассиваОписания Из МассивОписанийКонтактов Цикл
			Если ЭлементМассиваОписания.Имя = ИмяМетаданныхКонтакта Тогда
				Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы["Страница_" + ?(ЭлементМассиваОписания.ЕстьВладелец,ЭлементМассиваОписания.ИмяВладельца,ЭлементМассиваОписания.Имя)];
				Форма.Элементы["Таблица_" + ЭлементМассиваОписания.Имя].ТекущаяСтрока = Контакт;
				Если ЭлементМассиваОписания.ЕстьВладелец Тогда
					Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].ТекущаяСтрока = Контакт.Владелец;
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма["Список_" + ЭлементМассиваОписания.Имя].Отбор,"Владелец",Контакт.Владелец,,,Истина);
				КонецЕсли;
			ИначеЕсли ЭлементМассиваОписания.ИмяВладельца = ИмяМетаданныхКонтакта Тогда
				Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы["Страница_" + ЭлементМассиваОписания.ИмяВладельца];
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма["Список_" + ЭлементМассиваОписания.Имя].Отбор,"Владелец",Контакт,,,Истина);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает доменный адрес из адреса электронной почты
//
// Параметры
//  Адрес  - Строка - содержит адрес электронной почты из которого извлекается доменный адрес
//
// Возвращаемое значение:
//   Строка   - полученный доменный адрес
// 
Функция ПолучитьДоменныйАдресДляПоиска(Адрес)
	
	Стр = Адрес;
	Поз = Найти(Стр, "@");
	Возврат ?(Поз = 0, "", Сред(Стр, Поз+1));
	
КонецФункции

// Формирует варианты поиска по строке
//
// Параметры
//  Представление  - Строка - представление контакта
//  Адрес		   - Строка - адрес контакта
//
// Возвращаемое значение:
//   СписокЗначений   
//
Функция ПолучитьВариантыПоискаПоСтроке(Представление, Адрес)
	
	Если ПустаяСтрока(Представление) ИЛИ ПустаяСтрока(Адрес) Тогда
		Возврат  Представление + Адрес;
	КонецЕсли;
	
	стрВариантыПоиска = Новый СписокЗначений;
	стрВариантыПоиска.Добавить(Представление + " ИЛИ " + Адрес);
	стрВариантыПоиска.Добавить(Представление + " И " + Адрес);
	
	Возврат стрВариантыПоиска;
	
КонецФункции

//Устанавливает предмет взаимодействия
//Параметры:
//Ссылка - ссылка на взаимодействие,
//Предмет - предмет взаимодействия
//
Процедура УстановитьПредмет(Ссылка, Предмет) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		Объект.Предмет = Предмет;
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

//Возвращает флаг необходимости оповещения формы взаимодействия-основания
//Параметры:
//Основание - структура, содержащая ссылку на взаимодействие, из которого создается контакт
//
Функция ЕстьРеспондент(Основание) Экспорт
	
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("Структура") Тогда
		Для Каждого Элемент Из Основание Цикл
			Если Элемент.Ключ = "Объект"
				И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Элемент.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Возвращает массив, содержащий структуры с информацией о контактах взаимодействия
//или участниках предмета взаимодействия
//Параметры:
//ТаблицаКонтактов - Документ.ТабличнаяЧасть - содержащая описания и ссылки на контакты взаимодействия
//или участников предмета взаимодействия
//
Функция ПреобразоватьТаблицуКонтактовВМассив(ТаблицаКонтактов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Стр Из ТаблицаКонтактов Цикл
		Контакт = ?(ТипЗнч(Стр.Контакт) = Тип("Строка"), Неопределено, Стр.Контакт);
		Запись = Новый Структура(
		"Адрес, Представление, Контакт", Стр.Адрес, Стр.Представление, Контакт
		);
		Результат.Добавить(Запись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

 // Проверяет наличие табличной части у справочника
//
// Параметры
//  ИмяСправочника  	- Строка - имя справочника, для которого осуществляется проверка.
//  ИмяТабличнойЧасти  	- Строка - имя табличной части, наличие которой проверяется.
//
// Возвращаемое значение:
//   Булево   - Истина, если табличная часть есть, ложь в обратном случае
//
Функция НаличиеТабличнойЧастиУСправочника(ИмяСправочника,ИмяТабличнойЧасти)
	
	Возврат   (Метаданные.Справочники[ИмяСправочника].ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено);
	
КонецФункции 

// Заполняет таблицу значений "Найденные контакты" общих форм "Адресная книга" и "Выбора контактов"
// на основании переданной таблицы значений.	
//
// Параметры
//  ТабКонтакты  		- ТаблицаЗначений - таблица значений источник.
//  НайденныеКонтакты  	- ТаблицаЗначений - таблица значений приемник.
// 
Процедура ЗаполнитьНайденныеКонтакты(ТабКонтакты,НайденныеКонтакты) Экспорт
	
	Для Каждого Стр Из ТабКонтакты Цикл
		новСтр = НайденныеКонтакты.Добавить();
		новСтр.Ссылка 				= Стр.Контакт;
		новСтр.Представление 		= Стр.Представление;
		новСтр.НаименованиеКонтакта = Стр.Наименование + ?(ПустаяСтрока(Стр.НаименованиеВладельца), "", " (" + Стр.НаименованиеВладельца + ")");
		новСтр.ИмяСправочника 		= Стр.Контакт.Метаданные().Имя;
	КонецЦикла;
	
КонецПроцедуры

// Формирует массив метаданных возможных типов контактов
//
// Возвращаемое значение:
//   Массив   - массив содержащий метаданные возможных типов контактов
//
Функция ПолучитьМассивМетаданныхКонтакты() 
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	МассивМетаданных = Новый Массив;
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
	
		МассивМетаданных.Добавить(Метаданные.Справочники[ЭлементМассиваОписания.Имя]);
	
	КонецЦикла;
	
	Возврат МассивМетаданных;
	
КонецФункции 

//Подготавливает оповещение при создании на сервере документа взаимодействий
Процедура ПодготовитьОповещения(Форма,Параметры) Экспорт
	
	Если Параметры.Свойство("Основание") И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание) Тогда
		Форма.НеобходимоОповещение = Истина;
		Форма.ВзаимодействиеОснование = Параметры.Основание;
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
		Форма.НеобходимоОповещение = Истина;
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
//  Основные процедуры и функции поиска контактов

//Возвращает таблицу всех контактов, связанных с предметом взаимодействия
//Параметры:
//Предмет - предмет взаимодействия,
//ВключатьEmail - вернуть e-mail адреса даже если контакт не определен
//
// Возвращаемое значение:
//   ТаблицаЗначений  - таблица значений содержащая информацию о контактах
//
Функция ПолучитьВсеКонтактыПоПредметуИлиЦепочке(Предмет, ВключатьEmail)
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Предмет) Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(Истина);
	Иначе
		ИмяСправочника = Предмет.Метаданные().ПолноеИмя();
		ТекстЗапроса = ВзаимодействияПереопределяемый.ПолучитьТекстЗапросаПоискКонтактовПоПредмету(Истина, ИмяСправочника);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаНаПолучениеИнформацииОКонтактах(ВключатьEmail);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", Предмет);
	табКонтакты = Запрос.Выполнить().Выгрузить();
	
	табКонтакты.Колонки.Добавить("ПредставлениеНаименования");
	
	Для Каждого Стр Из табКонтакты Цикл
		Стр.ПредставлениеНаименования = Стр.Наименование + ?(ПустаяСтрока(Стр.НаименованиеВладельца), "", " (" + Стр.НаименованиеВладельца + ")");
	КонецЦикла;
	
	Возврат табКонтакты;
	
КонецФункции

//Возвращает текст запроса, отбирающего все контакты по цепочке взаимодействий
//Параметры:
//ПомещатьВоВременнуюТаблицу - флаг помещения промежуточных результатов во временную таблицу
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(ПомещатьВоВременнуюТаблицу)
	
	спсПоиска = Новый СписокЗначений;
	спсПоиска.Добавить("Встреча.Участники",                                 "Контакт");
	спсПоиска.Добавить("ЗапланированноеВзаимодействие.Участники",           "Контакт");
	спсПоиска.Добавить("ТелефонныйЗвонок",                                  "АбонентКонтакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоВходящее",                         "ОтправительКонтакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиПисьма",        "Контакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиКопий",         "Контакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиОтвета",        "Контакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиПисьма",       "Контакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиКопий",        "Контакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиОтвета",       "Контакт");
	спсПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий", "Контакт");
	
	ТекстЗапроса = "";
	ТекстПроРазрешенные = " РАЗРЕШЕННЫЕ";
	ТекстВременнаяТаблица = ?(
	ПомещатьВоВременнуюТаблицу,
	"ПОМЕСТИТЬ табКонтакты
	|",
	""
	);
	ТекстОбъединить = "";
	ШаблонУсловияНаСсылки = ПолучитьШаблонУсловияНаСсылкиКонтактовДляЗапроса();
	
	Для Каждого ЭлементСписка Из спсПоиска Цикл
		ИмяТаблицы = ЭлементСписка.Значение;
		ИмяПоля    = ЭлементСписка.Представление;
		УсловиеНаСсылки = СтрЗаменить(ШаблонУсловияНаСсылки, "%ИмяПоля%", ИмяПоля);
		
		ТекстЗапроса = ТекстЗапроса + (ТекстОбъединить + 
		
		"ВЫБРАТЬ" + ТекстПроРазрешенные + " РАЗЛИЧНЫЕ
		|	Таблица." + ИмяПоля + "
		|" + ТекстВременнаяТаблица + "ИЗ
		|	Документ." + ИмяТаблицы + " КАК Таблица
		|ГДЕ
		|	Таблица." + ?(Найти(ИмяТаблицы, ".") = 0, "", "Ссылка.") + "Предмет = &Предмет
		|И (" + УсловиеНаСсылки + ")");
		
		ТекстПроРазрешенные = "";
		ТекстВременнаяТаблица = "";
		ТекстОбъединить = "
		|
		|ОБЪЕДИНИТЬ
		|
		|";
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу всех контактов, связанных с EMail
//
// Параметры
//  Адрес		  - Строка - адрес электронной почты для поиска
//
// Возвращаемое значение:
//   ТаблицаЗначений  - таблица значений, которая содержит информацию о контактах
//  
Функция ПолучитьВсеКонтактыПоEmail(Адрес) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаДляПоискаПоEmail(Ложь);
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу всех контактов, связанных со списком EMail.
//
// Параметры
//  Адрес		  - Строка - адрес электронной почты для поиска
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса  - выборка из результата запроса содержащая информацию о контактах
// 
Функция ПолучитьВсеКонтактыПоСпискуEmail(СписокАдресов) Экспорт
	
	Если СписокАдресов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = СформироватьТекстЗапросаДляПоискаПоEmail(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Адрес", СписокАдресов);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Получает представление и всю контактную информацию контакта.
//
// Параметры
//  Контакт  		- Ссылка - контакт для которого получается информация
//  Представление  	- Строка - в данный параметр будет помещено полученное представление
//  СтрокаКИ	  	- Строка - в данный параметр будет помещено полученная контактная информация
//
Процедура ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(Контакт, Представление, СтрокаКИ,ТипКонтакнойИнформации = Неопределено) Экспорт
	
	Представление = "";
	СтрокаКИ = "";
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().Имя;
	ИмяПоляДляНаименованияВладельца = ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Наименование,
	|	" + ИмяПоляДляНаименованияВладельца + " КАК НаименованиеВладельца,
	|	Таблица.КонтактнаяИнформация.(
	|		Тип,
	|		Представление
	|	)
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Контакт" + ?(ТипКонтакнойИнформации = Неопределено,""," И Таблица.КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации",ТипКонтакнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Представление = Выборка.Наименование;
	
	Если Не ПустаяСтрока(Выборка.НаименованиеВладельца) Тогда
		Представление = Представление + " (" + Выборка.НаименованиеВладельца + ")";
	КонецЕсли;
	
	Для Каждого Стр Из Выборка.КонтактнаяИнформация.Выгрузить() Цикл
		Если Стр.Тип <> Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			СтрокаКИ = СтрокаКИ + ?(ПустаяСтрока(СтрокаКИ), "", ", ") + Стр.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает поля для получения наименования владельца, если такой имеется
//
// Параметры
//  ИмяТаблицы  - Строка - Имя основной таблицы, для которой формируется запрос.
//
// Возвращаемое значение:
//  Строка   	- строка, которая будет вставлена в запрос.
//
Функция ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы)
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	Для каждого ЭлементОписанияМассива Из МассивОписанияКонтактов Цикл
		Если ЭлементОписанияМассива.Имя = ИмяТаблицы И ЭлементОписанияМассива.ЕстьВладелец Тогда
			Возврат  "Таблица.Владелец.Наименование"; 
		КонецЕсли;		
	КонецЦикла;
	
	Возврат """"""; 			
	
КонецФункции // ПолучитьИмяПоляДляНаименованияВладельца()

// Получает наименование и адреса электронной почты контакта
//
// Параметры
//  Контакт		 - Ссылка - контакт, для которого получаются данные
//
// Возвращаемое значение:
//   Структура   - содержит наименование контакта и список значений электронной почты контакта
//
Функция ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Контакт.Метаданные().Иерархический Тогда
	     Если Контакт.ЭтоГруппа Тогда
		    Возврат Неопределено;		 
		 КонецЕсли;	
	КонецЕсли;
	
	ИмяТаблицы = Контакт.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаКонтактнаяИнформация.АдресЭП,
	|	Таблица.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяТаблицы + " КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	Таблица.Ссылка = &Контакт
	|ИТОГИ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Адреса = Новый Структура("Наименование,Адреса", Выборка.Наименование, Новый СписокЗначений);
	ВыборкаАдреса = Выборка.Выбрать();
	Пока ВыборкаАдреса.Следующий() Цикл
		Адреса.Адреса.Добавить(ВыборкаАдреса.АдресЭП);
	КонецЦикла;
	
	Возврат Адреса;
	
КонецФункции

// Формирует строку соединения для запроса о получении информации о контакте.
//
// Параметры
//  ВключатьEmail   - Булево - признак включения в результат запроса информации о EMail.
//  ИмяСправочника  - Строка - имя справочника для которого формируется запрос.
//
// Возвращаемое значение:
//   Строка   		- дополнение запроса. 
//
Функция ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,ИмяСправочника) Экспорт
	
	Если (Не ВключатьEmail) ИЛИ (НЕ НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация")) Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат "
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник."  + ИмяСправочника + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|			ПО Таблица.Ссылка = ТаблицаКонтактнаяИнформация.Ссылка
		|				И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))"; 
		
	КонецЕсли;
	
КонецФункции // 

 // Формирует строку выборки поля, для получения в запросе адреса электронной почты. 
//
// Параметры
//  ВключатьEmail  - Булево - признак необходимости получения в данном запросе
//                 адреса электронной почты.
//  ИмяСправочника  - Булево - имя справочника, для которого выполняется запрос.
//  ИменоватьПоле   - Булево - признак того, что поле в запросе необходимо именовать.
//
// Возвращаемое значение:
//   Строка   		- строка, дополняющая запрос.
// 
Функция ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,ИмяСправочника,ИменоватьПоле = Ложь) Экспорт
	
	Если Не ВключатьEmail Тогда
		
		Возврат "";
		
	Иначе
		
		Если НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация")Тогда
			Возврат ",
			|	ТаблицаКонтактнаяИнформация.АдресЭП";
		Иначе
			
			Возврат ",
			|	""""" + ?(ИменоватьПоле," КАК АдресЭП","");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции //

// Формирует текст запроса на получение информации о контактах
//
// Параметры
//  ВключатьEmail  	- Булево - признак необходимости получения информации о Email.
//
// Возвращаемое значение:
//   Строка   		- текст запроса.
// 
Функция ПолучитьТекстЗапросаНаПолучениеИнформацииОКонтактах(ВключатьEmail)
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();	
    	
	ТекстЗапроса =
	
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца " + ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,"Пользователи") + "
	|ИЗ
	|	табКонтакты КАК табКонтакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Таблица"  + ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,"Пользователи") + "
	|		ПО табКонтакты.Контакт = Таблица.Ссылка
	|ГДЕ
	|   (НЕ Таблица.ПометкаУдаления)";
	
		
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + " 
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	Таблица.Наименование,
			|	""""" + ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,ЭлементМассиваОписания.Имя) + "
			|ИЗ
			|	табКонтакты КАК табКонтакты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица"  + ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,ЭлементМассиваОписания.Имя) + "
			|		ПО табКонтакты.Контакт = Таблица.Ссылка
			|ГДЕ
			|   (НЕ Таблица.ПометкаУдаления)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ Таблица.Ссылка.ЭтоГруппа)",""); 
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстУпорядочитьПо = "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ТекстЗапроса = ТекстЗапроса + ТекстУпорядочитьПо;
	
	Возврат ТекстЗапроса;	
	
КонецФункции

// Формирует текст запроса для поиска контактов по Email
//
// Параметры
//  ПоискПоСписку  - Булево - признак того, что в качестве параметра передается массив значений
//
// Возвращаемое значение:
//   Строка   		- текст запроса.
// 
Функция СформироватьТекстЗапросаДляПоискаПоEmail(ПоискПоСписку) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000) КАК Представление,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
	|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000),
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнойИнформации.Ссылка.Наименование
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	
	Если ПоискПоСписку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Адрес", "В (&Адрес)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по телефону и выполняет его.
//
// Параметры
//  Телефон  - Строка - строка, содержащая телефон.
//  Форма	 - УправляемаяФорма - Форма, для которой выполняется операция.	
//
// Возвращаемое значение:
//   Булево - Истина, если найден хотя бы один контакт.
// 
Функция ПолучитьВсеКонтактыПоТелефону(Телефон,Форма) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000)КАК Представление,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 100) = &Телефон
	|	И (ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
	|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000),
			|	ТаблицаКонтактнойИнформации.Ссылка.Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + "
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 100) = &Телефон
			|	И (ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|			ИЛИ ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	ТабКонтакты = Запрос.Выполнить().Выгрузить();
	
	Если ТабКонтакты = Неопределено ИЛИ ТабКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТабКонтакты,Форма.НайденныеКонтакты);
	
	Возврат Истина;
	
КонецФункции

// Формирует текст запроса для поиска контактов по началу наименования и выполняет его.
//
// Параметры
//  Наименование 		- Строка - строка, содержащая начало наименования контакта.
//
// Возвращаемое значение:
//   ТаблицаЗначений 	- Результат выполненного запроса выгруженный в таблицу значений.
// 
Функция ПолучитьВсеКонтактыПоНачалуНаименования(Наименование) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Контакт,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	"""" КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|   И (НЕ Таблица.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка,
			|	ТаблицаСправочника.Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
			|	""""
			|ИЗ
			|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
			|ГДЕ
			|	ТаблицаСправочника.Наименование ПОДОБНО &Наименование "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
			|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции 

// Формирует текст запроса для поиска контактов по началу наименования с адресами электронной почты 
// и выполняет его.
//
// Параметры
//  Наименование 		- Строка - строка, содержащая начало наименования контакта.
//  Форма	 - УправляемаяФорма - Форма, для которой выполняется операция.
//
// Возвращаемое значение:
//   Булево - Истина, если найден хотя бы один контакт.
// 
Функция ПолучитьВсеКонтактыПоНачалуНаименованияСАдресамиЭлектроннойПочты(Наименование,Форма) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	" ВЫБРАТЬ
	|	Таблица.Ссылка КАК Контакт,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И (НЕ Таблица.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка,
			|	ТаблицаСправочника.Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнаяИнформация.АдресЭП
			|ИЗ
			|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|ГДЕ
			|	ТаблицаСправочника.Наименование ПОДОБНО &Наименование "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
			|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
			
		КонецЕсли;
	
	КонецЦикла;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	ТабКонтакты = Запрос.Выполнить().Выгрузить(); 
	
	Если ТабКонтакты = Неопределено ИЛИ ТабКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТабКонтакты,Форма.НайденныеКонтакты);
	Возврат Истина;
	
КонецФункции

// Формирует шаблон условия для запроса, на соответствие получаемого поля в запросе типу возможного контакта.
//
// Возвращаемое значение:
//   Строка   - сформированный текст шаблона условия.
//
Функция ПолучитьШаблонУсловияНаСсылкиКонтактовДляЗапроса() Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстКВозврату =  "Таблица.%ИмяПоля% ССЫЛКА Справочник.Пользователи";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
	
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
		    Продолжить;
		Иначе
			ТекстКВозврату = ТекстКВозврату + "
			|ИЛИ Таблица.%ИмяПоля% ССЫЛКА Справочник." + ЭлементМассиваОписания.Имя;
		КонецЕсли;
	
	КонецЦикла; 	
		
	Возврат  ТекстКВозврату; 	
	
КонецФункции // ПолучитьШаблон()

// Осуществляет поиск контактов по Email или по домену Email.
//
// Параметры
//  СтрокаПоиска  - Строка - служит основой для поиска.
//  ПоДомену	  - Булево - признак того, что поиск необходимо осуществлять по домену.
//  Форма	 - УправляемаяФорма - Форма, для которой выполняется операция.	
//
// Возвращаемое значение:
//   Булево - Истина, если найден хотя бы один контакт.
// 
Функция НайтиПоEmail(СтрокаПоиска,ПоДомену,Форма) Экспорт
	
	Если ПоДомену Тогда
		ТабКонтакты = ПолучитьКонтактыПоДоменномуАдресу(СтрокаПоиска);
	Иначе
		ТабКонтакты = ПолучитьВсеКонтактыПоEmail(СтрокаПоиска);
	КонецЕсли;
	
	Если ТабКонтакты = Неопределено ИЛИ ТабКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТабКонтакты,Форма.НайденныеКонтакты);
	
	Возврат Истина;
	
КонецФункции	

// Возвращает контакты по доменному адресу
//
// Параметры
//   ИмяДомена 	 - Строка - имя домена, по которому осуществляется поиск.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица, содержащая информацию о найденных контактах 
//
Функция ПолучитьКонтактыПоДоменномуАдресу(ИмяДомена) Экспорт
	
	Если ПустаяСтрока(ИмяДомена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПерваяТаблица = Истина;
	ТекстЗапроса = "";
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
		
		Если ЭлементМассиваОписания.ИскатьПоДомену Тогда
			
			Если ПерваяТаблица Тогда
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗЛИЧНЫЕ";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаКонтактнаяИнформация.Ссылка КАК Контакт,
			|	ТаблицаКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
			|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец,"ТаблицаКонтактнаяИнформация.Ссылка.Владелец.Наименование ","""""") + ?(ПерваяТаблица," КАК НаименованиеВладельца ","") +" 
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|ГДЕ
			|	ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &СтрокаПоиска";
			
			
			ПерваяТаблица = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ПерваяТаблица Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	АдресЭП";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%@" + ИмяДомена);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Выполняет поиск контактов по строке
//
// Параметры
//  Форма  				- УправляемаяФорма - форма для которой осуществляется поиск.
//  ДляАдреснойКниги  	- Булево - признак того, что поиск осуществляется для адресной книги.
//
// Возвращаемое значение:
//   Строка  			 - сообщение пользователю по результатам поиска, если такое необходимо.
//
Функция ОсуществитьПоискКонтактовПоСтроке(Форма,ДляАдреснойКниги = Ложь) Экспорт
	
	Форма.НайденныеКонтакты.Очистить();
	
	Если ПустаяСтрока(Форма.СтрокаПоиска) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		Возврат НСтр("ru = 'Использование индекса полнотекстового поиска данных запрещено!'");
	КонецЕсли;
	
	масМетаданных = ПолучитьМассивМетаданныхКонтакты(); 
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(Форма.СтрокаПоиска, 101);
	СписокПоиска.ОбластьПоиска = масМетаданных;
	СписокПоиска.ПерваяЧасть();
	
	КоличествоНайденныхЭлементов = СписокПоиска.Количество();
	Если КоличествоНайденныхЭлементов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	масСсылок = Новый Массив;
	соотвОписание = Новый Соответствие;
	Для Сч = 0 По Мин(КоличествоНайденныхЭлементов, 100)-1 Цикл
		ЭлементСписка = СписокПоиска.Получить(Сч);
		масСсылок.Добавить(ЭлементСписка.Значение);
		соотвОписание.Вставить(ЭлементСписка.Значение, ЭлементСписка.Описание);
	КонецЦикла;
	
	Если ДляАдреснойКниги Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоСтрокеСEmail();
	Иначе	
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоСтроке();
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("масСсылок", масСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		новСтр = Форма.НайденныеКонтакты.Добавить();
		новСтр.Ссылка = Выборка.Контакт;
		новСтр.Представление = ?(ДляАдреснойКниги,Выборка.Представление,соотвОписание.Получить(Выборка.Контакт));
		новСтр.НаименованиеКонтакта = Выборка.Наименование + ?(ПустаяСтрока(Выборка.НаименованиеВладельца), "", " (" + Выборка.НаименованиеВладельца + ")");
	КонецЦикла;
	
	Возврат ?(КоличествоНайденныхЭлементов < 101, "", НСтр("ru = 'Уточните параметры поиска. В списке отображены не все найденные контакты!'"));
	
КонецФункции

// Формирует текст запроса для поиска контактов по строке
//
// Возвращаемое значение:
//   Строка   		- текст запроса.
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоСтроке()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСправочника.Ссылка КАК Контакт,
	|	ТаблицаСправочника.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	"""" КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Ссылка В(&масСсылок)
	|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =ТекстЗапроса +  "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Наименование,
		|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
		|	""""
		|ИЗ
		|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&масСсылок) "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
		|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по строке с получением информации о адресах EMail.
//
// Возвращаемое значение:
//   Строка   		- текст запроса.
// 
Функция ПолучитьТекстЗапросаПоискКонтактовПоСтрокеСEmail()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСправочника.Ссылка КАК Контакт,
	|	ТаблицаСправочника.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ТаблицаСправочника.Ссылка В(&масСсылок)
	|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =ТекстЗапроса + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Наименование,
		|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
		|	ТаблицаКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&масСсылок) "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
		|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает контакты по предмету взаимодействия, устанавливает текущей страницей формы поиска страницу
// поиска контактов по предмету
//
// Параметры
//  ЭлементыФормы       - КоллекцияЭлементовУправляемойФормы - предоставляет доступ к элементам формы.
//  Предмет             - СправочникСсылка, ДокументСсылка - предмет взаимодействия
//  КонтактыПоПредмету  - ТаблицаЗначений - реквизит формы, в который помещаются найденные контакты.
//  ВключатьEmail       - Булево - признак необходимости получения данных о электронном адресе контакта.
//
Процедура ЗаполнитьКонтактыПоПредмету(ЭлементыФормы, Предмет, КонтактыПоПредмету, ВключатьEmail) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		ЭлементыФормы.ВсеКонтактыПоПредмету.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	табКонтакты = ПолучитьВсеКонтактыПоПредметуИлиЦепочке(Предмет, ВключатьEmail);
	Если (табКонтакты = Неопределено) ИЛИ (табКонтакты.Количество() = 0) Тогда
		ЭлементыФормы.ВсеКонтактыПоПредмету.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из табКонтакты Цикл
		новСтр = КонтактыПоПредмету.Добавить();
		новСтр.Ссылка = Стр.Ссылка;
		новСтр.Наименование = Стр.Наименование;
		новСтр.ИмяСправочника = Стр.Ссылка.Метаданные().Имя;
		новСтр.ПредставлениеНаименования = Стр.ПредставлениеНаименования;
		Если ВключатьEmail Тогда
			новСтр.Адрес = Стр.АдресЭП;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.Страницы.ТекущаяСтраница = ЭлементыФормы.ВсеКонтактыПоПредмету;
	Возврат;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции получения данных контактов, взаимодействий и предметов взаимодействий
  
// Получает адреса электронной почты контакта
//
// Параметры
//  Контакт		 - Ссылка - контакт, для которого получаются данные
//
// Возвращаемое значение:
//   Массив   - массив структур содержащих адреса, виды и представления адресов
//
Функция ПолучитьАдресаЭлектроннойПочтыКонтакта(Контакт) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблицы.АдресЭП,
	|	Таблицы.Вид,
	|	Таблицы.Представление,
	|	Таблицы.Вид.Наименование КАК ВидНаименование
	|ИЗ
	|	" + Контакт.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК Таблицы
	|ГДЕ
	|	Таблицы.Ссылка = &Контакт
	|	И Таблицы.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Адрес = Новый Структура;
		Адрес.Вставить("АдресЭП",         Выборка.АдресЭП);
		Адрес.Вставить("Вид",             Выборка.Вид);
		Адрес.Вставить("Представление",   Выборка.Представление);
		Адрес.Вставить("ВидНаименование", Выборка.ВидНаименование);
		Результат.Добавить(Адрес);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Возвращает ссылку на текущий предмет взаимодействия
//Параметры:
//	Ссылка - ссылка на взаимодействие
//
// Возвращаемое значение:
//   СправочникОбъект, ДокументОбъект   - предмет взаимодействия.
//
Функция ПолучитьЗначениеПредмета(Ссылка)
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка,"Предмет");
	
КонецФункции

// Получает предмет взаимодействия для переданной ссылки.
//
// Параметры
//  Ссылка  - СправочникСсылка,ДокументСсылка - документ или справочник 
//												для которого получается предмет взаимодействия.
//
// Возвращаемое значение:
//   СправочникСсылка, ДокументСсылка   - полученный предмет взаимодействия.
//
Функция ПолучитьПредметВзаимодействия(Ссылка)
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Предмет = ПолучитьЗначениеПредмета(Ссылка);
	Возврат ?(ЗначениеЗаполнено(Предмет), Предмет, Ссылка);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции работы с взаимодействиями

// Получает массив описания возможных контактов и формирует из него список значений
// контактов, которые можно создать интерактивно.
//
// Возвращаемое значение:
//   СписокЗначений   - список значений, который содержит контакты, которые можно создать интерактивно.
// 
Функция СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов() Экспорт

	МассивОписанияВозможныхТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
    СписокКонтактовКоторыеМожноСоздать = Новый СписокЗначений;
	
	Для каждого ЭлементМассива Из МассивОписанияВозможныхТиповКонтактов Цикл
	
		 Если ЭлементМассива.ВозможностьИнтерактивногоСоздания И ПравоДоступа("Добавление",Метаданные.Справочники[ЭлементМассива.Имя])Тогда
		 
		 	СписокКонтактовКоторыеМожноСоздать.Добавить(ЭлементМассива.Имя,ЭлементМассива.Представление);
		 
		 КонецЕсли;
	
	 КонецЦикла;
	 
	 Возврат СписокКонтактовКоторыеМожноСоздать;

КонецФункции 

// Вызывается из обработчиков заполнения документов - взаимодействий и предметов заполнения.
// Выполняет необходимые действия по заполнению реквизитов по умолчанию
//
// Параметры
//  Объект  - ДокументОбъект - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения  - Произвольный - значение,которое используется как основание для заполнения.
// 
Процедура ЗаполнитьРеквизитыПоУмолчанию(Объект, ДанныеЗаполнения) Экспорт
	
	ЭтоВзаимодействие = ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Объект.Ссылка);
	
	//текущий пользователь является автором и ответственным по создаваемому взаимодействию
	Если ЭтоВзаимодействие Тогда
		Объект.Автор = ОбщегоНазначения.ТекущийПользователь();
		Объект.Ответственный = Объект.Автор;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контакты = Неопределено;
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяКонтактом(ДанныеЗаполнения)
		И Не ДанныеЗаполнения.ЭтоГруппа Тогда
		// На основании контакта
		Контакты = Новый Массив;
		Контакты.Добавить(ДанныеЗаполнения);
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяПредметом(ДанныеЗаполнения) Тогда
		// На основании предмета
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
		Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения);
		Если ЭтоВзаимодействие Тогда
			Объект.Предмет = ДанныеЗаполнения;
		КонецЕсли;
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(ДанныеЗаполнения) Тогда
		// На основании взаимодействия
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
		Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения);
		Если ЭтоВзаимодействие Тогда
			Объект.Предмет = ПолучитьПредметВзаимодействия(ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		// Заполним контакт
		Если ДанныеЗаполнения.Свойство("Контакт") И ЗначениеЗаполнено(ДанныеЗаполнения.Контакт) Тогда
			Контакты = Новый Массив;
			Контакты.Добавить(ДанныеЗаполнения.Контакт);
		КонецЕсли;
		
		// Установим предмет
		Если ДанныеЗаполнения.Свойство("Предмет") Тогда
			Объект.Предмет = ДанныеЗаполнения.Предмет;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним участников
	Если ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0) Тогда
		Объект.ЗаполнитьКонтакты(Контакты);
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив участников документов взаимодействий  по табличной части документов.
//
// Параметры
//  Ссылка		 - ДокументСсылка - ссылка на документ взаимодействия.
//
// Возвращаемое значение:
//   Массив   - массив структур, содержащих информацию о контактах.
//
Функция ПолучитьУчастниковПоТаблице(Ссылка) Экспорт
	
	ПолноеИмяОбъекта = Ссылка.Метаданные().ПолноеИмя();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Участники.Контакт,
	|	Участники.ПредставлениеКонтакта КАК Представление,
	|	Участники.КакСвязаться КАК Адрес
	|ИЗ
	|	" + ПолноеИмяОбъекта + ".Участники КАК Участники
	|ГДЕ
	|	Участники.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат ПреобразоватьТаблицуКонтактовВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Формирует массив участника взаимодействия, содержащий одну структуру по переданным полям.
//
// Параметры
//  Ссылка		 - ДокументСсылка - ссылка на документ взаимодействия.
//
// Возвращаемое значение:
//   Массив   - массив структур, содержащих информацию о контактах.
//  
Функция ПолучитьУчастникаПоПолям(Контакт, Адрес, Представление) Экспорт
	
	Стр = Новый Структура("Контакт, Адрес, Представление", Контакт, Адрес, Представление);
	Рез = Новый Массив;
	Рез.Добавить(Стр);
	Возврат Рез;
	
КонецФункции

// Проверяет содержит ли входящий массив хотя бы один элемент.
//
// Параметры
//  Контакты	  - Массив 
//
// Возвращаемое значение:
//   Булево    - Истина, если содержит, и ложь в обратном случае.
//
Функция КонтактыЗаполнены(Контакты) Экспорт
	
	Возврат (ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0));
	
КонецФункции

 // Заполняет табличную часть участники у документов Встреча и Запланированное взаимодействие.
//
// Параметры
//  Контакты	 - Массив - массив, содержащий участников взаимодействия.
//  Участники 	 - ТабличнаяЧастьДокумента - табличная часть документа, которая будет заполнена
//                 на основании массива.
// 
Процедура ЗаполнитьКонтактыДляВстречи(Контакты, Участники) Экспорт
	
	Если Не КонтактыЗаполнены(Контакты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Контакты Цикл
		
		новСтр = Участники.Добавить();
		Если ТипЗнч(Стр) = Тип("Структура") Тогда
			новСтр.Контакт = Стр.Контакт;
			новСтр.ПредставлениеКонтакта = Стр.Представление;
			новСтр.КакСвязаться = Стр.Адрес;
		Иначе
			новСтр.Контакт = Стр;
		КонецЕсли;
		
		ДозаполнитьПоляКонтактов(новСтр.Контакт, новСтр.ПредставлениеКонтакта, новСтр.КакСвязаться);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения прочих полей в строках табличной части Участники документов взаимодействий.
//
// Параметры
//  Контакт					- СправочникСсылка - контакт, на основании данных которого будут заполнены прочие поля.
//  Представление			- Строка - представление контакта.
//  Адрес					- Строка - контактная информация контакта.
//  ТипКонтактнойИнформации	- Перечисления.ТипыКонтактнойИнформации - контактная информация контакта.
//
Процедура ДозаполнитьПоляКонтактов(Контакт, Представление, Адрес, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	ИначеЕсли Не ПустаяСтрока(Представление) И Не ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним поле представление
	Если ПустаяСтрока(Представление) Тогда
		Представление = ?(ЗначениеЗаполнено(Контакт),ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контакт,"Наименование"),"");
	КонецЕсли;
	
	// Для всех типов кроме электронной почты
	Если ТипКонтактнойИнформации <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(Контакт, "", Адрес,ТипКонтактнойИнформации);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Для адреса электронной почты проверим, введен он или нет
	Если Найти(Адрес, "@") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адреса = ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт);
	Если Адреса <> Неопределено И Адреса.Адреса.Количество() > 0 Тогда
		Элемент = Адреса.Адреса.Получить(0);
		Адрес = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Формирует строку-представление списка участников взаимодействия
//
// Параметры
//  Объект		 - ДокументОбъект - документ, на основании табличной части участники которого формируется строка.
//
Процедура СформироватьСписокУчастников(Объект) Экспорт
	
	Объект.СписокУчастников = "";
	Для Каждого Участник Из Объект.Участники Цикл
		Объект.СписокУчастников = Объект.СписокУчастников + ?(Объект.СписокУчастников = "","","; ") + Участник.ПредставлениеКонтакта;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТОВ МЕХАНИЗМА ВЗАИМОДЕЙСТВИЯ

// Заполняет список выбора для поля "Отработать после"
//
// Параметры
//  СписокВыбора  - СписокЗначений - список, который будет заполнен значения выбора
//
Процедура ЗаполнитьСписокВыбораДляОтработатьПосле(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(15*60,    НСтр("ru='Через 15 мин.'"));
	СписокВыбора.Добавить(30*60,    НСтр("ru='Через 30 мин.'"));
	СписокВыбора.Добавить(60*60,    НСтр("ru='Через 1 час'"));
	СписокВыбора.Добавить(3*60*60,  НСтр("ru='Через 3 часа'"));
	СписокВыбора.Добавить(24*60*60, НСтр("ru='Завтра'"));
	
КонецПроцедуры

// Обработчик события перед записью, возникающих в формах документов взаимодействий.
//
// Параметры
// 	ТекущийОбъект  - ДокументОбъект - документ, в котором возникло событие
//
Процедура ПередЗаписьюВзаимодействияИзФормы(ТекущийОбъект) Экспорт
	
	НовыйПредмет = ТекущийОбъект.Предмет;
	Ссылка = ТекущийОбъект.Ссылка;
	
	//Если в качестве предмета устанавливается само взаимодействие то делать ничего не нужно.
	Если НовыйПредмет = Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПредмет = ПолучитьЗначениеПредмета(Ссылка);
	
	Если СтарыйПредмет = НовыйПредмет Тогда
		// Предмет не изменился, ничего изменять не надо
		Возврат;
	КонецЕсли;
	
	// Если в качестве нового предмета установлено взаимодействие, то надо проверить предмет у нового предмета
	Если ЗначениеЗаполнено(НовыйПредмет) И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(НовыйПредмет) Тогда
		
		ПредметПредмета = ПолучитьЗначениеПредмета(НовыйПредмет);
		Если Не ЗначениеЗаполнено(ПредметПредмета) Тогда
			// У предмета установим в качестве предмета ссылку на самого себя
			УстановитьПредмет(НовыйПредмет, НовыйПредмет);
		ИначеЕсли ПредметПредмета <> НовыйПредмет И НовыйПредмет <> Ссылка Тогда
			// У текущего объекта поменяем предмет на предмет предмета
			НовыйПредмет = ПредметПредмета;
			ТекущийОбъект.Предмет = НовыйПредмет;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если предыдущим предметом было взаимодействие, то возможно нужно поменять предмет у всей цепочки
	Если ЗначениеЗаполнено(СтарыйПредмет) И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(СтарыйПредмет) Тогда
		
		МенятьПредметВоВсейЦепочке = Истина;
		Если Ссылка <> СтарыйПредмет И (Не ЗначениеЗаполнено(НовыйПредмет) ИЛИ ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(НовыйПредмет)) Тогда
			МенятьПредметВоВсейЦепочке = Ложь;
		КонецЕсли;
		
		Если МенятьПредметВоВсейЦепочке Тогда
			ВзаимодействияВызовСервера.ЗаменитьПредметВЦепочкеВзаимодействий(СтарыйПредмет, НовыйПредмет, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает во всей цепочке взаимодействий в качестве предмета созданный объект
//Параметры:
//Предмет - созданный предмет взаимодействий,
//Взаимодействие - взаимодействие, по которому создан предмет,
//Отказ - флаг отказа от операции
//
Процедура ПриЗаписиПредметаИзФормы(Предмет, Взаимодействие, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Взаимодействие)
		Или Не ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Взаимодействие) Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПредмет = ПолучитьЗначениеПредмета(Взаимодействие);
	Если Предмет = СтарыйПредмет Тогда
		// Предмет уже был установлен
		Возврат;
	КонецЕсли;
	
	// Получим список взаимодействий у которых нужно изменить предмет
	Если ЗначениеЗаполнено(СтарыйПредмет)
		И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(СтарыйПредмет) Тогда
		масЗамен = ВзаимодействияВызовСервера.ПолучитьВзаимодействияИзЦепочки(СтарыйПредмет, Взаимодействие);
	Иначе
		масЗамен = Новый Массив;
	КонецЕсли;
	масЗамен.Вставить(0, Взаимодействие);
	
	// Заменим предмет во всех взаимодействиях
	
	Для Каждого Элемент Из масЗамен Цикл
		Попытка
			УстановитьПредмет(Элемент, Предмет);
		Исключение
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при замене предмета у %1: %2'"),
			                                                                                                          Элемент,
			                                                                                                          ПредставлениеОшибки),
			                                                  ,
			                                                  ,
			                                                  ,
			                                                  Отказ);
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Преобразование общих форм "Адресная книга" и "Подбор контактов"

// Динамически формирует общие формы "Адресная книга" и "Подбор контактов" согласно возможным типам контактов
//
Процедура ДобавитьСтраницыФормыПодбораКонтактов(Форма) Экспорт
	
	ОписаниеТипаДинамическийСписок = Новый ОписаниеТипов("ДинамическийСписок");
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивОписанийВозможныхКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	//Создадим динамические списки
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Список_" + ЭлементМассиваОписания.Имя ,ОписаниеТипаДинамическийСписок));	
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Установим в динамические списки основные таблицы и обязательное использование реквизита ЭтоГруппа
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Форма["Список_" + ЭлементМассиваОписания.Имя].ОсновнаяТаблица = "Справочник." + ЭлементМассиваОписания.Имя;
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементМассиваОписания.ЕстьВладелец  Тогда
			
			ЭлементСтраница = Форма.Элементы.Добавить("Страница_" + ЭлементМассиваОписания.Имя,Тип("ГруппаФормы"),Форма.Элементы.Страницы);
			ЭлементСтраница.Вид 					= ВидГруппыФормы.Страница;
			ЭлементСтраница.ОтображатьЗаголовок 	= Истина;
			ЭлементСтраница.Заголовок				= ЭлементМассиваОписания.Представление;
			ЭлементСтраница.Группировка 			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
		КонецЕсли;
		
		ЭлементТаблица = Форма.Элементы.Добавить("Таблица_" + ЭлементМассиваОписания.Имя,Тип("ТаблицаФормы"),Форма.Элементы[?(ЭлементМассиваОписания.ЕстьВладелец,"Страница_" + ЭлементМассиваОписания.ИмяВладельца,"Страница_" + ЭлементМассиваОписания.Имя)]);
		ЭлементТаблица.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя;
		ЭлементТаблица.УстановитьДействие("Выбор","СписокСправочникаВыбор");
		Если ЭлементМассиваОписания.ЕстьВладелец Тогда
			Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].УстановитьДействие("ПриАктивизацииСтроки","Подключаемый_СписокВладелецПриАктивизацииСтроки");
			ЭлементОтбора = Форма["Список_" + ЭлементМассиваОписания.Имя].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		КонецЕсли;	
		
		КолонкаСсылка = Форма.Элементы.Добавить("Колонка_" + ЭлементМассиваОписания.Имя + "_Ссылка",Тип("ПолеФормы"),ЭлементТаблица);
		КолонкаСсылка.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаСсылка.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя + ".Ссылка";
		КолонкаСсылка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЦикла;
	
КонецПроцедуры
 

