
///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ФУНКЦИИ

// Функция время начала замера
//
// Параметры:
//  КодКлючевойОперации - Строка, код элемента справочника "КлючевыеОперации"
//
// Возвращаемое значение:
//  Число - время начала замера
//
Функция ЗафиксироватьВремяНачала(КлючеваяОперация, ВызовССервера) Экспорт
	
	Соответствие = ПолучитьПараметрСеанса();
	
	// Проверка, если замер времени выполнения ключевой операции уже начат,
	// то игнорировать повторный замер
	Если ВызовССервера Тогда
		Если Не Соответствие.Получить(КлючеваяОперация) = Неопределено Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ВремяНачала = ТочноеВремя();
	Соответствие.Вставить(КлючеваяОперация, ВремяНачала);
	УстановитьПараметрСеанса(Соответствие);
	
	УстановитьФлаг(Не ВызовССервера);
	
	Возврат ВремяНачала;
	
КонецФункции

// Процедура фиксирует время окончания замер
//
// Возвращаемое значение:
//  Число - время окончания замера
//
Функция ЗафиксироватьВремяОкончания(КлючеваяОперация = Неопределено, ВызовИзОбработчикаОжидания) Экспорт
	
	ВремяОкончания = ТочноеВремя();
	
	Соответствие = ПолучитьПараметрСеанса(Ложь);
	
	Если Соответствие = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка, если обработчик ожидания подключен, то пользователь не должен сам завершать замер
	Если Не ВызовИзОбработчикаОжидания Тогда
		ОбработчикПодключен = Соответствие.Получить("%ОбработчикПодключен%");
		ОбработчикПодключен = ?(ОбработчикПодключен = Неопределено, Ложь, ОбработчикПодключен);
		Если ОбработчикПодключен Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ВремяНачала = Неопределено;
	Если КлючеваяОперация = Неопределено Тогда // Параллельно выполняется замер только одной ключевой операции
		
		Если Соответствие.Количество() > 2 Тогда
			ВызватьИсключение "Начато несколько различных замеров.
							  |В таких случаях необходимо указывать какая ключевая операция завершилась.";
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Соответствие Цикл
			
			// Чтобы не читать значение ключа %ОбработчикПодключен%
			Если ТипЗнч(КлючИЗначение.Ключ) = Тип("ПеречислениеСсылка.КлючевыеОперации") Тогда
				КлючеваяОперация = КлючИЗначение.Ключ;
				ВремяНачала = КлючИЗначение.Значение;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ВремяНачала = Соответствие.Получить(КлючеваяОперация);
		
	КонецЕсли;
	
	Если ВремяНачала = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Соответствие.Удалить(КлючеваяОперация);
	УстановитьПараметрСеанса(Соответствие);
	
	Запись = РегистрыСведений.ЗамерыВремени.СоздатьМенеджерЗаписи();
	Запись.ДатаЗамера = ТекущаяДата();
	Запись.КлючеваяОперация = КлючеваяОперация;
	Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
	Запись.ВремяВыполнения = (ВремяОкончания - ВремяНачала - ?(ВызовИзОбработчикаОжидания, 100, 0)) / 1000;
	Попытка
		Запись.Записать(Ложь);
	Исключение
		ЗаписатьВЖурналРегистрации(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ВремяОкончания;
	
КонецФункции

// Процедура устанавливает флаг ОбработчикПодключен
//
// Параметры:
//  Значение - Булево, значение устанавливаемого флага
//
Процедура УстановитьФлаг(ОбработчикПодключен)
	
	Соответствие = ПолучитьПараметрСеанса();
	
	Соответствие.Вставить("%ОбработчикПодключен%", ОбработчикПодключен);
	
	УстановитьПараметрСеанса(Соответствие);
	
КонецПроцедуры

// Функция получает значение параметра сеанса ТекущийЗамерВремени
//
// Возвращаемое занчение:
//  Соответствие - параметр сеанса установлен
//  Неопределено - параметр сеанса не установлен
//
Функция ПолучитьПараметрСеанса(Создавать = Истина)
	
	Попытка
		Возврат ПараметрыСеанса.ТекущийЗамерВремени.Получить();
	Исключение
		Если Создавать Тогда
			Возврат Новый Соответствие;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

// Процедура устанавливает значение параметра сеанса ТекущийЗамерВремени
// Параметры:
//  Соответствие - Произвольный тип данных, значение которое будет помещенов в параметр сеанса ТекущийЗамерВремени
//
Процедура УстановитьПараметрСеанса(Соответствие)
	
	ХранилищеЗначения = Новый ХранилищеЗначения(Соответствие);
	ПараметрыСеанса.ТекущийЗамерВремени = ХранилищеЗначения;
	
КонецПроцедуры

// Функция получает точное время
//
// Возвращаемое значение:
//  Число - время с точностью до миллисекунд
Функция ТочноеВремя()
	
	Инструменты = ПолучитьИнструменты();
	
	Возврат ЗначениеТаймера(Инструменты);
	
КонецФункции

// Функция получает занчение перечисления ОбщаяПроизводительностьСистемы
//
// Возвращаемое значение:
//  ПеречилсениеСсылка - значение перечисления
//  Неопределено - значение перечисления отсутствует
//
Функция ПолучитьПредопределенный() Экспорт
	
	Попытка
		Возврат Перечисления.КлючевыеОперации.ОбщаяПроизводительностьСистемы;
	Исключение
		Возврат Перечисления.КлючевыеОперации.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

// Процедура записывает данные в журнал регистрации
//
Процедура ЗаписатьВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации("Данные.Запись", 
							 УровеньЖурналаРегистрации.Ошибка, 
							 Метаданные.РегистрыСведений.ЗамерыВремени, 
							 "Оценка производительности", 
							 ТекстОшибки);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВНЕШНЕЙ КОМПОНЕНТОЙ

// Получить объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты()
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции // ПолучитьИнструменты()

// Создать объект инструментов
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.ETP.Tools");
	
КонецФункции // СоздатьИнструменты()

// Подключить внешнюю компоненту КИП
//
Процедура ПодключитьВнешнийКомпонент()
	
	ИмяКомпонента = "ОбщийМакет.ОценкаПроизводительностиВнешнийКомпонент";

	Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
		#Если Клиент Тогда
			УстановитьВнешнююКомпоненту(ИмяКомпонента);
		#КонецЕсли
		
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
			ВызватьИсключение "Ошибка подключения внешнего компонента.";
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.4.52";
	
	Если ПодключеннаяВерсия <> ТребуемаяВерсия Тогда
		ВызватьИсключение
			"Версия подключенного внешнего компонента ("
			+ ПодключеннаяВерсия
			+ ") не совпадает с требуемой версией ("
			+ ТребуемаяВерсия
			+ "). Для устранения несоответствия версий, выгрузите всех клиентов"
			" и перезагрузите сервер 1С:Предприятия этой информационной базы.";
	КонецЕсли;
	
КонецПроцедуры // ПодключитьВнешнийКомпонент()

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ВыполнитьМетод()

// Получить значение таймера для замера интервала времени
//
// Параметры:
//  Инструменты - Объект внешнего компонента
//
// Возвращаемое значение:
//  Число - текущее значение таймера в миллисекундах
//
Функция ЗначениеТаймера(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ЗначениеТаймера");
	
КонецФункции // ЗначениеТаймера()

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты)
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции // ВерсияКомпонента()
