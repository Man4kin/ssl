////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНЕШНИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// обработка одного элемента при обмене  - отправка
Процедура ПриОтправкеДанныхФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза = Ложь) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			Если СозданиеНачальногоОбраза = Истина Тогда
		
				Если НЕ ЭлементДанных.Том.Пустая() Тогда
					
					ИмяКаталогаФайлов = ХранилищеОбщихНастроек.Загрузить("ОбменФайлами", "ВременныйКаталог");
					
					ПолныйПуть = РаботаСФайлами.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу; 
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
					
					НовыйПутьФайла = ИмяКаталогаФайлов + "/" + УникальныйИдентификатор;
					
					Попытка
						// если файл в томе - скопируем его во временный каталог (при создании начального образа)
						КопироватьФайл(ПолныйПуть, НовыйПутьФайла);
						ФайлВременный = Новый Файл(НовыйПутьФайла);
						ФайлВременный.УстановитьТолькоЧтение(Ложь);
					Исключение
					КонецПопытки;
					
				КонецЕсли;	
				
			Иначе // обычный обмен - СозданиеНачальногоОбраза = Ложь	
				
				Если НЕ ЭлементДанных.Том.Пустая() Тогда
					// если файл в томе - поместим его в ФайлХранилище, и поменяем ЭлементДанных.ТипХраненияФайла на ВИнформационнойБазе
					
					ПолныйПуть = РаботаСФайлами.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу; 
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
				
					ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
					
					ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
					ЭлементДанных.ПутьКФайлу = "";
					ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// обработка одного элемента при обмене   - прием
Процедура ПриПолученииДанныхФайла(ЭлементДанных) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		ТипХраненияФайлов = ПолучитьТипХраненияФайлов();
		
		ПрежнийПутьНаТоме = "";
		
		Если НЕ ЭлементДанных.ЭтоНовый() Тогда // изменен уже существующий элемент
			
			// файл был на томе - удалим его - т.к. при обмене придет новый
			Если ЭлементДанных.Ссылка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ПрежнийПутьНаТоме = РаботаСФайлами.ПолныйПутьТома(ЭлементДанных.Ссылка.Том) + ЭлементДанных.Ссылка.ПутьКФайлу; 
				
				ФайлВременный = Новый Файл(ПрежнийПутьНаТоме);
				ФайлВременный.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПрежнийПутьНаТоме);
				
				ПутьСПодкаталогом = ФайлВременный.Путь;
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					УдалитьФайлы(ПутьСПодкаталогом);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// при обмене сюда приходит только ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе
		//  если тип хранения базы-приемника такой же (в базе) - ничего не делаем
		//   а вот если в базе приемнике - тип хранения в томах - то разместим на диске
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// тип отличается от типа по умолчанию для данной базы - поменяем
			
			// по обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах
			//  - из ФайлХранилище размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			
			ВремяИзменения = ЭлементДанных.ДатаМодификацииУниверсальная;
			РазмерФайла = ЭлементДанных.Размер;
			ИмяБезРасширения = ЭлементДанных.Наименование;
			Расширение = ЭлементДанных.Расширение;

			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			// добавить в один из томов (где есть свободное место)
			РаботаСФайлами.ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, ЭлементДанных.НомерВерсии, ИмяБезРасширения, Расширение, РазмерФайла);
			ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
			ЭлементДанных.Том = СсылкаНаТом.Ссылка;
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(""); // очистим ФайлХранилище
			
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры


// Создать файловый начальный образ на сервере
Функция СоздатьФайловыйНачальныйОбразНаСервере(Узел, УникальныйИдентификаторФормы, Язык, ПолноеИмяФайловойБазыWindows, ПолноеИмяФайловойБазыLinux, ПутьКАрхивуСФайламиТомовWindows, ПутьКАрхивуСФайламиТомовLinux) Экспорт
	
	ПутьКАрхивуСФайламиТомов = "";
	ПолноеИмяФайловойБазы = "";
	
	ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		ПутьКАрхивуСФайламиТомов = ПутьКАрхивуСФайламиТомовWindows;
		ПолноеИмяФайловойБазы = ПолноеИмяФайловойБазыWindows;
		
		Если Не ПустаяСтрока(ПутьКАрхивуСФайламиТомов) И (Лев(ПутьКАрхивуСФайламиТомов, 2) <> "\\" ИЛИ Найти(ПутьКАрхивуСФайламиТомов, ":") <> 0) Тогда
			ТекстОшибки = НСтр("ru = 'Путь к файловой базе должен быть в формате UNC (\\servername\resource) '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьКАрхивуСФайламиТомовWindows");
			Возврат Ложь;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ПолноеИмяФайловойБазы) И (Лев(ПолноеИмяФайловойБазы, 2) <> "\\" ИЛИ Найти(ПолноеИмяФайловойБазы, ":") <> 0) Тогда
			ТекстОшибки = НСтр("ru = 'Путь к архиву с файлами томов должен быть в формате UNC (\\servername\resource) '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолноеИмяФайловойБазыWindows");
			Возврат Ложь;
		КонецЕсли;	
		
	Иначе	
		ПутьКАрхивуСФайламиТомов = ПутьКАрхивуСФайламиТомовLinux;
		ПолноеИмяФайловойБазы = ПолноеИмяФайловойБазыLinux;
	КонецЕсли;
	
	Если ПустаяСтрока(ПолноеИмяФайловойБазы) Тогда
		
		Текст = НСтр("ru = 'Укажите полное имя файловой базы (файл 1cv8.1cd)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ПолноеИмяФайловойБазыWindows");
		Возврат Ложь;
	КонецЕсли;	
	ФайлБазы = Новый Файл(ПолноеИмяФайловойБазы);
	Если ФайлБазы.Существует() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1"" уже существует. Введите другое имя файла.'"), ПолноеИмяФайловойБазы);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ПолноеИмяФайловойБазыWindows");
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПустаяСтрока(ПутьКАрхивуСФайламиТомов) Тогда
		Текст = НСтр("ru = 'Укажите полное имя архива с файлами томов (файл *.zip)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ПутьКАрхивуСФайламиТомовWindows");
		Возврат Ложь;
	КонецЕсли;	
	
	ПутьФайла = ПутьКАрхивуСФайламиТомов;
	Файл = Новый Файл(ПутьФайла);
	Если Файл.Существует() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1"" уже существует. Введите другое имя файла.'"), ПутьФайла);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ПутьКАрхивуСФайламиТомовWindows");
		Возврат Ложь;
	КонецЕсли;	
	
	
	// создать временный каталог
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	
	// создать временный каталог для файлов
	ИмяКаталогаФайлов = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталогаФайлов);
	
	ХранилищеОбщихНастроек.Сохранить("ОбменФайлами", "ВременныйКаталог", ИмяКаталогаФайлов);
	
	ZIP = Неопределено;
	Запись = Неопределено;
	
	Попытка
		
		СтрокаСоединения = "File=""" + ИмяКаталога + """;" 
						 + "Locale=""" + Язык + """;";
		ПланыОбмена.СоздатьНачальныйОбраз(Узел, СтрокаСоединения);  // собственно создание начального образа
		
		ZIP = Новый ЗаписьZipФайла;
		ПутьZIP = ПутьФайла;
		ZIP.Открыть(ПутьZIP);
		
		ВременныеФайлы = Новый Массив;
		ВременныеФайлы = НайтиФайлы(ИмяКаталогаФайлов, "*.*");
		
		Для Каждого ВременныйФайл Из ВременныеФайлы Цикл
			Если ВременныйФайл.ЭтоФайл() Тогда
				ПутьВременногоФайла = ВременныйФайл.ПолноеИмя;
				ZIP.Добавить(ПутьВременногоФайла);
			КонецЕсли;
		КонецЦикла;
		
		ZIP.Записать();
		
		УдалитьФайлы(ИмяКаталогаФайлов); // удаляем вместе с файлами внутри
		
	Исключение
		
		УдалитьФайлы(ИмяКаталога);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПутьВременногоФайлаБазы = ИмяКаталога + "\1Cv8.1CD";
	ПереместитьФайл(ПутьВременногоФайлаБазы, ПолноеИмяФайловойБазы);
	
	// очистка
	УдалитьФайлы(ИмяКаталога);
	
	Возврат Истина;
КонецФункции

// Создать серверный начальный образ на сервере
Функция СоздатьСерверныйНачальныйОбразНаСервере(Узел, СтрокаСоединения, ПутьКАрхивуСФайламиТомовWindows, ПутьКАрхивуСФайламиТомовLinux) Экспорт
	
	ПутьКАрхивуСФайламиТомов = "";
	ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		ПутьКАрхивуСФайламиТомов = ПутьКАрхивуСФайламиТомовWindows;
		
		Если Не ПустаяСтрока(ПутьКАрхивуСФайламиТомов) И (Лев(ПутьКАрхивуСФайламиТомов, 2) <> "\\" ИЛИ Найти(ПутьКАрхивуСФайламиТомов, ":") <> 0) Тогда
			ТекстОшибки = НСтр("ru = 'Путь к файловой базе должен быть в формате UNC (\\servername\resource) '");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьКАрхивуСФайламиТомовWindows");
			Возврат Ложь;
		КонецЕсли;	
		
	Иначе	
		ПутьКАрхивуСФайламиТомов = ПутьКАрхивуСФайламиТомовLinux;
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКАрхивуСФайламиТомов) Тогда
		Текст = НСтр("ru = 'Укажите полное имя архива с файлами томов (файл *.zip)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ПутьКАрхивуСФайламиТомовWindows");
		Возврат Ложь;
	КонецЕсли;	
	
	ПутьФайла = ПутьКАрхивуСФайламиТомов;
	Файл = Новый Файл(ПутьФайла);
	Если Файл.Существует() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1"" уже существует. Введите другое имя файла.'"), ПутьФайла);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Ложь;
	КонецЕсли;	
	
	// создать временный каталог
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	
	// создать временный каталог для файлов
	ИмяКаталогаФайлов = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталогаФайлов);
	
	ХранилищеОбщихНастроек.Сохранить("ОбменФайлами", "ВременныйКаталог", ИмяКаталогаФайлов);
	
	ZIP = Неопределено;
	Запись = Неопределено;
	
	Попытка
		
		ПланыОбмена.СоздатьНачальныйОбраз(Узел, СтрокаСоединения);
		
		ZIP = Новый ЗаписьZipФайла;
		ПутьZIP = ПутьФайла;
		ZIP.Открыть(ПутьZIP);
		
		ВременныеФайлы = Новый Массив;
		ВременныеФайлы = НайтиФайлы(ИмяКаталогаФайлов, "*.*");
		
		Для Каждого ВременныйФайл Из ВременныеФайлы Цикл
			Если ВременныйФайл.ЭтоФайл() Тогда
				ПутьВременногоФайла = ВременныйФайл.ПолноеИмя;
				ZIP.Добавить(ПутьВременногоФайла);
			КонецЕсли;
		КонецЦикла;
		
		ZIP.Записать();
		УдалитьФайлы(ИмяКаталогаФайлов); // удаляем вместе с файлами внутри
		
	Исключение
		
		УдалитьФайлы(ИмяКаталога);
		ВызватьИсключение;
		
	КонецПопытки;
	
	// очистка
	УдалитьФайлы(ИмяКаталога);
	
	Возврат Истина;
КонецФункции

//Есть ли хоть один том хранения файлов
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	ТипХраненияФайлов = ПолучитьТипХраненияФайлов();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Возврат Истина; // тут не проверяем наличие томов
	КонецЕсли;		
	
	Выборка = Справочники.ТомаХраненияФайлов.Выбрать(,,, "ПорядокЗаполнения Возр");
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

// получает ТипХраненияФайлов у информационной базы
Функция ПолучитьТипХраненияФайлов()
	УстановитьПривилегированныйРежим(Истина);
	ТипХраненияФайлов = Константы.ТипХраненияФайлов.Получить();
	Возврат ТипХраненияФайлов;
КонецФункции	

// Размещает файлы в томах, устанавливая ссылки в ВерсииФайла
Функция ДобавитьФайлыВТома(ПутьКАрхивуWindows, ПутьКАрхивуLinux) Экспорт
	
	ПолноеИмяФайлаZip = "";
	ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		ПолноеИмяФайлаZip = ПутьКАрхивуWindows;
	Иначе
		ПолноеИмяФайлаZip = ПутьКАрхивуLinux;
	КонецЕсли;	
	
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	
	ZIP = Новый ЧтениеZipФайла(ПолноеИмяФайлаZip);
	ZIP.ИзвлечьВсе(ИмяКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	СоответствиеПутейФайлов = Новый Соответствие;
	
	Для Каждого ZIPЭлемент Из ZIP.Элементы Цикл
		ПолныйПутьФайла = ИмяКаталога + "/" + ZIPЭлемент.Имя;
		УникальныйИдентификатор = ZIPЭлемент.ИмяБезРасширения;
		
		СоответствиеПутейФайлов.Вставить(УникальныйИдентификатор, ПолныйПутьФайла);
	КонецЦикла;
	
	ТипХраненияФайлов = ПолучитьТипХраненияФайлов();
	
	НачатьТранзакцию();
	Попытка
		Выборка = Справочники.ВерсииФайлов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Если Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				УникальныйИдентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор());
				
				ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(УникальныйИдентификатор);
				Если ПолныйПутьФайлаНаДиске <> Неопределено Тогда
					
					// в базе-приемнике файлы должны храниться в информационной базе - значит там их и разместим (даже если в исходной базе они были в томах)
					Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
						
						Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
						Объект.ПутьКФайлу = "";
						Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
						
						ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
						Объект.ФайлХранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
						
					Иначе // в базе-приемнике файлы должны храниться в томах на диске - переместим разархивированный файл на том
						
						ФайлИсх = Новый Файл(ПолныйПутьФайлаНаДиске);
						РазмерФайла = ФайлИсх.Размер();
						
						ВремяИзменения = Объект.ДатаМодификацииУниверсальная;
						ИмяБезРасширения = Объект.Наименование;
						Расширение = Объект.Расширение;

						ПолныйПутьНовый = ФайлИсх.Путь + ИмяБезРасширения + "." + Объект.Расширение;
						ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
						
						ПутьКФайлуНаТоме = "";
						СсылкаНаТом = Неопределено;
						// добавить в один из томов (где есть свободное место)
						РаботаСФайлами.ДобавитьНаДиск(ПолныйПутьНовый, ПутьКФайлуНаТоме, СсылкаНаТом, ВремяИзменения, Объект.НомерВерсии, ИмяБезРасширения, Расширение, РазмерФайла);
						Объект.ПутьКФайлу = ПутьКФайлуНаТоме;
						Объект.Том = СсылкаНаТом.Ссылка;
						
					КонецЕсли;	
					
					Объект.Записать();
					УдалитьФайлы(ПолныйПутьНовый);
					
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// очистим регистрацию изменений ВерсииФайлов, которые мы только что сделали
	Для Каждого ПланОбмена из Метаданные.ПланыОбмена Цикл
	    ИмяПланаОбмена      = ПланОбмена.Имя;
	    МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
		
		ЭтотУзел = МенеджерПланаОбмена.ЭтотУзел();	
		Выборка = МенеджерПланаОбмена.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПланОбменаОбъект = Выборка.ПолучитьОбъект();
			Если ПланОбменаОбъект.Ссылка <> ЭтотУзел Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаОбъект.Ссылка, Метаданные.Справочники.ВерсииФайлов);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции
