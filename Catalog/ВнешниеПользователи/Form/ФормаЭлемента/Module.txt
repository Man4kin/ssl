
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//** Установка начальных значений
	//   перед загрузкой данных из настроек на сервере
	//   для случая, когда данные ещё не были записаны и не загружаются
	ПоказатьТолькоВыбранныеРоли = (Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли);
	
	//** Заполнение постоянных данных
	
	ПодготовитьСписокВыбораИТаблицуРолей();
	
	// Заполнение списка выбора языка
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
		Элементы.ПредставлениеЯзыка.СписокВыбора.Добавить(МетаданныеЯзыка.Синоним);
	КонецЦикла;
	
	//** Подготовка к интерактивным действиям с учетом сценариев открытия формы
	
	УстановитьДействияСРолями();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента
		Если Параметры.ГруппаНовогоВнешнегоПользователя <> Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			ГруппаНовогоВнешнегоПользователя = Параметры.ГруппаНовогоВнешнегоПользователя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента
			Объект.ОбъектАвторизации = Неопределено;
			Объект.Наименование      = "";
			Объект.Код               = "";
			Объект.УдалитьПароль     = "";
			ПрочитатьПользователяИБ(ЗначениеЗаполнено(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ));
		Иначе
			// Добавление элемента
			Если Параметры.Свойство("ОбъектАвторизацииНовогоВнешнегоПользователя") Тогда
				Объект.ОбъектАвторизации = Параметры.ОбъектАвторизацииНовогоВнешнегоПользователя;
				ОбъектАвторизацииЗаданПриОткрытии = ЗначениеЗаполнено(Объект.ОбъектАвторизации);
				ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(ЭтаФорма, Объект);
			ИначеЕсли ЗначениеЗаполнено(ГруппаНовогоВнешнегоПользователя) Тогда
				ТипОбъектовАвторизации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаНовогоВнешнегоПользователя, "ТипОбъектовАвторизации");
				Объект.ОбъектАвторизации = ТипОбъектовАвторизации;
				Элементы.ОбъектАвторизации.ВыбиратьТип = Ложь;
			КонецЕсли;
			// Чтение начальных значений свойств пользователя ИБ
			ПрочитатьПользователяИБ();
		КонецЕсли;
	Иначе
		// Открытие существующего элемента
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ();
	
	//** Установка постоянной доступности свойств
	Элементы.СвойстваПользователяИБ.Видимость          = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	Элементы.ОтображениеРолей.Видимость                = ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.УстановитьРолиНепосредственно.Видимость   = ЗначениеЗаполнено(ДействияВФорме.Роли) И НЕ ПользователиПереопределяемый.ЗапретРедактированияРолей();
	
	Элементы.УстановитьРолиНепосредственно.Доступность = ДействияВФорме.Роли = "Редактирование";
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
	                 ДействияВФорме.Роли <> "Редактирование" И
	                 НЕ ( ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" ИЛИ
	                      ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих"     ) И
	                 ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекущееПредставлениеОбъектаАвторизации = Строка(Объект.ОбъектАвторизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	ОчиститьСообщения();
	
	Если ДействияВФорме.Роли = "Редактирование" И Объект.УстановитьРолиНепосредственно И Роли.Количество() = 0 Тогда
	
		Если Вопрос(НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'"),
		            РежимДиалогаВопрос.ДаНет,
		            ,
		            ,
		            НСтр("ru = 'Запись пользователя информационной базы'")) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;
	
	Если ВнешниеПользователи.ОбъектАвторизацииИспользуется(Объект.ОбъектАвторизации, Объект.Ссылка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Объект информационной базы уже используется для другого внешнего пользователя!'"), ,
						"Объект.ОбъектАвторизации", ,
						Отказ);
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоВнешнегоПользователя", ГруппаНовогоВнешнегоПользователя);
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		
		ЗаписатьПользователяИБ(ТекущийОбъект, Отказ);
		Если НЕ Отказ Тогда
			Если ТекущийОбъект.ИдентификаторПользователяИБ <> СтарыйИдентификаторПользователяИБ Тогда
				ПараметрыЗаписи.Вставить("ДобавленПользовательИБ", ТекущийОбъект.ИдентификаторПользователяИБ);
			Иначе
				ПараметрыЗаписи.Вставить("ИзмененПользовательИБ", ТекущийОбъект.ИдентификаторПользователяИБ);
			КонецЕсли
		КонецЕсли;
		
	ИначеЕсли НЕ ЕстьСвязьСНесуществующимПользователемИБ ИЛИ
	          ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" Тогда
		
		ТекущийОбъект.ИдентификаторПользователяИБ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ДоступКИнформационнойБазеРазрешен И ПользовательИБСуществует Тогда
		УдалитьПользователяИБ(Отказ);
		Если НЕ Отказ Тогда
			ПараметрыЗаписи.Вставить("УдаленПользовательИБ", СтарыйИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	ПрочитатьПользователяИБ();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищенаСвязьСНесуществущимПользователемИБ") Тогда
		Оповестить("ОчищенаСвязьСНесуществущимПользователемИБ", ПараметрыЗаписи.ОчищенаСвязьСНесуществущимПользователемИБ, ЭтаФорма);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНовогоВнешнегоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоВнешнегоПользователя);
		Оповестить("ИзмененСоставГруппыВнешнихПользователей", ГруппаНовогоВнешнегоПользователя, ЭтаФорма);
		ГруппаНовогоВнешнегоПользователя = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		
		ОбработкаПроверкиЗаполненияСпискаРолей(Отказ);
		
		Если НЕ Отказ И ПустаяСтрока(ПользовательИнфБазыИмя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Не заполнено имя пользователя информационной базы.'"), ,
							"ПользовательИнфБазыИмя", ,
							Отказ);
		КонецЕсли;
		
		Если НЕ Отказ И ПользовательИнфБазыПароль <> Неопределено  И Пароль <> ПодтверждениеПароля Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"), ,
							"Пароль", ,
							Отказ);
		КонецЕсли;
		
		Если ТребуетсяСоздатьПервогоАдминистратора() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Первый пользователь информационной базы должен иметь полные права.
					           |Внешний пользователь не может быть полноправным.
					           |Сначала создайте обычного пользователя-администратора.'"), ,
					"ДоступКИнформационнойБазеРазрешен", ,
					Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьТолькоВыбранныеРоли"] = Ложь Тогда
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.СредиВсехВыбранныеРоли;
	Иначе
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура ОбъектАвторизацииПриИзменении(Элемент)
	
	ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступКИнформационнойБазеРазрешенПриИзменении(Элемент)
	
	Если НЕ ПользовательИБСуществует И ДоступКИнформационнойБазеРазрешен Тогда
		ПользовательИнфБазыИмя = ПолучитьКраткоеИмяПользователяИБ(ТекущееПредставлениеОбъектаАвторизации);
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПользовательИнфБазыПароль = Пароль;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРолиНепосредственноПриИзменении(Элемент)
	
	Если НЕ Объект.УстановитьРолиНепосредственно Тогда
		ПрочитатьПользователяИБ(, Истина);
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

//** Для работы интерфейса ролей

&НаКлиенте
Процедура ПодобратьРоли(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ЗакрыватьПриВыборе", Ложь), Элементы.Роли);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриИзменении(Элемент)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранныеРоли(ВыбранноеЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура СинонимРолиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.СинонимРоли) Тогда
		Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	Иначе
		Элементы.Роли.ТекущиеДанные.Роль = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = ?(Элементы.Роли.ТекущиеДанные = Неопределено, Неопределено, Элементы.Роли.ТекущиеДанные.Роль);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ТекущаяСтрока", НачальноеЗначение), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Роли.ТекущиеДанные.Роль        = ВыбранноеЗначение;
	Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРолейПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаРолей.ТекущиеДанные;
	
	НайденныеРоли = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
	
	Если СтрокаТаблицы.Пометка Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	ИначеЕсли НайденныеРоли.Количество() > 0 Тогда
		Роли.Удалить(НайденныеРоли[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	
	Элементы.ОтображениеРолей.ТекущаяСтраница = ?(ПоказатьТолькоВыбранныеРоли, Элементы.ТолькоВыбранныеРоли, Элементы.СредиВсехВыбранныеРоли);
	ТекущийЭлемент = ?(ПоказатьТолькоВыбранныеРоли, Элементы.Роли, Элементы.ТаблицаРолей);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СнятьФлажкиНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0;
	
КонецФункции

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	ДействияВФорме.Вставить("Роли",                   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СвойстваПользователяИБ", ""); // "", "ПросмотрВсех", "РедактированиеВсех", "РедактированиеСвоих"
	ДействияВФорме.Вставить("СвойстваЭлемента",       ""); // "", "Просмотр",     "Редактирование"
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() ИЛИ
	     ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи) Тогда
		// Администратор
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	ИначеЕсли РольДоступна("ДобавлениеИзменениеВнешнихПользователей") Тогда
		// Менеджер внешних пользователей
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
		
	ИначеЕсли ЗначениеЗаполнено(ВнешниеПользователи.ТекущийВнешнийПользователь()) И
	          Объект.Ссылка = ВнешниеПользователи.ТекущийВнешнийПользователь() Тогда
		// Свои свойства
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	Иначе
		// Читатель внешних пользователей
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СвойстваПользователяИБ = "";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.ОбъектАвторизации) Тогда
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	КонецЕсли;
	
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	Если Найти(", ПросмотрВсех, РедактированиеВсех, РедактированиеСвоих,", ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбъектАвторизацииПриИзмененииНаКлиентеНаСервере(Контекст, Объект)
	
	Если Объект.ОбъектАвторизации = Неопределено Тогда
		Объект.ОбъектАвторизации = Контекст.ТипОбъектовАвторизации;
	КонецЕсли;
	
	Если Контекст.ТекущееПредставлениеОбъектаАвторизации <> Строка(Объект.ОбъектАвторизации) Тогда
		
		Контекст.ТекущееПредставлениеОбъектаАвторизации = Строка(Объект.ОбъектАвторизации);
		
		Если НЕ Контекст.ПользовательИБСуществует И Контекст.ДоступКИнформационнойБазеРазрешен Тогда
			Контекст.ПользовательИнфБазыИмя = ПолучитьКраткоеИмяПользователяИБ(Контекст.ТекущееПредставлениеОбъектаАвторизации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//** Чтение, запись, удаление, расчет краткого имени пользователя ИБ, проверка несоответствия

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь, ТолькоРоли = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеРоли = Неопределено;
	
	Если ТолькоРоли Тогда
		Пользователи.ПрочитатьПользователяИБ(Объект.ИдентификаторПользователяИБ, , ПрочитанныеРоли);
		ЗаполнитьРоли(ПрочитанныеРоли);
		Возврат;
	КонецЕсли;
	
	Пароль              = "";
	ПодтверждениеПароля = "";
	ПрочитанныеСвойства               = Неопределено;
	СтарыйИдентификаторПользователяИБ = Неопределено;
	ПользовательИБСуществует          = Ложь;
	ДоступКИнформационнойБазеРазрешен = Ложь;
	
	// Заполнение начальных значений свойств пользователяИБ у пользователя.
	Пользователи.ПрочитатьПользователяИБ(Неопределено, ПрочитанныеСвойства, ПрочитанныеРоли);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПрочитанныеСвойства);
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ, ПрочитанныеСвойства, ПрочитанныеРоли) Тогда
			// Т.к. у скопированного пользователя есть связь с пользователемИБ,
			// то устанавливается будущая связь и у нового пользователя.
			ДоступКИнформационнойБазеРазрешен = Истина;
			// Т.к. пользовательИБ скопированного пользователя прочитан,
			// то копируются свойства и роли пользователяИБ.
			ЗаполнитьЗначенияСвойств(ЭтаФорма,
			                         ПрочитанныеСвойства,
			                         "ПользовательИнфБазыЗапрещеноИзменятьПароль");
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства, ПрочитанныеРоли) Тогда
		
			ПользовательИБСуществует          = Истина;
			ДоступКИнформационнойБазеРазрешен = Истина;
			СтарыйИдентификаторПользователяИБ = Объект.ИдентификаторПользователяИБ;
			
			ЗаполнитьЗначенияСвойств(ЭтаФорма,
			                         ПрочитанныеСвойства,
			                         "ПользовательИнфБазыИмя,
			                         |ПользовательИнфБазыЗапрещеноИзменятьПароль");
			
			Если ПрочитанныеСвойства.ПользовательИнфБазыПарольУстановлен Тогда
				Пароль              = "**********";
				ПодтверждениеПароля = "**********";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПредставлениеЯзыка(ПрочитанныеСвойства.ПользовательИнфБазыЯзык);
	ЗаполнитьРоли(ПрочитанныеРоли);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПользователяИБ(ТекущийОбъект, Отказ)
	
	// Восстановление действий в форме, если они изменены на клиенте
	ОпределитьДействияВФорме();
	
	Если НЕ (ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" ИЛИ
	         ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих"    )Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачальныеСвойства = Неопределено;
	НовыеСвойства     = Неопределено;
	НовыеРоли         = Неопределено;
	
	// Чтение старых свойств/заполнение начальных свойств пользователяИБ у пользователя.
	Пользователи.ПрочитатьПользователяИБ(ТекущийОбъект.ИдентификаторПользователяИБ, НовыеСвойства);
	НовыеСвойства.ПользовательИнфБазыПолноеИмя                 = Строка(ТекущийОбъект.ОбъектАвторизации);
	НовыеСвойства.ПользовательИнфБазыАутентификацияСтандартная = Истина;
	
	Пользователи.ПрочитатьПользователяИБ(Неопределено, НачальныеСвойства);
	ЗаполнитьЗначенияСвойств(НовыеСвойства,
	                         НачальныеСвойства,
	                         "ПользовательИнфБазыПоказыватьВСпискеВыбора,
	                         |ПользовательИнфБазыАутентификацияОС,
	                         |ПользовательИнфБазыОсновнойИнтерфейс,
	                         |ПользовательИнфБазыРежимЗапуска");
	
	Если ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" Тогда
		ЗаполнитьЗначенияСвойств(НовыеСвойства,
		                         ЭтаФорма,
		                         "ПользовательИнфБазыИмя,
		                         |ПользовательИнфБазыПароль,
		                         |ПользовательИнфБазыЗапрещеноИзменятьПароль");
	Иначе
		ЗаполнитьЗначенияСвойств(НовыеСвойства,
		                         ЭтаФорма,
		                         "ПользовательИнфБазыИмя,
		                         |ПользовательИнфБазыПароль");
	КонецЕсли;
	НовыеСвойства.ПользовательИнфБазыЯзык = ПолучитьВыбранныйЯзык();
		
	Если ДействияВФорме.Роли = "Редактирование" И Объект.УстановитьРолиНепосредственно Тогда
		НовыеРоли = Роли.Выгрузить().ВыгрузитьКолонку("Роль");
	КонецЕсли;
	
	// Попытка записи пользователя ИБ
	ОписаниеОшибки = "";
	Если Пользователи.ЗаписатьПользователяИБ(ТекущийОбъект.ИдентификаторПользователяИБ, НовыеСвойства, НовыеРоли, НЕ ПользовательИБСуществует, ОписаниеОшибки) Тогда
		Если НЕ ПользовательИБСуществует Тогда
			ТекущийОбъект.ИдентификаторПользователяИБ = НовыеСвойства.ПользовательИнфБазыУникальныйИдентификатор;
			ПользовательИБСуществует = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьПользователяИБ(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеОшибки = "";
	Если НЕ Пользователи.УдалитьПользователяИБ(СтарыйИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , , , Отказ);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКраткоеИмяПользователяИБ(Знач ПолноеИмя)
	
	КраткоеИмя = "";
	ПервыйПроходЦикла = Истина;
	
	Пока Истина Цикл
		Если НЕ ПервыйПроходЦикла Тогда
			КраткоеИмя = КраткоеИмя + ВРег(Лев(ПолноеИмя, 1));
		КонецЕсли;
		ПозицияПробела = Найти(ПолноеИмя, " ");
		Если ПозицияПробела = 0 Тогда
			Если ПервыйПроходЦикла Тогда
				КраткоеИмя = ПолноеИмя;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если ПервыйПроходЦикла Тогда
			КраткоеИмя = Лев(ПолноеИмя, ПозицияПробела - 1);
		КонецЕсли;
		
		ПолноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - ПозицияПробела);
		
		ПервыйПроходЦикла = Ложь;
	КонецЦикла;
	
	КраткоеИмя = СтрЗаменить(КраткоеИмя, " ", "");
	
	Возврат КраткоеИмя;
	
КонецФункции

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено) Экспорт
	
	//** Определение связи с несуществующим пользователем ИБ
	ЕстьНоваяСвязьСНесуществующимПользователемИБ = НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСвязьСНесуществующимПользователемИБ
	   И НЕ ЕстьНоваяСвязьСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищенаСвязьСНесуществущимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСвязьСНесуществующимПользователемИБ = ЕстьНоваяСвязьСНесуществующимПользователемИБ;
	
	Если ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех" Тогда
		// Связь не может быть изменена
		Элементы.СвязьОбработкаНесоответствия.Видимость = Ложь;
	Иначе
		Элементы.СвязьОбработкаНесоответствия.Видимость = ЕстьСвязьСНесуществующимПользователемИБ;
	КонецЕсли;
	
КонецПроцедуры

//** Начальное заполнение, проверка заполнения, доступность свойств

&НаСервере
Процедура ЗаполнитьПредставлениеЯзыка(Язык)
	
	ПредставлениеЯзыка = "";
	
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
	
		Если МетаданныеЯзыка.Имя = Язык Тогда
			ПредставлениеЯзыка = МетаданныеЯзыка.Синоним;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныйЯзык()
	
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
	
		Если МетаданныеЯзыка.Синоним = ПредставлениеЯзыка Тогда
			Возврат МетаданныеЯзыка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРоли(ПрочитанныеРоли)
	
	Роли.Очистить();
	
	Для каждого Роль Из ПрочитанныеРоли Цикл
		НоваяСтрока = Роли.Добавить();
		НоваяСтрока.Роль        = Роль;
		НоваяСтрока.СинонимРоли = ТаблицаРолей.НайтиСтроки(Новый Структура("Имя", Роль))[0].Синоним;
	КонецЦикла;
	
	Роли.Сортировать("СинонимРоли");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСвойств()
	
	Элементы.ОбъектАвторизации.ТолькоПросмотр                            = ДействияВФорме.СвойстваЭлемента       <> "Редактирование" ИЛИ
	                                                                       ОбъектАвторизацииЗаданПриОткрытии ИЛИ
	                                                                       ЗначениеЗаполнено(Объект.Ссылка) И
	                                                                           ЗначениеЗаполнено(Объект.ОбъектАвторизации);
	Элементы.ДоступКИнформационнойБазеРазрешен.ТолькоПросмотр            = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.СвойстваПользователяИБ.ТолькоПросмотр                       = ДействияВФорме.СвойстваПользователяИБ =  "ПросмотрВсех";
	Элементы.Пароль.ТолькоПросмотр                                       = ПользовательИнфБазыЗапрещеноИзменятьПароль;
	Элементы.ПодтверждениеПароля.ТолькоПросмотр                          = ПользовательИнфБазыЗапрещеноИзменятьПароль;
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.ТолькоПросмотр   = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	УстановитьТолькоПросмотрРолей(ДействияВФорме.Роли <> "Редактирование" ИЛИ НЕ Объект.УстановитьРолиНепосредственно);
	
	Элементы.ОсновныеСвойства.Доступность                     = ДоступКИнформационнойБазеРазрешен;
	Элементы.РедактированиеИлиПросмотрРолей.Доступность       = ДоступКИнформационнойБазеРазрешен;
	Элементы.ПользовательИнфБазыИмя.АвтоОтметкаНезаполненного = ДоступКИнформационнойБазеРазрешен;
	
КонецПроцедуры

//** Для работы интерфейса ролей

&НаСервере
Процедура УстановитьДействияСРолями()
	
	ЗапретРедактирования = ПользователиПереопределяемый.ЗапретРедактированияРолей();
	
	// ** ТолькоВыбранныеРоли
	// Основное меню
	Элементы.РолиПодобрать.Видимость                       = НЕ ЗапретРедактирования;
	Элементы.РолиДобавить.Видимость                        = НЕ ЗапретРедактирования;
	Элементы.РолиУдалить.Видимость                         = НЕ ЗапретРедактирования;
	Элементы.РолиПереместитьВверх.Видимость                = НЕ ЗапретРедактирования;
	Элементы.РолиПереместитьВниз.Видимость                 = НЕ ЗапретРедактирования;
	Элементы.РолиСортироватьСписокПоВозрастанию.Видимость  = НЕ ЗапретРедактирования;
	Элементы.РолиСортироватьСписокПоУбыванию.Видимость     = НЕ ЗапретРедактирования;
	// Контекстное меню
	Элементы.КонтекстноеМенюРолиПодобрать.Видимость        = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиДобавить.Видимость         = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиУдалить.Видимость          = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиПереместитьВверх.Видимость = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиПереместитьВниз.Видимость  = НЕ ЗапретРедактирования;
	
	// ** СредиВсехВыбранныеРоли
	// Основное меню
	Элементы.ТаблицаРолейУстановитьФлажки.Видимость               = НЕ ЗапретРедактирования;
	Элементы.ТаблицаРолейСнятьФлажки.Видимость                    = НЕ ЗапретРедактирования;
	Элементы.ТаблицаРолейСортироватьСписокПоВозрастанию.Видимость = НЕ ЗапретРедактирования;
	Элементы.ТаблицаРолейСортироватьСписокПоУбыванию.Видимость    = НЕ ЗапретРедактирования;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Истина;
		
		НайденныеРоли = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Ложь;
		
		НайденныеРоли = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() > 0 Тогда
			Роли.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеРоли(ВыбранныеРоли)
	
	Для каждого Значение Из ВыбранныеРоли Цикл
	
		ЭлементСписка = СписокВыбораРолей.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			
			Если Роли.НайтиСтроки(Новый Структура("Роль", Значение)).Количество() = 0 Тогда
				
				Строка = Роли.Добавить();
				Строка.Роль        = ЭлементСписка.Значение;
				Строка.СинонимРоли = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбораИТаблицуРолей()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	ВсеРоли.Сортировать("Синоним");
	
	Для каждого Строка Из ВсеРоли Цикл
		// Заполнение списка выбора
		СписокВыбораРолей.Добавить(Строка.Имя, Строка.Синоним);
		// Заполнение таблицы ролей
		СтрокаТаблицы = ТаблицаРолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей)
	
	Элементы.Роли.ТолькоПросмотр         = ТолькоПросмотрРолей;
	Элементы.ТаблицаРолей.ТолькоПросмотр = ТолькоПросмотрРолей;
	
	Элементы.РолиПодобрать.Доступность                = НЕ ТолькоПросмотрРолей;
	Элементы.КонтекстноеМенюРолиПодобрать.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеВыбораРолей(Текст)
	
	Список = СписокВыбораРолей.Скопировать();
	
	НомерЭлемента = Список.Количество()-1;
	Пока НомерЭлемента >= 0 Цикл
		Если ВРег(Лев(Список[НомерЭлемента].Представление, СтрДлина(Текст))) <> ВРег(Текст) Тогда
			Список.Удалить(НомерЭлемента);
		КонецЕсли;
		НомерЭлемента = НомерЭлемента - 1;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ПометитьРолиПоСписку()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя)).Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияСпискаРолей(Отказ)
	
	// Проверка незаполненных и повторяющихся ролей.
	НомерСтроки = Роли.Количество()-1;
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
	
		ТекущаяСтрока = Роли.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СинонимРоли) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Роль не заполнена!'"),
			                                                  ,
			                                                  "Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Роли.НайтиСтроки(Новый Структура("Роль", ТекущаяСтрока.Роль));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Роль повторяется!'"),
			                                                  ,
			                                                  "Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры


