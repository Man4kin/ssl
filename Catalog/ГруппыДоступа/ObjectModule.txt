

// Обработчик события ПередЗаписью формирует временную таблицу старых пользователей
// для обработчика ПриЗаписи.
//
Процедура ПередЗаписью(Отказ)
	
	// Следующие строки необходимо, чтобы предотвратить возможность администратору пользователей
	// повысить себя до администратора программным путем, т.к. запись групп доступа администратору
	// пользователей разрешена.
	// Для обмена данными эти строки критичны, если выполняется попытка записать загруженный профиль
	// со ссылкой на предопределенный профиль Администратор.
	// Такие данные загружать недопустимо.
	Если Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
		Если НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава") Тогда
			ВызватьИсключение(НСтр("ru = 'Предопределенную группу доступа Администраторы могут
			                             |изменять только Администраторы!'"));
		КонецЕсли;
	ИначеЕсли Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
		ВызватьИсключение(НСтр("ru = 'Предопределенный профиль Администратор может быть только
		                             |у предопределенной группы доступа Администраторы!'"));
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И НЕ ДополнительныеСвойства.Свойство("НеОбновлятьРолиПользователей") Тогда
		
		// Запоминание старых пользователей группы.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ПользователиИГруппыПользователей.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи)))
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И ГруппыДоступаПользователи.Пользователь = ПользователиИГруппыПользователей.ГруппаДоступа
		|			И (ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа)
		|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
		|				ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))");
		Запрос.УстановитьПараметр("ГруппаДоступа", Ссылка);
		ЭтотОбъект.ДополнительныеСвойства.Вставить("СтарыеПользователиГруппы", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи обновляет
// - роли добавленных, оставшихся и удаленных пользователей;
// - РегистрСведений.ТаблицыГруппДоступа;
// - РегистрСведений.ЗначенияГруппДоступа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
	
		Если НЕ ДополнительныеСвойства.Свойство("НеОбновлятьРолиПользователей") Тогда
		
			// Обновление ролей для добавленных, оставшихся и удаленных пользователей.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтарыеПользователиГруппы.Пользователь
			|ПОМЕСТИТЬ СтарыеПользователиГруппы
			|ИЗ
			|	&СтарыеПользователиГруппы КАК СтарыеПользователиГруппы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтарыеПользователиГруппы.Пользователь
			|ИЗ
			|	СтарыеПользователиГруппы КАК СтарыеПользователиГруппы
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПользователиИГруппыПользователей.ЗначениеДоступа
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|		ПО (ПользователиИГруппыПользователей.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи)))
			|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
			|			И ГруппыДоступаПользователи.Пользователь = ПользователиИГруппыПользователей.ГруппаДоступа
			|			И (ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа)
			|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
			|				ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))");
			Запрос.УстановитьПараметр("ГруппаДоступа", Ссылка);
			Запрос.Параметры.Вставить("СтарыеПользователиГруппы", ДополнительныеСвойства.СтарыеПользователиГруппы);
			ИзмененныеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
			
			Если Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
				// Добавление пользователей, связанных с пользователямиИБ, имеющих роль ПолныеПрава
				УстановитьПривилегированныйРежим(Истина);
				Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
					Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
						Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
						Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
							Пользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
						КонецЕсли;
						Если ЗначениеЗаполнено(Пользователь)
						   И ИзмененныеПользователи.Найти(Пользователь) = Неопределено Тогда
							ИзмененныеПользователи.Добавить(Пользователь);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			ЕстьОшибки = Ложь;
			УправлениеДоступом.ОбновитьРолиПользователей(ИзмененныеПользователи, ЕстьОшибки);
			Если ЕстьОшибки И НЕ ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
				ДополнительныеСвойства.Вставить("ЕстьОшибки");
			КонецЕсли;
		КонецЕсли;
		
		УправлениеДоступом.ОбновитьТаблицыГруппДоступа(Ссылка);
		
		УправлениеДоступом.ЗаписатьЗначенияГруппДоступа(Ссылка);
	
	КонецЕсли;
	
КонецПроцедуры

