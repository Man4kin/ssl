
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//** Подготовка постоянных коллекций
	
	// Заполнение списка видов доступа через права по значениям доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа().НайтиСтроки(Новый Структура("ВидДоступаЧерезПраваПоЗначениямДоступа", Истина)) Цикл
		ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	// Заполнение типов значений доступа всех видов доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа() Цикл
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта), МетаданныеТипа.ПредставлениеОбъекта, МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ПрофильАдминистратор        = Справочники.ПрофилиГруппДоступа.Администратор;
	ГруппаДоступаАдминистраторы = Справочники.ГруппыДоступа.Администраторы;
	
	ВидДоступаПользователи        = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	ВидДоступаВнешниеПользователи = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.Пользователи"),        "Пользователи");
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"), "ВнешниеПользователи");
	
	// Заполнение списка выбора типа пользователей
	ЗаполнитьСписокТиповПользователей();
	
	УстановитьПривилегированныйРежим(Истина);
	Элементы.ПредставлениеТипаПользователей.Видимость = Константы.ИспользоватьВнешнихПользователей.Получить() ИЛИ
	                                                    Объект.ТипПользователей <> Неопределено И
	                                                    ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи");
	
	//** Установка постоянной доступности свойств
	
	// Определение необходимости настройки ограничений доступа
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	// Установка доступности при открытии формы только для просмотра
	Элементы.ПользователиПодобрать.Доступность                = НЕ ТолькоПросмотр;
	Элементы.КонтекстноеМенюПользователиПодобрать.Доступность = НЕ ТолькоПросмотр;
	Элементы.ВидыДоступаИзменить.Доступность                  = НЕ ТолькоПросмотр;
	
	// Установка доступности свойств для группы доступа Администраторы
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		
		Элементы.Наименование.ТолькоПросмотр              = Истина;
		Элементы.Профиль.ТолькоПросмотр                   = Истина;
		Элементы.ПредставлениеТипаПользователей.Видимость = Ложь;
		
		Если НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава") Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы И
	     Объект.Профиль <> ПрофильАдминистратор Тогда
		Если Вопрос(НСтр("ru = 'У группы доступа Администраторы должен быть профиль Администратор!
		                       |
		                       |Установить профиль в группе доступа (нет - открыть только для просмотра)?'"),
		                       РежимДиалогаВопрос.ДаНет,
		                       ,
		                       КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			Объект.Профиль = ПрофильАдминистратор;
			Модифицированность = Истина;
		Иначе
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр И ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Если Вопрос(НСтр("ru = 'Изменился состав видов доступа профиля этой группы доступа!
		                       |
		                       |Обновить виды доступа в группе доступа (нет - открыть только для просмотра)?'"),
		                       РежимДиалогаВопрос.ДаНет,
		                       ,
		                       КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			ОбновитьСоставВидовДоступа();
		Иначе
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьСоставВидовДоступа(Истина);
	
	ЗаполнитьНомераКартинокПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	// Сохранение значений из таблицы формы в табличную часть объекта.
	ПоместитьЗаполнитьДанные(ТекущийВидДоступа);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка незаполненных и повторяющихся пользователей и групп пользователей.
	НомерСтроки = Объект.Пользователи.Количество()-1;
	
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
		ТекущаяСтрока = Объект.Пользователи.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Пользователь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен пользователь или группа пользователей!'"),
			                                                  ,
			                                                  "Объект.Пользователи[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.Пользователи.НайтиСтроки(Новый Структура("Пользователь", ТекущаяСтрока.Пользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ?(ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи"),
			                                                     НСтр("ru = 'Пользователь повторяется!'"),
			                                                     НСтр("ru = 'Группа пользователей повторяется!'") ),
			                                                  ,
			                                                  "Объект.Пользователи[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия только элементов в предопределенной группе Администраторы.
		Если Объект.Ссылка = ГруппаДоступаАдминистраторы И ТипЗнч(ТекущаяСтрока.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ?(ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей"),
			                                                     НСтр("ru = 'В предопределенной группе доступа Администраторы могут быть только пользователи.
			                                                                |Группы пользователей недопустимы!'"),
			                                                     НСтр("ru = 'В предопределенной группе доступа Администраторы могут быть только пользователи.
			                                                                |Внешние пользователи и группы внешних пользователей недопустимы!'") ),
			                                                  ,
			                                                  "Объект.Пользователи[" + Формат(НомерСтроки, "ЧГ=0") + "].Пользователь",
			                                                  ,
			                                                  Отказ);
			Продолжить;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	// Проверка незаполненных и повторяющихся значений доступа.
	НомерСтрокиВидДоступа = Объект.ВидыДоступа.Количество()-1;
	
	Пока НЕ Отказ И НомерСтрокиВидДоступа >= 0 Цикл
		ТекущаяСтрокаВидовДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидДоступа);
		
		ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НЕ Отказ И НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение не заполнено!'"),
				                                                  ,
				                                                  "ЗначенияДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Продолжить;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа, ЗначениеДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа, ТекущаяСтрока.ЗначениеДоступа));
			Если НайденныеЗначения.Количество() > 1 Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение повторяется!'"),
				                                                  ,
				                                                  "ЗначенияДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидДоступа = НомерСтрокиВидДоступа - 1;
	КонецЦикла;
	
	Если НЕ Отказ И Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		НайденПользовательИБ = Ложь;
		Для каждого ОписаниеПользователя ИЗ Объект.Пользователи Цикл
			Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
			   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
				//
				НайденПользовательИБ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ НайденПользовательИБ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В группе доступа Администраторы
			                                                             |должен быть хотя бы один пользователь,
			                                                             |которому разрешен доступ к информационной базе.'"),
			                                                  ,
			                                                  "Объект.Пользователи",
			                                                  ,
			                                                  Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	
КонецПроцедуры


&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	// Сохранение значений таблицы формы в табличную часть.
	ПоместитьЗаполнитьДанные(ТекущийВидДоступа);
	
	ОбновитьСоставВидовДоступа();
	
	// Помещение значений табличной части в таблицу формы.
	ПоместитьЗаполнитьДанные(ТекущийВидДоступа);
	
КонецПроцедуры


&НаКлиенте
Процедура ПредставлениеТипаПользователейПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПредставлениеТипаПользователей) Тогда
		УдалитьНеТипичныеПользователи();
	Иначе
		ПредставлениеТипаПользователей = "";
		Объект.ТипПользователей = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(ТипыПользователей, Элемент, ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей));
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.ТипПользователей        = ВыбранныйЭлемент.Значение;
		ПредставлениеТипаПользователей = ВыбранныйЭлемент.Представление;
		
		ПредставлениеТипаПользователейПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПользовательПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И
	     Элемент.ТекущиеДанные <> Неопределено И
	     Элемент.ТекущиеДанные.Пользователь = ПользовательПустаяСсылка Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьИзменения = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			
			Если Объект.Пользователи.НайтиСтроки(Новый Структура("Пользователь", Значение)).Количество() = 0 Тогда
				
				Строка = Объект.Пользователи.Добавить();
				Строка.Пользователь = Значение;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		ЕстьИзменения = Истина;
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ЗаполнитьНомераКартинокПользователей();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
		ЗаполнитьНомераКартинокПользователей(Элементы.Пользователи.ТекущаяСтрока);
	Иначе
		Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ТекущиеДанные.Пользователь  = ПользовательПустаяСсылка;
	Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)

	ЗначенияЗадаются = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущийВидДоступа <> Элемент.ТекущиеДанные.ВидДоступа Тогда
			Элементы.Доступ.Доступность = Ложь;
			Элементы.Доступ.Доступность = Истина;
		КонецЕсли;
		
		ПоместитьЗаполнитьДанные(Элемент.ТекущиеДанные.ВидДоступа);
		
		Если ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(Элемент.ТекущиеДанные.ВидДоступа) = Неопределено Тогда
			ЗначенияЗадаются = Истина;
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ОбычныйВидДоступа;
		Иначе
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ВидДоступаЧерезПраваПоЗначениямДоступа;
		КонецЕсли;
		ОбновитьНадписьВидДоступа(ЗначенияЗадаются);
	КонецЕсли;
	
	Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	Элементы.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	Элементы.ЗначениеДоступа.ЦветТекстаЗаголовка = ?(ЗначенияЗадаются, Новый Цвет, Новый Цвет(167, 144, 79));
	Элементы.ДоступРазрешен.ЦветТекстаЗаголовка  = ?(ЗначенияЗадаются, Новый Цвет, Новый Цвет(167, 144, 79));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ВидыДоступа.ТекущийЭлемент <> Элементы.ДоступРазрешенПоВиду Тогда
		Элементы.ВидыДоступа.ТекущийЭлемент = Элементы.ДоступРазрешенПоВиду;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступРазрешенПоВидуПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьНадписьВидДоступа(ЗначенияЗадаются);
	
	Для каждого Строка ИЗ ЗначенияДоступа Цикл
		Строка.ДоступРазрешен = НЕ Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа))[0].ЗначенияЗаданы = ЗначенияДоступа.Количество() <> 0;
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступа Цикл
		Строка.НомерСтроки = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ДоступРазрешен = НЕ Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен;
		Элемент.ТекущиеДанные.НомерСтроки = ЗначенияДоступа.Количество();
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВыбранТипЗначенияДоступа(ТекущиеТипыЗначенийДоступа) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", Новый Структура("ВыборГруппВнешнихПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = УправлениеДоступом.СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = УправлениеДоступом.СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаСервере
Процедура ЗаполнитьСписокТиповПользователей()
	
	ТипыПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка(), НСтр("ru = 'Обычные пользователи'"));
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		Для каждого ТипСсылкиОбъектаАвторизации ИЗ Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.Типы() Цикл
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипСсылкиОбъектаАвторизации);
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипСсылкиОбъектаАвторизации);
			ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);
			
			ТипыПользователей.Добавить(ОписаниеТипаСсылки.ПривестиЗначение(Неопределено), СтрЗаменить(НСтр("ru = 'Внешние пользователи (%1)'"), "%1", МетаданныеТипа.Синоним));
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ТипПользователей = Неопределено Тогда
		ПредставлениеТипаПользователей = "";
	Иначе
		НайденныйЭлемент = ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей);
		ПредставлениеТипаПользователей = ?(НайденныйЭлемент = Неопределено, СтрЗаменить(НСтр("ru = 'Неизвестный тип ""%1""'"), "%1", Строка(ТипЗнч(Объект.ТипПользователей))), НайденныйЭлемент.Представление);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УдалитьНеТипичныеПользователи()
	
	Если Объект.ТипПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ТипПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Индекс = Объект.Пользователи.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.Пользователи") И
			     ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
				
				Объект.Пользователи.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	Иначе
		Индекс = Объект.Пользователи.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") И
			     ТипЗнч(Объект.Пользователи[Индекс].Пользователь) <> Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				
				Объект.Пользователи.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> &ТипВнешнихПользователей
		|	И ВнешниеПользователи.Ссылка В(&ВыбранныеВнешниеПользователиИГруппы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> НЕОПРЕДЕЛЕНО
		|	И ТИПЗНАЧЕНИЯ(ГруппыВнешнихПользователей.ТипОбъектовАвторизации) <> &ТипВнешнихПользователей
		|	И ГруппыВнешнихПользователей.Ссылка В(&ВыбранныеВнешниеПользователиИГруппы)");
		
		Запрос.УстановитьПараметр("ВыбранныеВнешниеПользователиИГруппы", Объект.Пользователи.Выгрузить().ВыгрузитьКолонку("Пользователь"));
		Запрос.УстановитьПараметр("ТипВнешнихПользователей", ТипЗнч(Объект.ТипПользователей));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.Пользователи.НайтиСтроки(Новый Структура("Пользователь", Выборка.Ссылка));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Пользователи.Удалить(Объект.Пользователи.Индекс(НайденнаяСтрока));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСоставВидовДоступа(ПриЧтенииНаСервере = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаВидыДоступа.ВидДоступа,
	|	ПрофилиГруппДоступаВидыДоступа.Предустановленный,
	|	ПрофилиГруппДоступаВидыДоступа.ДоступРазрешен
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиГруппДоступаВидыДоступа
	|ГДЕ
	|	ПрофилиГруппДоступаВидыДоступа.Ссылка = &Ссылка
	|	И ПрофилиГруппДоступаВидыДоступа.ВидДоступа.Предопределенный");
	Запрос.УстановитьПараметр("Ссылка", Объект.Профиль);
	УстановитьПривилегированныйРежим(Истина);
	ВидыДоступаПрофиля = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИзменилсяСоставВидовДоступа = Ложь;
	
	// Добавление недостающих видов доступа.
	Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
		
		Отбор = Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа);
		СвойстваВидаДоступа = УправлениеДоступом.СвойстваВидаДоступа(СтрокаТЧ.ВидДоступа);
		
		Если СвойстваВидаДоступа <> Неопределено
		   И НЕ СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда
		   И НЕ СтрокаТЧ.Предустановленный
		   И Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа)).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				НоваяСтрока = Объект.ВидыДоступа.Добавить();
				НоваяСтрока.ВидДоступа      = СтрокаТЧ.ВидДоступа;
				НоваяСтрока.ДоступРазрешен  = СтрокаТЧ.ДоступРазрешен;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление лишних видов доступа.
	Индекс = Объект.ВидыДоступа.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ТекущийВидДоступа1 = Объект.ВидыДоступа[Индекс].ВидДоступа;
		СвойстваВидаДоступаВПрофиле = ВидыДоступаПрофиля.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1));
		СвойстваВидаДоступа = УправлениеДоступом.СвойстваВидаДоступа(ТекущийВидДоступа1);
		Если СвойстваВидаДоступа = Неопределено
		 ИЛИ СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда
		 ИЛИ СвойстваВидаДоступаВПрофиле.Количество() > 0
		   И СвойстваВидаДоступаВПрофиле[0].Предустановленный
		 ИЛИ ВидыДоступаПрофиля.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1)).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				Объект.ВидыДоступа.Удалить(Индекс);
				Для каждого ЭлементКоллекции Из Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа1)) Цикл
					Объект.ЗначенияДоступа.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Модифицированность = Модифицированность ИЛИ ИзменилсяСоставВидовДоступа И НЕ ПриЧтенииНаСервере;
	
	// Установка флажка для запроса у пользователя решения обновить состав видов доступа.
	Если ПриЧтенииНаСервере
	     И НЕ Объект.Ссылка.Пустая() // ЭтоНовый
	     И ИзменилсяСоставВидовДоступа
	     И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Ссылка, "Профиль") = Объект.Профиль Тогда
	     
		ИзменилсяСоставВидовДоступаПриЧтении = Истина;
	КонецЕсли;
	
	Элементы.Доступ.Доступность = Объект.ВидыДоступа.Количество() > 0;
	
	// Установка порядка видов доступа по профилю.
	Если НЕ ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Индекс = ВидыДоступаПрофиля.Количество()-1;
		Пока Индекс >=0 Цикл
			Если ВидыДоступаПрофиля[Индекс].Предустановленный Тогда
				ВидыДоступаПрофиля.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
			Индекс = Объект.ВидыДоступа.Индекс(Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа))[0]);
			Объект.ВидыДоступа.Сдвинуть(Индекс, ВидыДоступаПрофиля.Индекс(СтрокаТЧ) - Индекс);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		// Установка наличия заданных значений по видам доступа.
		Строка.ЗначенияЗаданы = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", Строка.ВидДоступа)).Количество() <> 0;
	КонецЦикла;
	
	Если ИзменилсяСоставВидовДоступа Тогда
		ТекущийВидДоступа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьЗаполнитьДанные(НовыйВидДоступа)
	
	Если ЗначениеЗаполнено(ТекущийВидДоступа) Тогда
		
		ОтборПоВидуДоступа = Новый Структура("ВидДоступа", ТекущийВидДоступа);
		
		ОписаниеВидаДоступа = Объект.ВидыДоступа.НайтиСтроки(ОтборПоВидуДоступа)[0];
		ОписаниеВидаДоступа.ТекущийТипЗначенияДоступа = ТекущийТипЗначенияДоступа;
		
		// Добавление новых строк
		Отбор = Новый Структура("ВидДоступа, ЗначениеДоступа, ДоступРазрешен", ТекущийВидДоступа);
		Для каждого Строка Из ЗначенияДоступа Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Строка);
			Если Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрока = Объект.ЗначенияДоступа.Добавить();
				НоваяСтрока.ВидДоступа      = ТекущийВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
				НоваяСтрока.ДоступРазрешен  = Строка.ДоступРазрешен;
			КонецЕсли;
		КонецЦикла;
		// Удаление лишних строк
		Отбор = Новый Структура("ЗначениеДоступа, ДоступРазрешен");
		Для каждого Строка Из Объект.ЗначенияДоступа.НайтиСтроки(ОтборПоВидуДоступа) Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Строка);
			Если ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
				Объект.ЗначенияДоступа.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияДоступа.Очистить();
	ТекущийТипЗначенияДоступа = Неопределено;
	Если ЗначениеЗаполнено(НовыйВидДоступа) Тогда
		
		Отбор = Новый Структура("ВидДоступа", НовыйВидДоступа);
		
		ОписаниеВидаДоступа = Объект.ВидыДоступа.НайтиСтроки(Отбор)[0];
		ТекущийТипЗначенияДоступа = ОписаниеВидаДоступа.ТекущийТипЗначенияДоступа;
		
		// Копирование значений и групп значений со свойством ДоступРазрешен.
		ТекущийНомер = 1;
		СтрокиТЧ = Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			НоваяСтрока = ЗначенияДоступа.Добавить();
			НоваяСтрока.ЗначениеДоступа = СтрокаТЧ.ЗначениеДоступа;
			НоваяСтрока.ДоступРазрешен  = СтрокаТЧ.ДоступРазрешен;
			НоваяСтрока.НомерСтроки = ТекущийНомер;
			ТекущийНомер = ТекущийНомер + 1;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийВидДоступа = НовыйВидДоступа;
	Элементы.ЗначенияДоступа.Доступность = ЗначениеЗаполнено(ТекущийВидДоступа);
	
	ОписаниеВидаДоступа = Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа));
	ТекущийТипЗначенияДоступа  = ?(ОписаниеВидаДоступа.Количество() = 0, Неопределено, ОписаниеВидаДоступа[0].ТекущийТипЗначенияДоступа);
	ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	Для каждого ОписаниеТипаВидаДоступа Из ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа)) Цикл
		ТекущиеТипыЗначенийДоступа.Добавить(ОписаниеТипаВидаДоступа.ТипЗначенияДоступа, ОписаниеТипаВидаДоступа.ПредставлениеТипа);
	КонецЦикла;
	Если ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'"));
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНомераКартинокПользователей(ИдентификаторСтроки = Неопределено)
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(Объект.Пользователи, "Пользователь", "НомерКартинки", ИдентификаторСтроки);
	
КонецПроцедуры


&НаСервере
Функция СформироватьДанныеВыбораПользователя(Текст)
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
	
		Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		
	КонецЕсли;
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	
КонецФункции

&НаКлиенте
Функция ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если Объект.Ссылка = ГруппаДоступаАдминистраторы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ТипПользователей <> Неопределено Тогда
		Если ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") Тогда
			ВыборИПодборВнешнихПользователей = Истина;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ИспользоватьВнешнихПользователей Тогда
		Элемент = СписокТиповПользователей.ВыбратьЭлемент(НСтр("ru = 'Выбор типа данных'"), СписокТиповПользователей[0]);
		Если Элемент <> Неопределено Тогда
			ВыборИПодборВнешнихПользователей = Элемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ВыбранТипЗначенияДоступа(Знач ТипыЗначенияДоступа)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТипыЗначенияДоступа[0].Значение;
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() > 0 Тогда
		
		Если ТипыЗначенияДоступа.Количество() = 2 Тогда
		
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
			
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ВнешнийПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элемент = ТипыЗначенияДоступа.ВыбратьЭлемент(НСтр("ru = 'Выбор типа данных'"), ТипыЗначенияДоступа[0]);
		Если Элемент <> Неопределено Тогда
			ТекущийТипЗначенияДоступа = Элемент.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(Элементы.Пользователи.ТекущиеДанные = Неопределено, Неопределено, Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если НЕ Подобрать И
	     ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока) И
	     ( ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") ИЛИ
	       ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Ложь;
	
	ИначеЕсли НЕ Подобрать И
	          ИспользоватьВнешнихПользователей И
	          ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока) И
	          ( ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	            ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		Если НЕ ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка <> ГруппаДоступаАдминистраторы Тогда
		Если ВыборИПодборВнешнихПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
	
		Если Объект.ТипПользователей <> Неопределено Тогда
			ПараметрыФормы.Вставить("ТипОбъектовАвторизации", Объект.ТипПользователей);
		КонецЕсли;
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",        ПараметрыФормы, Элементы.Пользователи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьНадписьВидДоступа(ЗначенияЗадаются = Истина)
	
	НадписьВидДоступа = Строка(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) + " " +
	                    ?(ЗначенияЗадаются,
	                      ?(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = ВидДоступаПользователи,
	                        ?(Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен,
	                          НСтр("ru = '(список запрещенных, текущий пользователь всегда разрешен)'"),
	                          НСтр("ru = '(список разрешенных, текущий пользователь всегда разрешен)'") ),
	                        ?(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = ВидДоступаВнешниеПользователи,
	                          ?(Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен,
	                            НСтр("ru = '(список запрещенных, текущий внешний пользователь всегда разрешен)'"),
	                            НСтр("ru = '(список разрешенных, текущий внешний пользователь всегда разрешен)'") ),
	                          ?(Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен,
	                            НСтр("ru = '(список запрещенных)'"),
	                            НСтр("ru = '(список разрешенных)'") )
	                         )
	                       ),
	                    "" );
	
	Если НЕ ЗначенияЗадаются Тогда
		Элементы.ОтображениеПредупреждения.ТекущаяСтраница = ?(Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен, Элементы.ПредупреждениеТребуется, Элементы.ПредупреждениеНеТребуется);
	КонецЕсли;

КонецФункции





