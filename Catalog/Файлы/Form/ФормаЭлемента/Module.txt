////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьЭлементовФормы();
	
	НаименованиеДоЗаписи = Объект.Наименование;
	
	Если Не Параметры.ФайлОснование.Пустая() И ФайлОснованиеПодписан Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" подписан. 
			| Копирование сведений об ЭЦП в новый файл сделает его недоступным для изменения. 
			| Скопировать в новый файл сведения об ЭЦП?'"),
			Строка(Параметры.ФайлОснование));
		
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет);
			
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КопироватьПодписиЭЦП = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры

// Функция предназначена для копирования последней версии
// из Файла-источника в Файл-приемник
// Параметры:
//	Приемник - ссылка на "Файл" куда копируется прилинкованный Файл
//	Источник - ссылка на "Файл" откуда копируется прилинкованный Файл
&НаСервере
Функция СоздатьКопиюВерсии(Приемник, Источник, КопироватьПодписиЭЦП)
	
	Если Не Источник.ТекущаяВерсия.Пустая() Тогда
		
		Версия = РаботаСФайлами.СоздатьВерсию(
			ТекущаяДата(),
			УниверсальноеВремя(ТекущаяДата()),
		    Приемник,
			Объект.Наименование,
			Источник.ТекущаяВерсия.Размер,
			Источник.ТекущаяВерсия.Расширение,
			Источник.ТекущаяВерсия.ФайлХранилище,
			Источник.ТекущаяВерсия.ТекстХранилище,
			Ложь,
			Источник.ТекущаяВерсия);

		// Обновим форму Файла (ведь запись может произойти и не при закрытии формы)
		Объект.ТекущаяВерсия = Версия.Ссылка;
		
		// Обновим запись в информационной базе
		РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище, УникальныйИдентификатор);
		
		Если КопироватьПодписиЭЦП Тогда
			
			ФайлОбъект = Объект.Ссылка.ПолучитьОбъект();
			ФайлОбъект.Подписан = Истина;
			ФайлОбъект.Записать();
			
			ВерсияОбъект = Объект.ТекущаяВерсия.ПолучитьОбъект();
			
			Для Каждого Строка Из Источник.ТекущаяВерсия.ЭлектронноЦифровыеПодписи Цикл
				НоваяСтрока = ВерсияОбъект.ЭлектронноЦифровыеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
			
			ВерсияОбъект.Подписан = Истина;
			ВерсияОбъект.Записать();
			
			ПрочитатьИЗаполнитьПодписи();
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецФункции // СоздатьКопиюВерсии()

// Устанавливает доступность команд и элементов формы
&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	ДоступныДействияСФайлом = Не Объект.ТекущаяВерсия.Пустая() И Не Объект.Ссылка.Пустая();
	
	Элементы.ХранитьВерсии.Доступность = ДоступныДействияСФайлом И Не Объект.ПометкаУдаления;
	Элементы.ОтменитьРедактирование.Доступность = Не Объект.Редактирует.Пустая();
	Элементы.ОткрытьКаталогФайла.Доступность = ДоступныДействияСФайлом;
	Элементы.СохранитьКак.Доступность = ДоступныДействияСФайлом;
	
	Элементы.Редактировать.Доступность = НЕ Объект.Подписан;
	Элементы.ЗакончитьРедактирование.Доступность = Не Объект.Редактирует.Пустая();
	Элементы.ПолноеНаименование.ТолькоПросмотр = НЕ Объект.Редактирует.Пустая();
	Элементы.Занять.Доступность = Объект.Редактирует.Пустая() И (ДоступныДействияСФайлом) И НЕ Объект.Подписан;
	Элементы.СохранитьИзменения.Доступность = Не Объект.Редактирует.Пустая();
	
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = ДоступныДействияСФайлом И НЕ Объект.Подписан;
	
	Элементы.ФормаПодписать.Доступность = (ДоступныДействияСФайлом И Объект.Редактирует.Пустая()) ИЛИ НЕ ДоступныДействияСФайлом;
	Элементы.ФормаЗашифровать.Доступность = (ДоступныДействияСФайлом И Объект.Редактирует.Пустая() И НЕ Объект.Зашифрован) ИЛИ НЕ ДоступныДействияСФайлом;
	
	Элементы.ФормаДобавитьЭЦПИзФайла.Доступность = ДоступныДействияСФайлом И Объект.Редактирует.Пустая();
	Элементы.ФормаСохранитьВместеСЭЦП.Доступность = ДоступныДействияСФайлом И Объект.Подписан;
	Элементы.ФормаРасшифровать.Доступность = ДоступныДействияСФайлом И Объект.Зашифрован;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеНаименованиеПриИзменении(Элемент)
	Объект.ПолноеНаименование = СокрЛП(Объект.ПолноеНаименование);
	Попытка
		ФайловыеФункцииКлиент.КорректноеИмяФайла(Объект.ПолноеНаименование, Истина);
	Исключение
		Информация = ИнформацияОбОшибке();
	    Предупреждение(Информация.Описание);
	КонецПопытки;
	
	Объект.Наименование = СокрЛП(Объект.ПолноеНаименование);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить()
	Записать();
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВыполнить()
	
	РаботаСФайламиКлиент.СкопироватьФайл(Объект.ВладелецФайла, Объект.Ссылка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриСоздании".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДанныеФайлаКорректны = Ложь;
	
	Если Параметры.Свойство("РежимСоздания") Тогда 
		РежимСоздания = Параметры.РежимСоздания;
	КонецЕсли;
	
	Если Параметры.Свойство("НовыйФайл") Тогда 
		НовыйФайл = Параметры.НовыйФайл;
	КонецЕсли;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		
		НовыйФайл = Истина;
		
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			Объект.ВладелецФайла = Параметры.ВладелецФайла;
		Иначе
			Объект.ТекущаяВерсия = Справочники.ВерсииФайлов.ПустаяСсылка();
			Параметры.ФайлОснование = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокОснование = Параметры.ФайлОснование;
	Если Не ДокОснование.Пустая() Тогда
		
		Объект.ПолноеНаименование = ДокОснование.ПолноеНаименование;
		Объект.Наименование = Объект.ПолноеНаименование;
		Объект.ХранитьВерсии = ДокОснование.ХранитьВерсии;
		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	Элементы.Владелец.Заголовок = ТипВладельца;
	
	НовыйФайлЗаписан = Ложь;
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "");
	
	Если Параметры.Свойство("КарточкаОткрытаПослеСозданияФайла") Тогда 
		Если Параметры.КарточкаОткрытаПослеСозданияФайла Тогда
			
			Попытка
				ЗаблокироватьДанныеФормыДляРедактирования();
			Исключение
			КонецПопытки;
					
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПолныйПуть();
	КонецЕсли;	
	
	Если Не Параметры.ФайлОснование.Пустая() Тогда
		ФайлОснованиеПодписан = Параметры.ФайлОснование.Подписан;
	КонецЕсли;
	
	Если РаботаСФайлами.ПолучитьИспользоватьЭлектронноЦифровыеПодписиИШифрование() = Ложь Тогда
		Элементы.ГруппаДополнительныеДанныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		ЗаполнитьСписокПодписей();
		ЗаполнитьСписокШифрования();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрования()
	
	СертификатыШифрования.Очистить();
	
	Если Объект.Зашифрован Тогда
		МассивСертификатовШифрования = РаботаСФайлами.ПолучитьМассивСертификатовШифрования(Объект.Ссылка);	
		Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
			НоваяСтрока = СертификатыШифрования.Добавить();
			НоваяСтрока.Представление = СтруктураСертификата.Представление;
			НоваяСтрока.Отпечаток = СтруктураСертификата.Отпечаток;
		КонецЦикла;	
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Зашифрован для'");
	Если СертификатыШифрования.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(СертификатыШифрования.Количество()) + ")";
	КонецЕсли;	
	Элементы.ГруппаШифрование.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ТаблицаПодписей.Очистить();
		
	Если Объект.Подписан Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЭлектронноЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		               |	ЭлектронноЦифровыеПодписи.ДатаПодписи КАК ДатаПодписи,
		               |	ЭлектронноЦифровыеПодписи.Комментарий КАК Комментарий,
		               |	ЭлектронноЦифровыеПодписи.Подпись КАК Подпись,
		               |	ЭлектронноЦифровыеПодписи.Отпечаток КАК Отпечаток,
		               |	ЭлектронноЦифровыеПодписи.УстановившийПодпись КАК УстановившийПодпись,
		               |	ЭлектронноЦифровыеПодписи.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	Справочник.ВерсииФайлов.ЭлектронноЦифровыеПодписи КАК ЭлектронноЦифровыеПодписи
		               |ГДЕ
		               |	ЭлектронноЦифровыеПодписи.Ссылка = &ОбъектСсылка";
					   
		Запрос.Параметры.Вставить("ОбъектСсылка", Объект.ТекущаяВерсия);
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			НоваяСтрока = ТаблицаПодписей.Добавить();
			
			НоваяСтрока.КомуВыданСертификат = ВыборкаЗапроса.КомуВыданСертификат;
			НоваяСтрока.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			НоваяСтрока.Комментарий = ВыборкаЗапроса.Комментарий;
			НоваяСтрока.Объект 		= Объект.ТекущаяВерсия;
			НоваяСтрока.Отпечаток 	= ВыборкаЗапроса.Отпечаток;
			НоваяСтрока.НомерСтроки = ВыборкаЗапроса.НомерСтроки;
			НоваяСтрока.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			НоваяСтрока.Неверна 	= Ложь;
			НоваяСтрока.ИндексКартинки = -1;
			
			ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
			НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;	
	
	ТекстЗаголовка = НСтр("ru = 'ЭЦП'");
	Если ТаблицаПодписей.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ТаблицаПодписей.Количество()) + ")";
	КонецЕсли;	
	Элементы.ГруппаЭЦП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьПолныйПуть()
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		ПапкаРодитель = Объект.ВладелецФайла;
		
		ПолныйПуть = "";
		
		Пока Не ПапкаРодитель.Пустая() Цикл
			
			Если Не ПустаяСтрока(ПолныйПуть) Тогда
				ПолныйПуть = "\" + ПолныйПуть;
			КонецЕсли;	
			
			ПолныйПуть = Строка(ПапкаРодитель) + ПолныйПуть;
			ПапкаРодитель = ПапкаРодитель.Родитель;
			
		КонецЦикла;

		Элементы.Владелец.Подсказка = ПолныйПуть;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ФайлРедактировался И РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь = Объект.Редактирует Тогда 
		Ответ = Вопрос(НСтр("ru = 'Файл занят вами для редактирования. Закрыть карточку?'"), РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	Если РежимСоздания = "ИзШаблона" Тогда
		СтрокаВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		  НСтр("ru = 'Открыть файл ""%1"" для редактирования?'"),
		  СокрЛП(Объект.ПолноеНаименование) );
		
		Если НовыйФайл И НовыйФайлЗаписан И (Не ФайлРедактировался) И Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(Объект.Ссылка, УникальныйИдентификатор);
			ОповеститьОбИзменении(Объект.Ссылка);
			Оповестить("ДанныеФайлаИзменены", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСОбытия = "ФайлОткрыт" И Параметр = Объект.Ссылка Тогда
		НовыйФайл = Ложь;
	КонецЕсли;

	Если ИмяСобытия = "ФайлРедактировался" И Параметр = Объект.Ссылка Тогда
		ФайлРедактировался = Истина;
	КонецЕсли;

	Если ИмяСобытия = "ФайлРедактировался" И Параметр = Объект.Ссылка Тогда
		ФайлРедактировался = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектПодписан" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "АктивнаяВерсияИзменена" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	Объект.Наименование = Объект.ПолноеНаименование;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если НаименованиеДоЗаписи <> ТекущийОбъект.Наименование Тогда
		Если ТекущийОбъект.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			РаботаСФайлами.ПереименоватьФайлВерсииНаДиске(ТекущийОбъект.ТекущаяВерсия, НаименованиеДоЗаписи, ТекущийОбъект.Наименование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект)
	Если НовыйФайл Тогда 
		ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
	
	Если Не Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		СоздатьКопиюВерсии(Объект.Ссылка, Параметры.ФайлОснование, КопироватьПодписиЭЦП);
		Модифированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи()
	Если НовыйФайл Тогда 
		НовыйФайлЗаписан = Истина;
		Прочитать();
		
		ПараметрыОповещения = Новый Структура("Владелец, Файл", Объект.ВладелецФайла, Объект.Ссылка);
		Оповестить("СозданФайл", ПараметрыОповещения);
		
	Иначе
		Если НаименованиеДоЗаписи <> Объект.Наименование Тогда
			// в кеше обновить файл
			РаботаСФайламиКлиент.ОбновитьИнформациюВРабочемКаталоге(Объект.ТекущаяВерсия, Объект.Наименование);
			НаименованиеДоЗаписи = Объект.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(Объект.Ссылка, Неопределено, 
		УникальныйИдентификатор);

	КомандыРаботыСФайлами.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	КомандыРаботыСФайлами.Редактировать(Объект.Ссылка, УникальныйИдентификатор);
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

// получить данные файла, если нужно
&НаКлиенте
Процедура ПолучитьДанныеФайлаЕслиНекорректны()
	Если ДанныеФайла = Неопределено ИЛИ НЕ ДанныеФайлаКорректны Тогда
		ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ПолучитьДанныеФайлаЕслиНекорректны();
	
	КомандыРаботыСФайлами.ЗакончитьРедактирование(
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла.ХранитьВерсии,
		ДанныеФайла.РедактируетТекущийПользователь,
		ДанныеФайла.Редактирует);
		
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	КомандыРаботыСФайлами.Занять(Объект.Ссылка, УникальныйИдентификатор);
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ПолучитьДанныеФайлаЕслиНекорректны();
	
	КомандыРаботыСФайлами.ОсвободитьФайл(
		ДанныеФайла.Ссылка,
		ДанныеФайла.ХранитьВерсии,
		ДанныеФайла.РедактируетТекущийПользователь,
		ДанныеФайла.Редактирует,
		УникальныйИдентификатор);
		
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	КомандыРаботыСФайлами.ОпубликоватьФайл(Объект.Ссылка, УникальныйИдентификатор);
	
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(Объект.Ссылка, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайлами.ОткрытьКаталогФайла(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляСохранения(Объект.Ссылка, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайлами.СохранитьКак(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
	КомандыРаботыСФайлами.ОбновитьИзФайлаНаДиске(ДанныеФайла, УникальныйИдентификатор);
	Прочитать();
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИЗаполнитьПодписи()
	Прочитать();
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
	ДанныеФайлаКорректны = Истина;
	ЗаполнитьСписокПодписей();
КонецПроцедуры	

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Подписать"" возможно только после записи данных.
			|Данные будут записаны.'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Если Результат <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
	
	ДанныеДляЗанесенияВРегистр = Неопределено;
	Если КомандыРаботыСФайлами.СформироватьПодписьФайла(ДанныеФайла, ДанныеДляЗанесенияВРегистр) Тогда
		
		ПодписатьЭЦПСервер(ДанныеДляЗанесенияВРегистр);
		
		ЭлектронноЦифроваяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ДанныеФайла.Ссылка);
		Оповестить("ПрисоединенныйФайлПодписан", ДанныеФайла.Владелец);
		УстановитьДоступностьЭлементовФормы();
		УстановитьДоступностьКомандСпискаЭЦП();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПодписатьЭЦПСервер(ДанныеДляЗанесенияВРегистр)
	
	ЭлектронноЦифроваяПодпись.ЗанестиИнформациюОднойПодписи(ДанныеДляЗанесенияВРегистр);
	ПрочитатьИЗаполнитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Зашифровать"" возможно только после записи данных.
			|Данные будут записаны.'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Если Результат <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.Ссылка);
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	МассивАдресов = Новый Массив;
	МассивОтпечатков = Новый Массив;
	
	Если НЕ КомандыРаботыСФайлами.Зашифровать(ДанныеФайла, УникальныйИдентификатор,
		МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, МассивАдресов) Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, МассивАдресов, 
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога);	
		
	РаботаСФайламиКлиент.ИнформироватьОШифровании(МассивФайловВРабочемКаталогеДляУдаления, 
		ДанныеФайла.Владелец, Объект.Ссылка);
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, МассивАдресов, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога)
	
	Зашифровать = Истина;
	
	РаботаСФайлами.ЗанестиИнформациюОШифровании(Объект.Ссылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, 
		УникальныйИдентификатор, 
		ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков, МассивАдресов);
		
	Прочитать();
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);	
	ЗаполнитьСписокШифрования();
	
	СсылкаВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Ссылка, "ВладелецФайла");
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.Ссылка);
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Если НЕ КомандыРаботыСФайлами.Расшифровать(ДанныеФайла, УникальныйИдентификатор, 
		МассивДанныхДляЗанесенияВБазу, МассивАдресов) Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивАдресов, 
		ИмяРабочегоКаталога);
		
	РаботаСФайламиКлиент.ИнформироватьОРасшифровании(
		ДанныеФайла.Владелец, Объект.Ссылка);
		
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивАдресов, 
	ИмяРабочегоКаталога)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайлами.ЗанестиИнформациюОШифровании(Объект.Ссылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, 
		УникальныйИдентификатор, 
		ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков, МассивАдресов);
		
	Прочитать();
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);	
	ЗаполнитьСписокШифрования();
	
	СсылкаВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Ссылка, "ВладелецФайла");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(Объект.Ссылка);
	
	Если КомандыРаботыСФайлами.ДобавитьЭЦПИзФайла(ДанныеФайла, УникальныйИдентификатор) Тогда
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаЭЦП();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляСохранения(Объект.Ссылка);
	КомандыРаботыСФайлами.СохранитьВместеСЭЦП(ДанныеФайла, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	ОткрытьСертификатВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, Пароль)
	
	РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
		
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	
	СтруктураВозврата = РаботаСФайлами.ПолучитьДанныеФайлаИДвоичныеДанные(Объект.Ссылка, 
		Неопределено, АдресПодписи);
	ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
	ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;	
	
	Попытка
		Если Объект.Зашифрован Тогда
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
			ДвоичныеДанныеФайла = МенеджерКриптографии.Расшифровать(ДвоичныеДанныеФайла);
		КонецЕсли;	
	
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии)
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеФайла = Неопределено;
	ДвоичныеДанныеПодписи = Неопределено;
	
	Если ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		
		ВерсияСсылка = ДанныеСтроки.Объект;
		СтруктураВозврата = РаботаСФайлами.ПолучитьДанныеФайлаИДвоичныеДанные(, ВерсияСсылка, АдресПодписи);
		ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
		ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
		
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = РаботаСФайламиПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВсеНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = РаботаСФайламиПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	Для Каждого Строка Из ТаблицаПодписей Цикл
		Если Строка.Объект <> Неопределено И (НЕ Строка.Объект.Пустая()) Тогда
			ПроверитьОднуПодписьНаСервере(Строка, МенеджерКриптографии);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПарольДляРасшифровки(Пароль)
	Пароль = "";
	
	Если Объект.Зашифрован Тогда
		
		ПредставленияСертификатов = "";
		Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
			
			Отпечаток = СтруктураСертификата.Отпечаток;
			
			ТолькоВЛичномХранилище = Истина;
			Сертификат = ЭлектронноЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
			Если Сертификат <> Неопределено Тогда // тут собираем только личные сертификаты - с закрытым ключом
				Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
					ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
				КонецЕсли;
				ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
			КонецЕсли;
			
		КонецЦикла;	
		
		Пароль = "";
		ЗаголовокФормы = НСтр("ru = 'Введите пароль для расшифровки'");
		ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов, Файл", 
			ЗаголовокФормы, ПредставленияСертификатов, Объект.Ссылка);
		КодВозврата = ОткрытьФормуМодально("Справочник.Файлы.Форма.ВводПароляСОписаниями", ПараметрыФормы);
		Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
			Пароль = КодВозврата;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции	

&НаКлиенте
Процедура Проверить(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере И НЕ Объект.Зашифрован Тогда
		ПроверитьНаСервере();
	Иначе	
		
		ПолучитьДанныеФайлаЕслиНекорректны();
		
		РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
		РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
		
		МенеджерКриптографии = ЭлектронноЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();

		Пароль = "";
		Если Не ПолучитьПарольДляРасшифровки(Пароль) Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ТаблицаПодписей.ДанныеСтроки(Элемент);
			
			Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
				ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, Пароль);
			КонецЕсли;	
		КонецЦикла;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектронноЦифроваяПодписьКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере И НЕ Объект.Зашифрован Тогда
		ПроверитьВсеНаСервере();
	Иначе	
	
		МенеджерКриптографии = ЭлектронноЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();

		Пароль = "";
		Если Не ПолучитьПарольДляРасшифровки(Пароль) Тогда
			Возврат;
		КонецЕсли;	
		
		Для Каждого Строка Из ТаблицаПодписей Цикл
			Если Строка.Объект <> Неопределено И (НЕ Строка.Объект.Пустая()) Тогда
				ПроверитьОднуПодпись(Строка, МенеджерКриптографии, Пароль);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ТаблицаПодписей.ТекущиеДанные.Объект.Пустая()) Тогда
		
		АдресПодписи = Элементы.ТаблицаПодписей.ТекущиеДанные.АдресПодписи;
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Фильтр = НСтр("ru = 'Все файлы(*.p7s)|*.p7s'");
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				
				ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
				
				Файл = Новый Файл(ПолныйПутьПодписи);
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				Если Прав(ПутьКФайлу,1) <> "\" Тогда
					ПутьКФайлу = ПутьКФайлу + "\";
				КонецЕсли;
				
				// Сохраним Файл из БД на диск
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
					
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подпись сохранена в файл ""%1""'"),
					ДиалогОткрытияФайла.ПолноеИмяФайла);
				Состояние(Текст);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	МассивВыделенныеСтроки = Новый Массив;
	Для Каждого Элемент Из Элементы.ТаблицаПодписей.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			СтруктураПодписи = Новый Структура("Объект, НомерСтроки, УстановившийПодпись", 
				ДанныеСтроки.Объект, ДанныеСтроки.НомерСтроки, ДанныеСтроки.УстановившийПодпись);
			МассивВыделенныеСтроки.Добавить(СтруктураПодписи);
		КонецЕсли;	
	КонецЦикла;
	
	ЭлектронноЦифроваяПодпись.УдалитьПодписи(МассивВыделенныеСтроки, РеквизитПодписанИзменен);
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры


&НаКлиенте
Процедура Удалить(Команда)
	
	Если Вопрос(НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитПодписанИзменен = Ложь;
	УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен);
	
	Если РеквизитПодписанИзменен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Прочитать();
	КонецЕсли;
	
	Оповестить("ПрисоединенныйФайлПодписан", Объект.ВладелецФайла);
	
	УстановитьДоступностьКомандСпискаЭЦП();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ОбновитьПолныйПуть();
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСертификатВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатВыполнить()
	ЭлектронноЦифроваяПодписьКлиент.ОткрытьСертификат(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭЦП()
	
	ЕстьПодписи = (ТаблицаПодписей.Количество() <> 0);
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьСертификат.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСертификатШифрованияВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	ОткрытьСертификатШифрованияВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрованияВыполнить()
	
	Если Элементы.СертификатыШифрования.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
	
	Отпечаток = Элементы.СертификатыШифрования.ТекущиеДанные.Отпечаток;
	
	СтруктураСертификата = ЭлектронноЦифроваяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток", СтруктураСертификата, Отпечаток);
		СтруктураВозврата = ОткрытьФормуМодально("Общаяформа.ФормаСертификатаЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры
