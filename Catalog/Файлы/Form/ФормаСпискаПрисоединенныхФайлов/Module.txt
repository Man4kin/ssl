
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСФайламиКлиент.ОткрытьФайл(
		РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, УникальныйИдентификатор)); 
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ФайлОснование = Элементы.Список.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		Попытка
			ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
			РаботаСФайламиКлиент.СозданиеНовогоФайла(ВладелецФайла.Значение, ЭтаФорма);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 НСтр("ru = 'Ошибка создания нового Файла: ""%1""'"),
			                 Инфо.Описание) );
		КонецПопытки;
		
	Иначе
		
		ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла.Значение, ФайлОснование);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		Элементы.Список.Обновить();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Список.ТекущаяСтрока = Параметр;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено Тогда
			
			ВладелецФайлаСписка = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
			
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = ВладелецФайлаСписка.Значение Тогда
					Элементы.Список.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Список.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДанныеФайлаИзменены" Тогда
		Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
			УстановитьДоступностьФайловыхКомманд();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ЗаголовокФормы") Тогда 
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;	
	
	Если Параметры.Свойство("ВладелецФайла") Тогда 
		Список.Параметры.УстановитьЗначениеПараметра(
			"Владелец", Параметры.ВладелецФайла);
		КонецЕсли;	
		
	Список.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());
		
	РаботаСФайлами.ЗаполнитьУсловноеОформлениеСпискаФайлов(Список);		
	
	Если РаботаСФайлами.ПолучитьИспользоватьЭлектронноЦифровыеПодписиИШифрование() = Ложь Тогда
		Элементы.Подписан.Видимость = Ложь;
		Элементы.Зашифрован.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	Попытка
		ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
		РаботаСФайламиКлиент.СозданиеНовогоФайла(ВладелецФайла.Значение, ЭтаФорма);
	Исключение
		Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                    НСтр("ru = 'Ошибка создания нового файла: ""%1""'"),
			                    Инфо.Описание ) );
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайлами.ЗакончитьРедактирование(
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор,
		Элементы.Список.ТекущиеДанные.ХранитьВерсии,
		Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Список.ТекущиеДанные.Редактирует);
		
	УстановитьДоступностьФайловыхКомманд();
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	КомандыРаботыСФайлами.Занять(Элементы.Список.ТекущаяСтрока);
	
	УстановитьДоступностьФайловыхКомманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайлами.ОсвободитьФайл(
		Элементы.Список.ТекущаяСтрока,
		Элементы.Список.ТекущиеДанные.ХранитьВерсии,
		Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Список.ТекущиеДанные.Редактирует);
		
	УстановитьДоступностьФайловыхКомманд();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайлами.ОткрытьКаталогФайла(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайлами.Открыть(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайлами.Редактировать(Элементы.Список.ТекущаяСтрока);
	
	УстановитьДоступностьФайловыхКомманд();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайлами.ОпубликоватьФайл(
		Элементы.Список.ТекущаяСтрока, 
		УникальныйИдентификатор);
	КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляСохранения(Элементы.Список.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайлами.СохранитьКак(ДанныеФайла);
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
	ВладелецФайлаСписка = ВладелецФайла.Значение;
	
	Если ВладелецФайлаСписка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКомманд()
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			УстановитьДоступностьКомманд(Элементы.Список.ТекущиеДанные.РедактируетТекущийПользователь,
				Элементы.Список.ТекущиеДанные.Редактирует, Элементы.Список.ТекущиеДанные.Подписан,
				Элементы.Список.ТекущиеДанные.Зашифрован);
					
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомманд(РедактируетТекущийПользователь, Редактирует, Подписан, Зашифрован)
	
	Элементы.ЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	
	Элементы.СохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	
	Элементы.Освободить.Доступность = Не Редактирует.Пустая();
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокОсвободить.Доступность = Не Редактирует.Пустая();
	
	Элементы.Занять.Доступность = Редактирует.Пустая() И НЕ (Подписан ИЛИ Зашифрован);
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокЗанять.Доступность = Редактирует.Пустая() И НЕ (Подписан ИЛИ Зашифрован);
	
	Элементы.Редактировать.Доступность = НЕ (Подписан ИЛИ Зашифрован);
	Элементы.СписокКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюСписокРедактировать.Доступность = НЕ (Подписан ИЛИ Зашифрован);
	
	Элементы.ФормаПодписать.Доступность = Редактирует.Пустая();
	Элементы.ФормаПодписатьКонтекст.Доступность = Редактирует.Пустая();
	
	Элементы.ФормаСохранитьВместеСЭЦП.Доступность = Подписан;
	Элементы.ФормаСохранитьВместеСЭЦПКонтекст.Доступность = Подписан;
	
	Элементы.ФормаЗашифровать.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	Элементы.ФормаЗашифроватьКонтекст.Доступность = Редактирует.Пустая() И НЕ Зашифрован;
	
	Элементы.ФормаРасшифровать.Доступность = Зашифрован;
	Элементы.ФормаРасшифроватьКонтекст.Доступность = Зашифрован;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		УстановитьДоступностьФайловыхКомманд();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	#Если Не ВебКлиент Тогда
		
		// заранее выбираем файлы (до открытия диалога импорта)
		Режим = РежимДиалогаВыбораФайла.Открытие;
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Истина;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивИменФайлов = Новый Массив;
			
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			Для Каждого ИмяФайла Из МассивФайлов Цикл
				МассивИменФайлов.Добавить(ИмяФайла);
			КонецЦикла;
			
			ВладелецФайла = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Владелец"));
			ПараметрыИмпорта = Новый Структура("ПапкаДляДобавления, МассивИменФайлов", ВладелецФайла.Значение, МассивИменФайлов);
			ОткрытьФорму("Справочник.Файлы.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта);
		КонецЕсли;
	#Иначе	
		Предупреждение(НСтр("ru = 'В Веб-клиенте импорт файлов не поддерживается. Используйте команду ""Создать"" в списке файлов.'"));
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Список.ТекущаяСтрока);
	
	ДанныеДляЗанесенияВРегистр = Неопределено;
	
	Если КомандыРаботыСФайлами.СформироватьПодписьФайла(ДанныеФайла, ДанныеДляЗанесенияВРегистр) Тогда
		
		ЭлектронноЦифроваяПодпись.ЗанестиИнформациюОднойПодписи(ДанныеДляЗанесенияВРегистр);
		Оповестить("ПрисоединенныйФайлПодписан", ДанныеФайла.Владелец);
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
	КонецЕсли;	
	
	УстановитьДоступностьФайловыхКомманд();
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаИКоличествоВерсий(Элементы.Список.ТекущаяСтрока);
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	МассивАдресов = Новый Массив;
	МассивОтпечатков = Новый Массив;
	
	Если НЕ КомандыРаботыСФайлами.Зашифровать(ДанныеФайла, УникальныйИдентификатор,
		МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, МассивАдресов) Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	Зашифровать = Истина;
	РаботаСФайлами.ЗанестиИнформациюОШифровании(ОбъектСсылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, 
		УникальныйИдентификатор, 
		ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков, МассивАдресов);
		
	РаботаСФайламиКлиент.ИнформироватьОШифровании(МассивФайловВРабочемКаталогеДляУдаления, 
		ДанныеФайла.Владелец, ОбъектСсылка);
	
	УстановитьДоступностьФайловыхКомманд();
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	ОбъектСсылка = Элементы.Список.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаИКоличествоВерсий(Элементы.Список.ТекущаяСтрока);
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Если НЕ КомандыРаботыСФайлами.Расшифровать(ДанныеФайла, УникальныйИдентификатор, 
		МассивДанныхДляЗанесенияВБазу, МассивАдресов) Тогда
		Возврат;
	КонецЕсли;	
		
	РаботаСФайламиКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = РаботаСФайламиКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайлами.ЗанестиИнформациюОШифровании(ОбъектСсылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, 
		УникальныйИдентификатор, 
		ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков, МассивАдресов);
		
	РаботаСФайламиКлиент.ИнформироватьОРасшифровании(
		ДанныеФайла.Владелец, ОбъектСсылка);
	
	УстановитьДоступностьФайловыхКомманд();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Список.ТекущаяСтрока);
	КомандыРаботыСФайлами.ДобавитьЭЦПИзФайла(ДанныеФайла, УникальныйИдентификатор);
	УстановитьДоступностьФайловыхКомманд();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляСохранения(Элементы.Список.ТекущаяСтрока);
	КомандыРаботыСФайлами.СохранитьВместеСЭЦП(ДанныеФайла, УникальныйИдентификатор);
	УстановитьДоступностьФайловыхКомманд();
КонецПроцедуры

