
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//** Установка начальных значений
	//   перед загрузкой данных из настроек на сервере
	//   для случая, когда данные ещё не были записаны и не загружаются
	ПоказатьТолькоВыбранныеРоли = (Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли);
	
	//** Заполнение постоянных данных
	
	ПодготовитьСписокВыбораИТаблицуРолей();
	
	// Заполнение списка выбора языка
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
		Элементы.ПредставлениеЯзыка.СписокВыбора.Добавить(МетаданныеЯзыка.Синоним);
	КонецЦикла;
	
	//** Подготовка к интерактивным действиям с учетом сценариев открытия формы
	
	УстановитьДействияСРолями();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента
		Если Параметры.ГруппаНовогоПользователя <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента
			Объект.Наименование = "";
			ПрочитатьПользователяИБ(ЗначениеЗаполнено(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ));
		Иначе
			// Добавление элемента
			Объект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			// Чтение начальных значений свойств пользователя ИБ
			ПрочитатьПользователяИБ();
		КонецЕсли;
	Иначе
		// Открытие существующего элемента
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ();
	
	//** Установка постоянной доступности свойств
	Элементы.КонтактнаяИнформация.Видимость   = ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	Элементы.ОтображениеРолей.Видимость       = ЗначениеЗаполнено(ДействияВФорме.Роли);
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
	                 ДействияВФорме.Роли <> "Редактирование" И
	                 ДействияВФорме.КонтактнаяИнформация <> "Редактирование" И
	                 НЕ ( ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" ИЛИ
	                      ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих"     ) И
	                 ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	
	УстановитьТолькоПросмотрРолей(ДействияВФорме.Роли <> "Редактирование");
	
	ПометитьРолиПоСписку();
	
	//** Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "КонтактнаяИнформация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	Элементы.ПользовательИнфБазыПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	ОчиститьСообщения();
	
	Если ДействияВФорме.Роли = "Редактирование" И Роли.Количество() = 0 Тогда
		
		Если Вопрос(НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'"),
						   РежимДиалогаВопрос.ДаНет,
						   ,
						   ,
						   НСтр("ru = 'Запись пользователя информационной базы'")) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяСоздатьПервогоАдминистратора() Тогда
		ТекстВопроса = НСтр("ru = 'Первый пользователь информационной базы должен иметь полные права.
		                          |Роль будет добавлена автоматически. Продолжить?'");
		ПользователиКлиентПереопределяемый.ТекстВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса);
		Если Вопрос(ТекстВопроса,
		            РежимДиалогаВопрос.ДаНет,
		            ,
		            ,
		            НСтр("ru = 'Запись пользователя информационной базы'")) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТребуетсяСоздатьПервогоАдминистратора() Тогда
		ПараметрыЗаписи.Вставить("ЗаписьПервогоАдминистратора");
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		
		Если Элементы.ПолноеИмяПояснениеНесоответствия.Видимость Тогда
			ПользовательИнфБазыПолноеИмя = Объект.Наименование;
		КонецЕсли;
		
		ЗаписатьПользователяИБ(ТекущийОбъект, Отказ);
		Если НЕ Отказ Тогда
			Если ТекущийОбъект.ИдентификаторПользователяИБ <> СтарыйИдентификаторПользователяИБ Тогда
				ПараметрыЗаписи.Вставить("ДобавленПользовательИБ", ТекущийОбъект.ИдентификаторПользователяИБ);
			Иначе
				ПараметрыЗаписи.Вставить("ИзмененПользовательИБ", ТекущийОбъект.ИдентификаторПользователяИБ);
			КонецЕсли
		КонецЕсли;
		
	ИначеЕсли НЕ ЕстьСвязьСНесуществующимПользователемИБ ИЛИ
	          ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" Тогда
		
		ТекущийОбъект.ИдентификаторПользователяИБ = Неопределено;
	КонецЕсли;
	
	// Обработчик подсистемы "Контактная информация"
	Если НЕ Отказ И ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ДоступКИнформационнойБазеРазрешен И ПользовательИБСуществует Тогда
		УдалитьПользователяИБ(Отказ);
		Если НЕ Отказ Тогда
			ПараметрыЗаписи.Вставить("УдаленПользовательИБ", СтарыйИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗаписьПервогоАдминистратора") Тогда
		УстановитьПривилегированныйРежим(Истина);
			ПользователиПереопределяемый.ПриЗаписиПервогоАдминистратора(Объект.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	ПрочитатьПользователяИБ();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищенаСвязьСНесуществущимПользователемИБ") Тогда
		Оповестить("ОчищенаСвязьСНесуществущимПользователемИБ", ПараметрыЗаписи.ОчищенаСвязьСНесуществущимПользователемИБ, ЭтаФорма);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоПользователя);
		Оповестить("ИзмененСоставГруппыПользователей", ГруппаНовогоПользователя, ЭтаФорма);
		ГруппаНовогоПользователя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		
		ОбработкаПроверкиЗаполненияСпискаРолей(Отказ);
		
		Если НЕ Отказ И ПустаяСтрока(ПользовательИнфБазыИмя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Не заполнено имя пользователя информационной базы.'"), ,
							"ПользовательИнфБазыИмя", ,
							Отказ);
		КонецЕсли;
		
		Если  НЕ Отказ И ПользовательИнфБазыПароль <> Неопределено И Пароль <> ПодтверждениеПароля Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"), ,
							"Пароль", ,
							Отказ);
			Возврат;
		КонецЕсли;
		
		Если НЕ Отказ И НЕ ПустаяСтрока(ПользовательИнфБазыПользовательОС) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС = ПользовательИнфБазыПользовательОС;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru = 'Пользователь ОС должен быть в формате
								           |\\ИмяДомена\ИмяПользователя'"), ,
								"ПользовательИнфБазыПользовательОС", ,
								Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьТолькоВыбранныеРоли"] = Ложь Тогда
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.СредиВсехВыбранныеРоли;
	Иначе
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура ПолноеИмяВыполнитьСинхронизацию(Команда)
	
	Объект.Наименование = ПользовательИнфБазыПолноеИмя;
	Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// Если ПолноеИмя определено, то его нужно обновлять.
	// Прим.: неопределенное ПолноеИмя или другое свойство
	//        не учитывается при записи пользователя ИБ
	//        ПолноеИмя определено только для вида
	//        интерактивных действий "БезОграничения"
	Если ПользовательИнфБазыПолноеИмя <> Неопределено Тогда
		ПользовательИнфБазыПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ПользовательИБСуществует И ДоступКИнформационнойБазеРазрешен Тогда
		ПользовательИнфБазыИмя = ПолучитьКраткоеИмяПользователяИБ(Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступКИнформационнойБазеРазрешенПриИзменении(Элемент)
	
	Если НЕ ПользовательИБСуществует И ДоступКИнформационнойБазеРазрешен Тогда
		ПользовательИнфБазыИмя       = ПолучитьКраткоеИмяПользователяИБ(Объект.Наименование);
		ПользовательИнфБазыПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияСтандартнаяПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПользовательИнфБазыПароль = Пароль;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияОСПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		Результат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС");
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			ПользовательИнфБазыПользовательОС = Результат;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

//** Для работы интерфейса ролей

&НаКлиенте
Процедура ПодобратьРоли(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ЗакрыватьПриВыборе", Ложь), Элементы.Роли);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриИзменении(Элемент)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранныеРоли(ВыбранноеЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура СинонимРолиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.СинонимРоли) Тогда
		Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	Иначе
		Элементы.Роли.ТекущиеДанные.Роль = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = ?(Элементы.Роли.ТекущиеДанные = Неопределено, Неопределено, Элементы.Роли.ТекущиеДанные.Роль);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ТекущаяСтрока", НачальноеЗначение), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Роли.ТекущиеДанные.Роль        = ВыбранноеЗначение;
	Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРолейПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаРолей.ТекущиеДанные;
	
	НайденныеРоли = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
	
	Если СтрокаТаблицы.Пометка Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	ИначеЕсли НайденныеРоли.Количество() > 0 Тогда
		Роли.Удалить(НайденныеРоли[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	
	Элементы.ОтображениеРолей.ТекущаяСтраница = ?(ПоказатьТолькоВыбранныеРоли, Элементы.ТолькоВыбранныеРоли, Элементы.СредиВсехВыбранныеРоли);
	ТекущийЭлемент = ?(ПоказатьТолькоВыбранныеРоли, Элементы.Роли, Элементы.ТаблицаРолей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СнятьФлажкиНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		//
		Если ПользователиПереопределяемый.ЗапретРедактированияРолей()
		 ИЛИ Роли.НайтиСтроки(Новый Структура("Роль", "ПолныеПрава")).Количество() = 0 Тогда
			//
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	ДействияВФорме.Вставить("Роли",                   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("КонтактнаяИнформация",   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СвойстваПользователяИБ", ""); // "", "ПросмотрВсех", "РедактированиеВсех", "РедактированиеСвоих"
	ДействияВФорме.Вставить("СвойстваЭлемента",       ""); // "", "Просмотр",     "Редактирование"
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		// Администратор
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	ИначеЕсли ЗначениеЗаполнено(ОбщегоНазначения.ТекущийПользователь()) И
	          Объект.Ссылка = ОбщегоНазначения.ТекущийПользователь() Тогда
		// Свои свойства
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	Иначе
		// Чужие свойства
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.КонтактнаяИнформация   = "";
		ДействияВФорме.СвойстваПользователяИБ = "";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	КонецЕсли;
	
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;
	Если Найти(", ПросмотрВсех, РедактированиеВсех, РедактированиеСвоих,", ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

//** Чтение, запись, удаление, расчет краткого имени пользователя ИБ, проверка несоответствия

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь, ТолькоРоли = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеРоли = Неопределено;
	
	Если ТолькоРоли Тогда
		Пользователи.ПрочитатьПользователяИБ(Объект.ИдентификаторПользователяИБ, , ПрочитанныеРоли);
		ЗаполнитьРоли(ПрочитанныеРоли);
		Возврат;
	КонецЕсли;
	
	Пароль              = "";
	ПодтверждениеПароля = "";
	ПрочитанныеСвойства               = Неопределено;
	СтарыйИдентификаторПользователяИБ = Неопределено;
	ПользовательИБСуществует          = Ложь;
	ДоступКИнформационнойБазеРазрешен = Ложь;
	
	// Заполнение начальных значений свойств пользователяИБ у пользователя.
	Пользователи.ПрочитатьПользователяИБ(Неопределено, ПрочитанныеСвойства, ПрочитанныеРоли);
	ПрочитанныеСвойства.ПользовательИнфБазыПоказыватьВСпискеВыбора = НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПрочитанныеСвойства);
	ПользовательИнфБазыАутентификацияСтандартная = Истина;
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ, ПрочитанныеСвойства, ПрочитанныеРоли) Тогда
			// Т.к. у скопированного пользователя есть связь с пользователемИБ,
			// то устанавливается будущая связь и у нового пользователя.
			ДоступКИнформационнойБазеРазрешен = Истина;
			// Т.к. пользовательИБ скопированного пользователя прочитан,
			// то копируются свойства и роли пользователяИБ.
			ЗаполнитьЗначенияСвойств(ЭтаФорма,
			                         ПрочитанныеСвойства,
			                         "ПользовательИнфБазыАутентификацияСтандартная,
			                         |ПользовательИнфБазыЗапрещеноИзменятьПароль,
			                         |ПользовательИнфБазыПоказыватьВСпискеВыбора,
			                         |ПользовательИнфБазыАутентификацияОС");
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства, ПрочитанныеРоли) Тогда
		
			ПользовательИБСуществует          = Истина;
			ДоступКИнформационнойБазеРазрешен = Истина;
			СтарыйИдентификаторПользователяИБ = Объект.ИдентификаторПользователяИБ;
			
			ЗаполнитьЗначенияСвойств(ЭтаФорма,
			                         ПрочитанныеСвойства,
			                         "ПользовательИнфБазыИмя,
			                         |ПользовательИнфБазыПолноеИмя,
			                         |ПользовательИнфБазыАутентификацияСтандартная,
			                         |ПользовательИнфБазыПоказыватьВСпискеВыбора,
			                         |ПользовательИнфБазыЗапрещеноИзменятьПароль,
			                         |ПользовательИнфБазыАутентификацияОС,
			                         |ПользовательИнфБазыПользовательОС");
			
			Если ПрочитанныеСвойства.ПользовательИнфБазыПарольУстановлен Тогда
				Пароль              = "**********";
				ПодтверждениеПароля = "**********";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПредставлениеРежимаЗапуска(ПрочитанныеСвойства.ПользовательИнфБазыРежимЗапуска);
	ЗаполнитьПредставлениеЯзыка(ПрочитанныеСвойства.ПользовательИнфБазыЯзык);
	ЗаполнитьРоли(ПрочитанныеРоли);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПользователяИБ(ТекущийОбъект, Отказ)
	
	// Восстановление действий в форме, если они изменены на клиенте
	ОпределитьДействияВФорме();
	
	Если НЕ (ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" ИЛИ
	         ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих"    )Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыеСвойства = Неопределено;
	НовыеРоли     = Неопределено;
	
	// Чтение старых свойств/заполнение начальных свойств пользователяИБ у пользователя.
	Пользователи.ПрочитатьПользователяИБ(ТекущийОбъект.ИдентификаторПользователяИБ, НовыеСвойства);
	
	Если ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" Тогда
		ЗаполнитьЗначенияСвойств(НовыеСвойства, ЭтаФорма);
		НовыеСвойства.ПользовательИнфБазыРежимЗапуска = ПолучитьВыбранныйРежимЗапуска();
	Иначе
		ЗаполнитьЗначенияСвойств(НовыеСвойства,
		                         ЭтаФорма,
		                         "ПользовательИнфБазыИмя,
		                         |ПользовательИнфБазыПароль");
	КонецЕсли;
	НовыеСвойства.ПользовательИнфБазыЯзык = ПолучитьВыбранныйЯзык();
		
	Если ДействияВФорме.Роли = "Редактирование" Тогда
		НовыеРоли = Роли.Выгрузить().ВыгрузитьКолонку("Роль");
	КонецЕсли;
	
	// Попытка записи пользователя ИБ
	ОписаниеОшибки = "";
	Если Пользователи.ЗаписатьПользователяИБ(ТекущийОбъект.ИдентификаторПользователяИБ, НовыеСвойства, НовыеРоли, НЕ ПользовательИБСуществует, ОписаниеОшибки) Тогда
		Если НЕ ПользовательИБСуществует Тогда
			ТекущийОбъект.ИдентификаторПользователяИБ = НовыеСвойства.ПользовательИнфБазыУникальныйИдентификатор;
			ПользовательИБСуществует = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьПользователяИБ(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеОшибки = "";
	Если НЕ Пользователи.УдалитьПользователяИБ(СтарыйИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , , , Отказ);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКраткоеИмяПользователяИБ(Знач ПолноеИмя)
	
	КраткоеИмя = "";
	ПервыйПроходЦикла = Истина;
	
	Пока Истина Цикл
		Если НЕ ПервыйПроходЦикла Тогда
			КраткоеИмя = КраткоеИмя + ВРег(Лев(ПолноеИмя, 1));
		КонецЕсли;
		ПозицияПробела = Найти(ПолноеИмя, " ");
		Если ПозицияПробела = 0 Тогда
			Если ПервыйПроходЦикла Тогда
				КраткоеИмя = ПолноеИмя;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если ПервыйПроходЦикла Тогда
			КраткоеИмя = Лев(ПолноеИмя, ПозицияПробела - 1);
		КонецЕсли;
		
		ПолноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - ПозицияПробела);
		
		ПервыйПроходЦикла = Ложь;
	КонецЦикла;
	
	КраткоеИмя = СтрЗаменить(КраткоеИмя, " ", "");
	
	Возврат КраткоеИмя;
	
КонецФункции

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено) Экспорт
	
	//** Проверка соответствия свойства "ПолноеИмя" пользователяИБ и свойства "Наименование" пользователя
	
	Если НЕ (ДействияВФорме.СвойстваЭлемента       = "Редактирование" И
	         ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех") Тогда
		// Прочитанное ПолноеИмя пользователя не может быть изменено, если не совпадает
		ПользовательИнфБазыПолноеИмя = Неопределено;
	КонецЕсли;
	
	Если НЕ ПользовательИБСуществует ИЛИ
	     ПользовательИнфБазыПолноеИмя = Неопределено ИЛИ
	     ПользовательИнфБазыПолноеИмя = Объект.Наименование Тогда
		
		Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		Элементы.ПолноеИмяПояснениеНесоответствия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ПолноеИмяПояснениеНесоответствия.Заголовок,
				ПользовательИнфБазыПолноеИмя);
	Иначе
		Объект.Наименование = ПользовательИнфБазыПолноеИмя;
		Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;
	
	//** Определение связи с несуществующим пользователем ИБ
	ЕстьНоваяСвязьСНесуществующимПользователемИБ = НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСвязьСНесуществующимПользователемИБ
	   И НЕ ЕстьНоваяСвязьСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищенаСвязьСНесуществущимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСвязьСНесуществующимПользователемИБ = ЕстьНоваяСвязьСНесуществующимПользователемИБ;
	
	Если ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех" Тогда
		// Связь не может быть изменена
		Элементы.СвязьОбработкаНесоответствия.Видимость = Ложь;
	Иначе
		Элементы.СвязьОбработкаНесоответствия.Видимость = ЕстьСвязьСНесуществующимПользователемИБ;
	КонецЕсли;
	
КонецПроцедуры

//** Начальное заполнение, проверка заполнения, доступность свойств

&НаСервере
Процедура ЗаполнитьПредставлениеРежимаЗапуска(РежимЗапуска)
	
	Если РежимЗапуска = "Авто" Тогда
		ПредставлениеРежимаЗапуска = НСтр("ru = 'Авто'");
		
	ИначеЕсли РежимЗапуска = "ОбычноеПриложение" Тогда
		ПредставлениеРежимаЗапуска = НСтр("ru = 'Обычное приложение'");
		
	ИначеЕсли РежимЗапуска = "УправляемоеПриложение" Тогда
		ПредставлениеРежимаЗапуска = НСтр("ru = 'Управляемое приложение'");
	Иначе
		ПредставлениеРежимаЗапуска = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныйРежимЗапуска()
	
	Если ПредставлениеРежимаЗапуска = НСтр("ru = 'Авто'") Тогда
		Возврат "Авто";
		
	ИначеЕсли ПредставлениеРежимаЗапуска = НСтр("ru = 'Обычное приложение'") Тогда
		Возврат "ОбычноеПриложение";
		
	ИначеЕсли ПредставлениеРежимаЗапуска = НСтр("ru = 'Управляемое приложение'") Тогда
		Возврат "УправляемоеПриложение";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеЯзыка(Язык)
	
	ПредставлениеЯзыка = "";
	
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
	
		Если МетаданныеЯзыка.Имя = Язык Тогда
			ПредставлениеЯзыка = МетаданныеЯзыка.Синоним;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныйЯзык()
	
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
	
		Если МетаданныеЯзыка.Синоним = ПредставлениеЯзыка Тогда
			Возврат МетаданныеЯзыка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРоли(ПрочитанныеРоли)
	
	Роли.Очистить();
	
	Для каждого Роль Из ПрочитанныеРоли Цикл
		НоваяСтрока = Роли.Добавить();
		НоваяСтрока.Роль        = Роль;
		НоваяСтрока.СинонимРоли = ТаблицаРолей.НайтиСтроки(Новый Структура("Имя", Роль))[0].Синоним;
	КонецЦикла;
	
	Роли.Сортировать("СинонимРоли");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСвойств()
	
	Элементы.Наименование.ТолькоПросмотр                                 = ДействияВФорме.СвойстваЭлемента       <> "Редактирование";
	Элементы.ДоступКИнформационнойБазеРазрешен.ТолькоПросмотр            = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.СвойстваПользователяИБ.ТолькоПросмотр                       = ДействияВФорме.СвойстваПользователяИБ =  "ПросмотрВсех";
	Элементы.ПользовательИнфБазыАутентификацияСтандартная.ТолькоПросмотр = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.Пароль.ТолькоПросмотр                                       = ПользовательИнфБазыЗапрещеноИзменятьПароль;
	Элементы.ПодтверждениеПароля.ТолькоПросмотр                          = ПользовательИнфБазыЗапрещеноИзменятьПароль;
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.ТолькоПросмотр   = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.ТолькоПросмотр   = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыАутентификацияОС.ТолькоПросмотр          = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыПользовательОС.ТолькоПросмотр            = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПредставлениеРежимаЗапуска.ТолькоПросмотр                   = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	
	Элементы.ОсновныеСвойства.Доступность                     = ДоступКИнформационнойБазеРазрешен;
	Элементы.ОтображениеРолей.Доступность                     = ДоступКИнформационнойБазеРазрешен;
	Элементы.ПользовательИнфБазыИмя.АвтоОтметкаНезаполненного = ДоступКИнформационнойБазеРазрешен;
	
	Элементы.Пароль.Доступность                                     = ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПодтверждениеПароля.Доступность                        = ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.Доступность = ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.Доступность = ПользовательИнфБазыАутентификацияСтандартная;
	
	Элементы.ПользовательИнфБазыПользовательОС.Доступность = ПользовательИнфБазыАутентификацияОС;
	
КонецПроцедуры

//** Для работы интерфейса ролей

&НаСервере
Процедура УстановитьДействияСРолями()
	
	ЗапретРедактирования = ПользователиПереопределяемый.ЗапретРедактированияРолей();
	
	// ** ТолькоВыбранныеРоли
	// Основное меню
	Элементы.РолиПодобрать.Видимость                       = НЕ ЗапретРедактирования;
	Элементы.РолиДобавить.Видимость                        = НЕ ЗапретРедактирования;
	Элементы.РолиУдалить.Видимость                         = НЕ ЗапретРедактирования;
	Элементы.РолиПереместитьВверх.Видимость                = НЕ ЗапретРедактирования;
	Элементы.РолиПереместитьВниз.Видимость                 = НЕ ЗапретРедактирования;
	Элементы.РолиСортироватьСписокПоВозрастанию.Видимость  = НЕ ЗапретРедактирования;
	Элементы.РолиСортироватьСписокПоУбыванию.Видимость     = НЕ ЗапретРедактирования;
	// Контекстное меню
	Элементы.КонтекстноеМенюРолиПодобрать.Видимость        = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиДобавить.Видимость         = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиУдалить.Видимость          = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиПереместитьВверх.Видимость = НЕ ЗапретРедактирования;
	Элементы.КонтекстноеМенюРолиПереместитьВниз.Видимость  = НЕ ЗапретРедактирования;
	
	// ** СредиВсехВыбранныеРоли
	// Основное меню
	Элементы.ТаблицаРолейУстановитьФлажки.Видимость               = НЕ ЗапретРедактирования;
	Элементы.ТаблицаРолейСнятьФлажки.Видимость                    = НЕ ЗапретРедактирования;
	Элементы.ТаблицаРолейСортироватьСписокПоВозрастанию.Видимость = НЕ ЗапретРедактирования;
	Элементы.ТаблицаРолейСортироватьСписокПоУбыванию.Видимость    = НЕ ЗапретРедактирования;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Истина;
		
		НайденныеРоли = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Ложь;
		
		НайденныеРоли = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() > 0 Тогда
			Роли.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеРоли(ВыбранныеРоли)
	
	Для каждого Значение Из ВыбранныеРоли Цикл
	
		ЭлементСписка = СписокВыбораРолей.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			
			Если Роли.НайтиСтроки(Новый Структура("Роль", Значение)).Количество() = 0 Тогда
				
				Строка = Роли.Добавить();
				Строка.Роль        = ЭлементСписка.Значение;
				Строка.СинонимРоли = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбораИТаблицуРолей()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	ВсеРоли.Сортировать("Синоним");
	
	Для каждого Строка Из ВсеРоли Цикл
		// Заполнение списка выбора
		СписокВыбораРолей.Добавить(Строка.Имя, Строка.Синоним);
		// Заполнение таблицы ролей
		СтрокаТаблицы = ТаблицаРолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей)
	
	Элементы.Роли.ТолькоПросмотр         = ТолькоПросмотрРолей;
	Элементы.ТаблицаРолей.ТолькоПросмотр = ТолькоПросмотрРолей;
	
	Элементы.РолиПодобрать.Доступность                = НЕ ТолькоПросмотрРолей;
	Элементы.КонтекстноеМенюРолиПодобрать.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьРолиПоСписку()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя)).Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеВыбораРолей(Текст)
	
	Список = СписокВыбораРолей.Скопировать();
	
	НомерЭлемента = Список.Количество()-1;
	Пока НомерЭлемента >= 0 Цикл
		Если ВРег(Лев(Список[НомерЭлемента].Представление, СтрДлина(Текст))) <> ВРег(Текст) Тогда
			Список.Удалить(НомерЭлемента);
		КонецЕсли;
		НомерЭлемента = НомерЭлемента - 1;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияСпискаРолей(Отказ)
	
	// Проверка незаполненных и повторяющихся ролей.
	НомерСтроки = Роли.Количество()-1;
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
	
		ТекущаяСтрока = Роли.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СинонимРоли) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Роль не заполнена!'"),
			                                                  ,
			                                                  "Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Роли.НайтиСтроки(Новый Структура("Роль", ТекущаяСтрока.Роль));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Роль повторяется!'"),
			                                                  ,
			                                                  "Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры


//** Для работы подсистемы КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры


