
//////////////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//** Установка начальных значений
	//   перед загрузкой данных из настроек на сервере
	//   для случая, когда данные ещё не были записаны и не загружаются
	ПоказатьТолькоВыбранныеРоли = (Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли);
	
	//** Подготовка постоянных данных
	
	ЗаполнитьСписокТиповОбъектовАвторизации();
	
	ПодготовитьСписокВыбораИТаблицуРолей();
	
	// Удаление роли ПолныеПрава из списка выбора и таблицы ролей
	СписокВыбораРолей.Удалить(СписокВыбораРолей.НайтиПоЗначению("ПолныеПрава"));
	ТаблицаРолей.Удалить(ТаблицаРолей.НайтиСтроки(Новый Структура("Имя", "ПолныеПрава"))[0]);
	
	//** Заполнение изменяемых данных
	
	// При создании копированием
	Если Объект.Роли.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Роли[0].СинонимРоли) Тогда
		ЗаполнитьСинонимыТабличнойЧастиРоли();
	КонецЕсли;
	
	Если Объект.Ссылка = Справочники.ГруппыВнешнихПользователей.ПустаяСсылка() И
	     Объект.Родитель.Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		
		Объект.Родитель = Справочники.ГруппыВнешнихПользователей.ПустаяСсылка();
	КонецЕсли;
	
	ОпределитьДействияВФорме();
	
	//** Установка постоянной доступности свойств
	
	Элементы.Наименование.Видимость     = ЗначениеЗаполнено(ДействияВФорме.СвойстваЭлемента);
	Элементы.Родитель.Видимость         = ЗначениеЗаполнено(ДействияВФорме.СвойстваЭлемента);
	Элементы.Комментарий.Видимость      = ЗначениеЗаполнено(ДействияВФорме.СвойстваЭлемента);
	Элементы.Состав.Видимость           = ЗначениеЗаполнено(ДействияВФорме.СоставГруппы);
	Элементы.ОтображениеРолей.Видимость = ЗначениеЗаполнено(ДействияВФорме.Роли);
	
	ЭтоГруппаВсеВнешниеПользователи = (Объект.Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи);
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
	                 НЕ ЭтоГруппаВсеВнешниеПользователи И
	                 ДействияВФорме.Роли <> "Редактирование" И
	                 ДействияВФорме.СоставГруппы <> "Редактирование" И
	                 ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	
	Элементы.Наименование.ТолькоПросмотр              = ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	Элементы.Родитель.ТолькоПросмотр                  = ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	Элементы.Комментарий.ТолькоПросмотр               = ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	Элементы.ВнешниеПользователиГруппы.ТолькоПросмотр = ЭтоГруппаВсеВнешниеПользователи ИЛИ ДействияВФорме.СоставГруппы     <> "Редактирование";
	
	УстановитьТолькоПросмотрРолей(ДействияВФорме.Роли <> "Редактирование");
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСинонимыТабличнойЧастиРоли();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	ЗаполнитьСинонимыТабличнойЧастиРоли();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененаГруппаВнешнихПользователей", Объект.Ссылка, ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗаполненияСпискаРолей(Отказ);
	
	// Проверка незаполненных и повторяющихся внешних пользователей.
	НомерСтроки = Объект.Состав.Количество()-1;
	
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
		ТекущаяСтрока = Объект.Состав.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВнешнийПользователь) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен внешний пользователь!'"),
			                                                  ,
			                                                  "Объект.Состав[" + Формат(НомерСтроки, "ЧГ=0") + "].ВнешнийПользователь",
			                                                  ,
			                                                  Отказ);
			Прервать;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", ТекущаяСтрока.ВнешнийПользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Внешний пользователь повторяется!'"),
			                                                  ,
			                                                  "Объект.Состав[" + Формат(НомерСтроки, "ЧГ=0") + "].ВнешнийПользователь",
			                                                  ,
			                                                  Отказ);
			Прервать;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьТолькоВыбранныеРоли"] = Ложь Тогда
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.СредиВсехВыбранныеРоли;
	Иначе
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	Объект.ВсеОбъектыАвторизации = Ложь;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборРодителя");
	
	ОткрытьФорму("Справочник.ГруппыВнешнихПользователей.ФормаВыбора", ПараметрыФормы, Элементы.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаОбъектовАвторизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПредставлениеТипаОбъектовАвторизации) Тогда
		УдалитьНеТипичныеВнешниеПользователи();
	Иначе
		Объект.ВсеОбъектыАвторизации  = Ложь;
		Объект.ТипОбъектовАвторизации = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаОбъектовАвторизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(ТипыОбъектовАвторизации, Элемент, ТипыОбъектовАвторизации.НайтиПоЗначению(Объект.ТипОбъектовАвторизации));
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.ТипОбъектовАвторизации        = ВыбранныйЭлемент.Значение;
		ПредставлениеТипаОбъектовАвторизации = ВыбранныйЭлемент.Представление;
		
		ПредставлениеТипаОбъектовАвторизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеОбъектыАвторизацииПриИзменении(Элемент)
	
	Если Объект.ВсеОбъектыАвторизации Тогда
		Объект.Состав.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВнешнихПользователей(Команда)

	ВыбратьПодобратьПользователей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ОбработкаВыбораВнешнегоПользователя(Значение);
		КонецЦикла;
	Иначе
		ОбработкаВыбораВнешнегоПользователя(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВнешнийПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	
КонецПроцедуры

//** Для работы интерфейса ролей

&НаКлиенте
Процедура ПодобратьРоли(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ЗакрыватьПриВыборе", Ложь), Элементы.Роли);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриИзменении(Элемент)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранныеРоли(ВыбранноеЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура СинонимРолиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.СинонимРоли) Тогда
		Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	Иначе
		Элементы.Роли.ТекущиеДанные.Роль = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = ?(Элементы.Роли.ТекущиеДанные = Неопределено, Неопределено, Элементы.Роли.ТекущиеДанные.Роль);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ТекущаяСтрока", НачальноеЗначение), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Роли.ТекущиеДанные.Роль        = ВыбранноеЗначение;
	Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРолейПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаРолей.ТекущиеДанные;
	
	НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
	
	Если СтрокаТаблицы.Пометка Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Объект.Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	ИначеЕсли НайденныеРоли.Количество() > 0 Тогда
		Объект.Роли.Удалить(НайденныеРоли[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	
	Элементы.ОтображениеРолей.ТекущаяСтраница = ?(ПоказатьТолькоВыбранныеРоли, Элементы.ТолькоВыбранныеРоли, Элементы.СредиВсехВыбранныеРоли);
	ТекущийЭлемент = ?(ПоказатьТолькоВыбранныеРоли, Элементы.Роли, Элементы.ТаблицаРолей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СнятьФлажкиНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	ДействияВФорме.Вставить("Роли",                   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СоставГруппы",           ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СвойстваЭлемента",       ""); // "", "Просмотр",     "Редактирование"
	
	Если Пользователи.ЭтоПолноправныйПользовательИБ() ИЛИ
	     ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи) Тогда
		// Администратор
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.СоставГруппы           = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	ИначеЕсли РольДоступна("ДобавлениеИзменениеВнешнихПользователей") Тогда
		// Менеджер внешних пользователей
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СоставГруппы           = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	Иначе
		// Читатель внешних пользователей
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.СоставГруппы           = "Просмотр";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	КонецЕсли;
	
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		ДействияВФорме.Роли = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СоставГруппы + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСвойств()
	
	Элементы.Состав.Доступность = НЕ Объект.ВсеОбъектыАвторизации;
	
	Элементы.СоставПодобрать.Доступность                = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	Элементы.КонтекстноеМенюСоставПодобрать.Доступность = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	Элементы.СоставДобавить.Доступность                 = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	Элементы.КонтекстноеМенюСоставДобавить.Доступность  = НЕ Элементы.Состав.ТолькоПросмотр И Элементы.Состав.Доступность;
	
	Элементы.ВсеОбъектыАвторизации.Доступность          = ЗначениеЗаполнено(ПредставлениеТипаОбъектовАвторизации) И НЕ ЗначениеЗаполнено(Объект.Родитель);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокТиповОбъектовАвторизации()
	
	Для каждого ТипСсылкиОбъектаАвторизации ИЗ Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.Типы() Цикл
	
		МетаданныеТипа     = Метаданные.НайтиПоТипу(ТипСсылкиОбъектаАвторизации);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипСсылкиОбъектаАвторизации);
		ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);
		
		ТипыОбъектовАвторизации.Добавить(ОписаниеТипаСсылки.ПривестиЗначение(Неопределено), МетаданныеТипа.Синоним);
	КонецЦикла;
	
	
	НайденныйЭлемент = ТипыОбъектовАвторизации.НайтиПоЗначению(Объект.ТипОбъектовАвторизации);
	ПредставлениеТипаОбъектовАвторизации = ?(НайденныйЭлемент = Неопределено, "", НайденныйЭлемент.Представление);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеТипичныеВнешниеПользователи()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> &ТипОбъектовАвторизации
	|	И ВнешниеПользователи.Ссылка В(&ВыбранныеВнешниеПользователи)");
	Запрос.УстановитьПараметр("ВыбранныеВнешниеПользователи", Объект.Состав.Выгрузить().ВыгрузитьКолонку("ВнешнийПользователь"));
	Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипЗнч(Объект.ТипОбъектовАвторизации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", Выборка.Ссылка));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Состав.Удалить(Объект.Состав.Индекс(НайденнаяСтрока));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(Элементы.Состав.ТекущиеДанные = Неопределено, Неопределено, Элементы.Состав.ТекущиеДанные.ВнешнийПользователь));
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	Если Объект.ТипОбъектовАвторизации <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипОбъектовАвторизации", Объект.ТипОбъектовАвторизации);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, ?(Подобрать, Элементы.Состав, Элементы.СоставВнешнийПользователь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВнешнегоПользователя(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Если Объект.Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", ВыбранноеЗначение)).Количество() = 0 Тогда
			Объект.Состав.Добавить().ВнешнийПользователь = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//** Для работы интерфейса ролей

&НаСервере
Процедура УстановитьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Истина;
		
		НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Объект.Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Ложь;
		
		НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() > 0 Тогда
			Объект.Роли.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеРоли(ВыбранныеРоли)
	
	Для каждого Значение Из ВыбранныеРоли Цикл
	
		ЭлементСписка = СписокВыбораРолей.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			
			Если Объект.Роли.НайтиСтроки(Новый Структура("Роль", Значение)).Количество() = 0 Тогда
				
				Строка = Объект.Роли.Добавить();
				Строка.Роль        = ЭлементСписка.Значение;
				Строка.СинонимРоли = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСинонимыТабличнойЧастиРоли()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	
	Для каждого Строка Из Объект.Роли Цикл
		
		НайденнаяСтрока = ВсеРоли.Найти(Строка.Роль, "Имя");
		Строка.СинонимРоли = ?(НайденнаяСтрока = Неопределено, "? " + Строка.Роль, НайденнаяСтрока.Синоним);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбораИТаблицуРолей()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	ВсеРоли.Сортировать("Синоним");
	
	Для каждого Строка Из ВсеРоли Цикл
		// Заполнение списка выбора
		СписокВыбораРолей.Добавить(Строка.Имя, Строка.Синоним);
		// Заполнение таблицы ролей
		СтрокаТаблицы = ТаблицаРолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей)
	
	Элементы.Роли.ТолькоПросмотр         = ТолькоПросмотрРолей;
	Элементы.ТаблицаРолей.ТолькоПросмотр = ТолькоПросмотрРолей;
	
	Элементы.РолиПодобрать.Доступность                = НЕ ТолькоПросмотрРолей;
	Элементы.КонтекстноеМенюРолиПодобрать.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьРолиПоСписку()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя)).Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеВыбораРолей(Текст)
	
	Список = СписокВыбораРолей.Скопировать();
	
	НомерЭлемента = Список.Количество()-1;
	Пока НомерЭлемента >= 0 Цикл
		Если ВРег(Лев(Список[НомерЭлемента].Представление, СтрДлина(Текст))) <> ВРег(Текст) Тогда
			Список.Удалить(НомерЭлемента);
		КонецЕсли;
		НомерЭлемента = НомерЭлемента - 1;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияСпискаРолей(Отказ)
	
	// Проверка незаполненных и повторяющихся ролей.
	НомерСтроки = Объект.Роли.Количество()-1;
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
	
		ТекущаяСтрока = Объект.Роли.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СинонимРоли) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Роль не заполнена!'"),
			                                                  ,
			                                                  "Объект.Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.Роли.НайтиСтроки(Новый Структура("Роль", ТекущаяСтрока.Роль));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Роль повторяется!'"),
			                                                  ,
			                                                  "Объект.Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры


