////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РегистрацияОбработки = Ложь;
	
	Если Объект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		ЭтоНовыйОбъект = Истина;
	Иначе
		ЭтоНовыйОбъект = Ложь;
		Если ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Объект.Вид) Тогда
			ПолноеНазначениеЗначение = ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(Объект.Вид);
			ЗначениеВРеквизитФормы(ПолноеНазначениеЗначение, "ПолноеНазначение");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьКоманды();
	
	УстановитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоНовыйОбъект Тогда
		
		Если НЕ ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияОбработки Тогда
		ТекущийОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки , Новый СжатиеДанных(9));
		РегистрацияОбработки = Ложь;
	КонецЕсли;
	
	Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КомандыОбработки", РеквизитФормыВЗначение("КомандыОбработки"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлОбработкиОтчета(Команда)
	
	ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлОбработкиОтчета(Команда)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
		ДиалогСохраненияФайла.Фильтр = "Внешние обработки|*.epf|Внешние отчеты|*.erf";
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
		
		Если ДиалогСохраненияФайла.Выбрать() Тогда
			
			Адрес = ПоместитьФайлОбработкиВоВременноеХранилище();
			
			Если Адрес = Неопределено Тогда
				Предупреждение(НСтр("ru = 'Нет данных для обработки.'"));
				Возврат;
			КонецЕсли;
			
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, Адрес));
			
			ПолученныеФайлы = Новый Массив;
			
			ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДиалогСохраненияФайла.ПолноеИмяФайла, Ложь);
		КонецЕсли;
		
	Иначе
		
		Адрес = ПоместитьФайлОбработкиВоВременноеХранилище();
		
		Если Адрес = Неопределено Тогда
			Предупреждение(НСтр("ru = 'Нет данных для обработки.'"));
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(Адрес, Объект.ИмяФайла, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		Объект.Назначение.Очистить();
		
		Для Каждого ЭлементПараметр Из Параметр Цикл
			
			// поиск переданного назначения в полном возможном назначении
			НайденныеСтроки = ПолноеНазначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементПараметр.Значение));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НовоеНазначение = Объект.Назначение.Добавить();
				НовоеНазначение.ПолноеИмяОбъектаМетаданных = ЭлементПараметр.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНазначениеОбработки(Команда)
	
	ФильтрПоОбъектамМетаданных = ПолучитьФильтрПоОбъектамМетаданных(Объект.Вид);
	
	ВыбранныеОбъектыМетаданных = Новый СписокЗначений;
	
	Для Каждого ЭлементНазначение ИЗ Объект.Назначение Цикл
		ВыбранныеОбъектыМетаданных.Добавить(ЭлементНазначение.ПолноеИмяОбъектаМетаданных);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ФильтрПоОбъектамМетаданных", ФильтрПоОбъектамМетаданных);
	ПараметрыФормы.Вставить("ВыбранныеОбъектыМетаданных", ВыбранныеОбъектыМетаданных);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФильтрПоОбъектамМетаданных(ВидОбработки)
	
	ФильтрПоОбъектамМетаданных = Новый СписокЗначений;
	
	Если		ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
		
	ИначеЕсли	ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
		
	ИначеЕсли	ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
		
	ИначеЕсли	ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	КонецЕсли;
	
	Для Каждого ТипПараметраКоманды Из ОбщаяКоманда.ТипПараметраКоманды.Типы() Цикл
		ФильтрПоОбъектамМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипПараметраКоманды).ПолноеИмя());
	КонецЦикла;
	
	Возврат ФильтрПоОбъектамМетаданных;
	
КонецФункции

&НаКлиенте
Процедура НастроитьРасписаниеКоманды(Команда)
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Разрешено Тогда
		Отказ = Ложь;
		УстановитьРасписание(ТекущиеДанные, Отказ);
		Если НЕ Отказ Тогда
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru = 'Команда используется только на клиенте.
									|Регламентное задание можно настраивать только для команд исполняемых в серверном контексте.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыОбработкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.КомандыОбработки.ПодчиненныеЭлементы.КомандыИспользование Тогда
		
		Если НЕ Элемент.ТекущиеДанные.Разрешено Тогда
			
			Отказ = Истина;
			Предупреждение(НСтр("ru = 'Команда используется только на клиенте.
										|Регламентное задание можно настраивать только для команд исполняемых в серверном контексте.'"));
		ИначеЕсли Элемент.ТекущиеДанные.РасписаниеПредставление = стрРасписаниеНеЗадано()Тогда
			
			УстановитьРасписание(Элементы.КомандыОбработки.ТекущиеДанные, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.КомандыОбработки.ПодчиненныеЭлементы.КомандыРасписание Тогда
		
		Если НЕ Элемент.ТекущиеДанные.Разрешено Тогда
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.КомандыОбработки.ПодчиненныеЭлементы.БыстрыйДоступПредставление Тогда
		
		НастроитьБыстрыйДоступОбщийОбработчик(Элемент.ТекущиеДанные);
		Отказ = Истина;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРасписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Разрешено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРасписание(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьРазделыКомандногоИнтерфейса(Команда)
	
	Разделы = Новый СписокЗначений;
	
	Для Каждого РазделЭлемент Из Объект.Разделы Цикл
		Разделы.Добавить(РазделЭлемент.ИмяРаздела);
	КонецЦикла;
	
	Результат = ОткрытьФормуМодально("Справочник.ДополнительныеОтчетыИОбработки.Форма.ПодборРазделов",
						Новый Структура("Разделы,ВидОбработки", Разделы, Объект.Вид));
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		Объект.Разделы.Очистить();
		Для Каждого РазделЗн Из Результат Цикл
			НоваяСтрока = Объект.Разделы.Добавить();
			НоваяСтрока.ИмяРаздела = РазделЗн.Значение;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаСервере
// Получает файл обработки из временного хранилища, пытается создать объект
// обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета)
//
Функция ЗарегистрироватьОбработку(АдресВоВременномХранилище,
								ИмяФайла,
								РасширениеФайла)
	
	ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	
	Попытка
		Если ВРег(РасширениеФайла) = "EPF" Тогда
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
		Иначе
			ВнешняяОбработка = ВнешниеОтчеты.Создать(ИмяВременногоФайла, Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		РегистрационныеДанные = ВнешняяОбработка.СведенияОВнешнейОбработке();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Возможно, обработка (отчет) устарела или не является дополнительной:'")
					+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Если РегистрационныеДанные.БезопасныйРежим
	 ИЛИ Пользователи.ЭтоПолноправныйПользовательИБ()
	 ИЛИ ПравоДоступа("Администрирование", Метаданные) Тогда
		// ничего не делаем
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для добавления обработок запускаемых в небезопасном режиме требуется право ""Администрирование"".'"));
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	Если Объект.ИмяФайла = ИмяФайла
		И Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид] Тогда
		// если это перерегистрация той же обработи - не очищаем назначение
	Иначе
		ОбъектЗначение.Назначение.Очистить();
	КонецЕсли;
	
	// Инициализация сведений об обработке
	ОбъектЗначение.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	ОбъектЗначение.Наименование		= РегистрационныеДанные.Наименование;
	ОбъектЗначение.Версия			= РегистрационныеДанные.Версия;
	ОбъектЗначение.БезопасныйРежим	= РегистрационныеДанные.БезопасныйРежим;
	ОбъектЗначение.Информация		= РегистрационныеДанные.Информация;
	
	// Устанавливаем имя файла обработки
	ОбъектЗначение.ИмяФайла = ИмяФайла;
	
	// Если новая обработка или не заполнено назначение - устанавливаем назначение из обработки
	Если (Объект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка()
		 ИЛИ ОбъектЗначение.Назначение.Количество() = 0)
		И (ОбъектЗначение.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
			ИЛИ ОбъектЗначение.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
			ИЛИ ОбъектЗначение.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма
			ИЛИ ОбъектЗначение.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов)
		 ТОГДА
		
		ОбъектЗначение.ИспользоватьДляФормыОбъекта = Истина;
		ОбъектЗначение.ИспользоватьДляФормыСписка = Истина;
		
		ПолноеНазначениеЗначение = ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ОбъектЗначение.Вид);
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			
			Для Каждого ЭлементЗаданноеНазначение Из РегистрационныеДанные.Назначение Цикл
				
				РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементЗаданноеНазначение, ".");
				
				Если РазделеннаяСтрока[1] = "*" Тогда
					
					НайденныеНазначения = ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("Класс", РазделеннаяСтрока[0]));
					
					Для Каждого ЭлементНайденноеНазначение Из НайденныеНазначения Цикл
						НоваяСтрока = ОбъектЗначение.Назначение.Добавить();
						НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементНайденноеНазначение.ПолноеИмяОбъектаМетаданных;
					КонецЦикла;
					
				Иначе
					
					Если ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементЗаданноеНазначение)).Количество() > 0 Тогда
						НоваяСтрока = ОбъектЗначение.Назначение.Добавить();
						НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементЗаданноеНазначение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ОбъектЗначение.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");
		
		ЗначениеВРеквизитФормы(ПолноеНазначениеЗначение, "ПолноеНазначение");
		
	КонецЕсли;
	
	КомандыСохраненные = ОбъектЗначение.Команды.Выгрузить();
	
	ОбъектЗначение.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
		
		НоваяСтрока = ОбъектЗначение.Команды.Добавить();
		НоваяСтрока.Идентификатор	= ЭлементОписаниеКоманды.Идентификатор;
		НоваяСтрока.Представление	= ЭлементОписаниеКоманды.Представление;
		НоваяСтрока.Модификатор		= ЭлементОписаниеКоманды.Модификатор;
		НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
		
		Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для команды %1 не определен способ запуска.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементОписаниеКоманды.Представление);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектЗначение.Ответственный = ОбщегоНазначения.ТекущийПользователь();
	
	ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");
	
	УстановитьЭлементыФормы(Истина);
	
	ЗаполнитьКоманды(КомандыСохраненные);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоманды(КомандыСохраненные = Неопределено)
	
	КомандыОбработки.Очистить();
	
	Для Каждого ЭлементКоманда Из Объект.Команды Цикл
		
		НоваяКоманда = КомандыОбработки.Добавить();
		
		НоваяКоманда.Представление = ЭлементКоманда.Представление;
		НоваяКоманда.Идентификатор = ЭлементКоманда.Идентификатор;
		
		Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
			ТексЗапроса = "Выбрать
							|	Пользователь КАК Пользователь
							| ИЗ
							|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам
							| ГДЕ
							|	ДополнительныйОтчетИлиОбработка = &ДополнительныйОтчетИлиОбработка
							|	И ИдентификаторКоманды = &ИдентификаторКоманды
							|	И Доступно";
			Запрос = Новый Запрос;
			Запрос.Текст = ТексЗапроса;
			Запрос.Параметры.Вставить("ДополнительныйОтчетИлиОбработка", Объект.Ссылка);
			Запрос.Параметры.Вставить("ИдентификаторКоманды", ЭлементКоманда.Идентификатор);
			
			УстановитьПривилегированныйРежим(Истина);
			
			Выгрузка = Запрос.Выполнить().Выгрузить();
			НоваяКоманда.БыстрыйСписокДоступа.ЗагрузитьЗначения(Выгрузка.ВыгрузитьКолонку("Пользователь"));
			
			НоваяКоманда.БыстрыйДоступПредставление = 
					ПолучитьСтрокуПредставленияПользователейСБыстрымДоступом(
							НоваяКоманда.БыстрыйСписокДоступа.Количество());
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
			И ЭлементКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода Тогда
			
			// Можно задавать расписание и указывать использование
			НоваяКоманда.Разрешено = Истина;
			
			РегламентноеЗаданиеЗадано = Ложь;
			
			Если КомандыСохраненные = Неопределено Тогда
				// загрузка команд из таблицы объекта
				РегламентноеЗаданиеGUID = ЭлементКоманда.РегламентноеЗаданиеGUID;
			Иначе
				
				НайденнаяСтрока = КомандыСохраненные.Найти(ЭлементКоманда.Идентификатор, "Идентификатор");
				
				Если НайденнаяСтрока = Неопределено Тогда
					// соответствия не найдено
				Иначе
					РегламентноеЗаданиеGUID = НайденнаяСтрока.РегламентноеЗаданиеGUID;
					КомандыСохраненные.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
				
				РегламентноеЗадание = ДополнительныеОтчетыИОбработки.НайтиРегламентноеЗадание(РегламентноеЗаданиеGUID);
				
				Если РегламентноеЗадание = Неопределено Тогда
					
					ЭлементКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
					
				Иначе
					
					ЭлементКоманда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
					
					НоваяКоманда.РасписаниеПредставление = Строка(РегламентноеЗадание.Расписание);
					НоваяКоманда.Использование	= РегламентноеЗадание.Использование;
					НоваяКоманда.Расписание.Добавить(РегламентноеЗадание.Расписание);
					
					РегламентноеЗаданиеЗадано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ РегламентноеЗаданиеЗадано Тогда
				НоваяКоманда.РасписаниеПредставление = стрРасписаниеНеЗадано();
				НоваяКоманда.Использование	= Ложь;
			КонецЕсли;
			
		Иначе
			НоваяКоманда.РасписаниеПредставление = НСтр("ru = 'Не применимо - команда используется только на клиенте'");
			НоваяКоманда.Использование	= Ложь;
			НоваяКоманда.Разрешено		= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыФормы(Регистрация = Ложь)
	
	Если Регистрация ИЛИ ЗначениеЗаполнено(Объект.Ссылка)Тогда
		
		Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка 
		 ИЛИ Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
					
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.КомандыРасписание.Видимость = Истина;
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.КомандыИспользование.Видимость = Истина;
			
			Элементы.СтраницыРазделыНазначение.ТекущаяСтраница =
				Элементы.СтраницаРазделы;
			
		ИначеЕсли ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Объект.Вид) Тогда
			
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.КомандыРасписание.Видимость = Ложь;
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.КомандыИспользование.Видимость = Ложь;
			
			Элементы.СтраницыРазделыНазначение.ТекущаяСтраница =
				Элементы.СтраницаНазначение;
				
			Элементы.КомандыОбработкиНастроитьБыстрыйДоступККоманде.Видимость = Ложь;
			Элементы.КомандыОбработкиНастроитьРасписаниеКоманды.Видимость = Ложь;
			
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.БыстрыйДоступПредставление.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.БезопасныйРежим Тогда
			Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = 
					Элементы.ГруппаИнформация;
		Иначе
			Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = 
					Элементы.ГруппаПредупреждение;
		КонецЕсли;
		
		Если ЭтоНовыйОбъект Тогда
			Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
			 ИЛИ Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
				Заголовок = НСтр("ru = 'Дополнительный отчет (создание)'");
			Иначе
				Заголовок = НСтр("ru = 'Дополнительная обработка (создание)'");
			КонецЕсли;
		Иначе
			Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
			 ИЛИ Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
				Заголовок = Объект.Наименование + " " + НСтр("ru = '(Дополнительный отчет)'");
			Иначе
				Заголовок = Объект.Наименование + " " + НСтр("ru = '(Дополнительная обработка)'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьБыстрыйДоступОбщийОбработчик(ТекущиеДанные)
	
	Идентификатор = ТекущиеДанные.Идентификатор;
	
	ТекущиеДанныеЭлементКоллекции = КомандыОбработки.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	
	Результат = ОткрытьФормуМодально("Справочник.ДополнительныеОтчетыИОбработки.Форма.БыстрыйДоступКДополнительнымОтчетамИОбработкам",
					Новый Структура("ПользователиСБыстрымДоступом, ПредставлениеКоманды", 
									ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа,
									ТекущиеДанные.Представление));
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Очистить();
		Для Каждого ЭлементПользователь Из Результат Цикл
			ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Добавить(ЭлементПользователь.Значение);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
	ТекущиеДанныеЭлементКоллекции.БыстрыйДоступПредставление =
			ПолучитьСтрокуПредставленияПользователейСБыстрымДоступом(
					ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Количество());
	
КонецПроцедуры

&НаСервере
Функция ПоместитьФайлОбработкиВоВременноеХранилище()
	
	Если РегистрацияОбработки Тогда
		Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	КонецЕсли;
	
	Если Объект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = РеквизитФормыВЗначение("Объект").ХранилищеОбработки.Получить();
	
	Если ТипЗнч(Значение) <> Тип("ДвоичныеДанные") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Значение);
	
КонецФункции

&НаКлиенте
Функция ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета()
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
		ДиалогОткрытияФайла.Фильтр = "Внешние обработки|*.epf|Внешние отчеты|*.erf";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещенныеФайлы = Новый Массив;
		
		Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ДиалогОткрытияФайла, Истина) Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[0].Имя, "\");
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			РасширениеФайла = Прав(ИмяФайла, 3);
			
			Если Не ЗарегистрироватьОбработку(ПомещенныеФайлы[0].Хранение, ИмяФайла, РасширениеФайла) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		АдресВоВременномХранилище = "";
		ВыбранноеИмяФайла = "";
		
		Если ПоместитьФайл(АдресВоВременномХранилище, , ВыбранноеИмяФайла, Истина) Тогда
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, "\");
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			РасширениеФайла = Прав(ИмяФайла, 3);
			
			Если	  ВРег(РасширениеФайла) = "EPF" Тогда
				// внешняя обработка
			ИначеЕсли ВРег(РасширениеФайла) = "ERF" Тогда
				// внешний отчет
			Иначе
				Предупреждение(НСтр("ru = 'Невозможно определить тип файла по расширению'"));
				Возврат Ложь;
			КонецЕсли;
			
			Если НЕ ЗарегистрироватьОбработку(АдресВоВременномХранилище, ИмяФайла, РасширениеФайла) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Модифицированность = Истина;
	РегистрацияОбработки = Истина;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция РедактированиеРасписанияРегламентногоЗадания(Расписание)
	
	Если Расписание = Неопределено Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	// открываем диалог для редактирования Расписания
	Если Диалог.ОткрытьМодально() Тогда
		
		Расписание = Диалог.Расписание;
		
	КонецЕсли;
	
	Возврат Расписание;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРасписание(ТекущиеДанные, Отказ = Ложь)
	
	Если ТекущиеДанные.Расписание.Количество() > 0 Тогда
		Расписание = ТекущиеДанные.Расписание.Получить(0).Значение;
	Иначе
		Расписание = Неопределено;
	КонецЕсли;
	
	Расписание = РедактированиеРасписанияРегламентногоЗадания(Расписание);
	
	ТекущиеДанные.Расписание.Очистить();
	ТекущиеДанные.Расписание.Добавить(Расписание);
	
	ТекущиеДанные.РасписаниеПредставление = Строка(Расписание);
	
	Если ТекущиеДанные.РасписаниеПредставление = ПредставлениеПустогоРасписания() Тогда
		ТекущиеДанные.РасписаниеПредставление = стрРасписаниеНеЗадано();
		ТекущиеДанные.Использование = Ложь;
		Отказ = Истина;
	Иначе
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоРасписания()
	
	Возврат Строка(Новый РасписаниеРегламентногоЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция стрРасписаниеНеЗадано()
	
	Возврат НСтр("ru = 'Расписание не задано'");
	
КонецФункции

&НаКлиенте
Процедура НастроитьБыстрыйДоступ(Команда)
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьБыстрыйДоступОбщийОбработчик(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Объект.Вид) Тогда
		
		Если НЕ Объект.ИспользоватьДляФормыОбъекта И НЕ Объект.ИспользоватьДляФормыСписка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Необходимо указать использование обработки, как минимум для одной формы'"),,,"Объект.ИспользоватьДляФормыОбъекта", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуПредставленияПользователейСБыстрымДоступом(ЧислоПользователейСБыстрымДоступом)
	
	Если ЧислоПользователейСБыстрымДоступом = 0 Тогда
		
		БыстрыйДоступПредставление = НСтр("ru = 'Команды нет в быстром доступе'");
		
	Иначе
		
		ПоследняяЦифра = Число(Прав(Строка(ЧислоПользователейСБыстрымДоступом),1));
		
		Если ПоследняяЦифра = 1 Тогда
			БыстрыйДоступПредставление = НСтр("ru = '%1 пользователь'");
		ИначеЕсли ПоследняяЦифра = 2 Или ПоследняяЦифра = 3 Или ПоследняяЦифра = 4 Тогда
			БыстрыйДоступПредставление = НСтр("ru = '%1 пользователя'");
		Иначе
			БыстрыйДоступПредставление = НСтр("ru = '%1 пользователей'");
		КонецЕсли;
		
		БыстрыйДоступПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(БыстрыйДоступПредставление, Строка(ЧислоПользователейСБыстрымДоступом))
		
	КонецЕсли;
	
	Возврат БыстрыйДоступПредставление;
	
КонецФункции
