////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтоНовый() Тогда
		
		ОбъектВИБ = Ссылка.ПолучитьОбъект();
		
		Если Вид <> ОбъектВИБ.Вид Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя менять вид дополнительного отчета или обработки, после записи объекта информационную базу.'"),,,,
					Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.НеИспользуется;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		// группы не обрабатываем
		
	ИначеЕсли ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Вид) Тогда
		
		ИмяРесурса = ПолучитьИмяРесурсаПоВидуОбработки(Вид);
		
		Если ЭтоНовый() Тогда
			ПредыдущееНазначение = Новый ТаблицаЗначений;
			ПредыдущееНазначение.Колонки.Добавить("ПолноеИмяОбъектаМетаданных", Новый ОписаниеТипов("Строка"));
		Иначе
			ПредыдущееНазначение = ОбъектВИБ.Назначение;
		КонецЕсли;
		
		Таблица = СверткаПоПолю(ПредыдущееНазначение, Назначение, "ПолноеИмяОбъектаМетаданных", "Строка");
		
		Удаленные = Таблица.НайтиСтроки(Новый Структура("Признак", -1));
		Добавленные = Таблица.НайтиСтроки(Новый Структура("Признак", 1));
		Оставшиеся = Таблица.НайтиСтроки(Новый Структура("Признак", 0));
		
		Если ПредыдущееНазначение.Количество() > 0 Тогда
			
			МассивУдаляемых = Новый Массив;
			
			Для Каждого УдаленныйЭлемент Из Удаленные Цикл
				МассивУдаляемых.Добавить(УдаленныйЭлемент.ПолноеИмяОбъектаМетаданных);
			КонецЦикла;
			
			Если ОбъектВИБ.ИспользоватьДляФормыОбъекта Тогда
				СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаОбъекта");
			КонецЕсли;
			
			Если ОбъектВИБ.ИспользоватьДляФормыСписка Тогда
				СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаСписка");
			КонецЕсли;
			
		КонецЕсли; // ПредыдущееНазначение.Количество() > 0
		
		Если Оставшиеся.Количество() > 0 Тогда
			
			Если НЕ ОбъектВИБ.ИспользоватьДляФормыОбъекта И ИспользоватьДляФормыОбъекта Тогда // включаем
				Для Каждого СтрокаНазначение Из Оставшиеся Цикл
					УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаОбъекта", ИмяРесурса, Истина);
				КонецЦикла;
			ИначеЕсли ОбъектВИБ.ИспользоватьДляФормыОбъекта И НЕ ИспользоватьДляФормыОбъекта Тогда
				МассивОсвобождаемых = Новый Массив;
				Для Каждого ОсвобождаемыйЭлемент Из Оставшиеся Цикл
					МассивОсвобождаемых.Добавить(ОсвобождаемыйЭлемент.ПолноеИмяОбъектаМетаданных);
				КонецЦикла;
				СвернутьРегистрДоступностиОтчетовИОбработок(МассивОсвобождаемых, Ссылка, Вид, ИмяРесурса, "ФормаОбъекта");
			КонецЕсли;
			
			Если НЕ ОбъектВИБ.ИспользоватьДляФормыСписка И ИспользоватьДляФормыСписка Тогда // включаем
				Для Каждого СтрокаНазначение Из Оставшиеся Цикл
					УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаСписка", ИмяРесурса, Истина);
				КонецЦикла;
			ИначеЕсли ОбъектВИБ.ИспользоватьДляФормыСписка И НЕ ИспользоватьДляФормыСписка Тогда
				МассивОсвобождаемых = Новый Массив;
				Для Каждого ОсвобождаемыйЭлемент Из Оставшиеся Цикл
					МассивОсвобождаемых.Добавить(ОсвобождаемыйЭлемент.ПолноеИмяОбъектаМетаданных);
				КонецЦикла;
				СвернутьРегистрДоступностиОтчетовИОбработок(МассивОсвобождаемых, Ссылка, Вид, ИмяРесурса, "ФормаСписка");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Добавленные.Количество() > 0 Тогда
			
			Если ИспользоватьДляФормыОбъекта Тогда
				Для Каждого СтрокаНазначение Из Добавленные Цикл
					УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаОбъекта", ИмяРесурса, Истина);
				КонецЦикла;
			КонецЕсли;
			
			Если ИспользоватьДляФормыСписка Тогда
				Для Каждого СтрокаНазначение Из Добавленные Цикл
					УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаСписка", ИмяРесурса, Истина);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		ТаблицаКоманд = Неопределено;
		
		Если ДополнительныеСвойства.Свойство("КомандыОбработки", ТаблицаКоманд) Тогда
		
			// переносим данные о регламентных заданиях в командах в объект
			// и обновляем регламентные задания, если требуется
			Для Каждого ЭлементКоманда Из ТаблицаКоманд Цикл
				
				Если ЭлементКоманда.Расписание.Количество() > 0 Тогда
					Расписание = ЭлементКоманда.Расписание.Получить(0).Значение;
				Иначе
					Расписание = ПредставлениеПустогоРасписания();
				КонецЕсли;
				
				КомандаВОбъекте = Команды.НайтиСтроки(Новый Структура("Идентификатор", ЭлементКоманда.Идентификатор))[0];
				
				Если Строка(Расписание) = ПредставлениеПустогоРасписания() Тогда // возможно было удалено регламентное задание
					Если ЗначениеЗаполнено(КомандаВОбъекте.РегламентноеЗаданиеGUID) Тогда
						Справочники.ДополнительныеОтчетыИОбработки.УдалитьРегламентноеЗадание(КомандаВОбъекте.РегламентноеЗаданиеGUID);
						КомандаВОбъекте.РегламентноеЗаданиеGUID = "";
					КонецЕсли;
				Иначе
					Справочники.ДополнительныеОтчетыИОбработки.ОбновитьСведенияПоРасписанию(
								ЭтотОбъект, КомандаВОбъекте, Расписание, ЭлементКоманда.Использование, Отказ);
				КонецЕсли;
				
			КонецЦикла; // Для Каждого ЭлементКоманда Из ТаблицаКоманд Цикл
			
		КонецЕсли; // Если ДополнительныеСвойства.Свойство("КомандыОбработки", ТаблицаКоманд) Тогда
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ТаблицаКоманд = Неопределено;
	
	Если ДополнительныеСвойства.Свойство("КомандыОбработки", ТаблицаКоманд) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для Каждого ЭлементКоманда Из ТаблицаКоманд Цикл
			
			НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДополнительныйОтчетИлиОбработка.Установить(Ссылка);
			НаборЗаписей.Отбор.ИдентификаторКоманды.Установить(ЭлементКоманда.Идентификатор);
			
			Для Каждого ЭлементПользователь Из ЭлементКоманда.БыстрыйСписокДоступа Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.ДополнительныйОтчетИлиОбработка = Ссылка;
				Запись.ИдентификаторКоманды = ЭлементКоманда.Идентификатор;
				Запись.Пользователь = ЭлементПользователь.Значение;
				Запись.Доступно = Истина;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ЭтоГруппа Тогда
		
		// группы не обрабатываем
		
	ИначеЕсли ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Вид) Тогда
		
		ИмяРесурса = ПолучитьИмяРесурсаПоВидуОбработки(Вид);
		
		МассивУдаляемых = Новый Массив;
		
		Для Каждого ЭлементНазначение ИЗ Назначение Цикл
			МассивУдаляемых.Добавить(ЭлементНазначение.ПолноеИмяОбъектаМетаданных);
		КонецЦикла;
		
		Если ИспользоватьДляФормыОбъекта Тогда
			СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаОбъекта");
		КонецЕсли;
		
		Если ИспользоватьДляФормыСписка Тогда
			СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаСписка");
		КонецЕсли;
		
	Иначе
		
		Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
			
			Для Каждого ЭлементКоманда Из Команды Цикл
				
				Справочники.ДополнительныеОтчетыИОбработки.УдалитьРегламентноеЗадание(ЭлементКоманда.РегламентноеЗаданиеGUID);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегламентноеЗаданиеGUID = "";
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	РегламентноеЗаданиеGUID = "";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

Функция СверткаПоПолю(Таблица1, Таблица2, ИмяПоля, ИмяТипаПоля)
	
	Таблица = ПолучитьТаблицуСравнения(ИмяПоля, ИмяТипаПоля);
	
	Для Каждого ЭлементПолноеИмя Из Таблица1.ВыгрузитьКолонку(ИмяПоля) Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяПоля] = ЭлементПолноеИмя;
		НоваяСтрока.Признак = -1;
	КонецЦикла;
	
	Для Каждого ЭлементПолноеИмя Из Таблица2.ВыгрузитьКолонку(ИмяПоля) Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяПоля] = ЭлементПолноеИмя;
		НоваяСтрока.Признак = +1;
	КонецЦикла;
	
	Таблица.Свернуть(ИмяПоля, "Признак");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьТаблицуСравнения(ИмяКолонки, ИмяТипа)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ИмяТипа));
	ТаблицаЗначений.Колонки.Добавить("Признак", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура УстановитьДоступностьКоманды(ПолноеИмяОбъектаМетаданных, ТипФормы, ИмяРесурса, Значение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.НазначениеДополнительныхОбработок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипОбъекта = ПолноеИмяОбъектаМетаданных;
	МенеджерЗаписи.ТипФормы = ТипФормы;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ТипОбъекта = ПолноеИмяОбъектаМетаданных;
	МенеджерЗаписи.ТипФормы = ТипФормы;
	МенеджерЗаписи[ИмяРесурса] = Значение;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, ТипФормы)
	
	Если МассивУдаляемых.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НазначениеВО.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК НазначениеВО
			|	СОЕДИНЕНИЕ
			|		Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|			ПО НазначениеВО.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка
			|ГДЕ
			|	НазначениеВО.ПолноеИмяОбъектаМетаданных В (&НаборИмен)
			|	И ДополнительныеОтчетыИОбработки.Ссылка <> &Ссылка
			|	И ДополнительныеОтчетыИОбработки.Вид = &Вид";
	
	Если ТипФормы = "ФормаОбъекта" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыОбъекта";
	ИначеЕсли ТипФормы = "ФормаСписка" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыСписка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("НаборИмен",	МассивУдаляемых);
	Запрос.Параметры.Вставить("Ссылка",		Ссылка);
	Запрос.Параметры.Вставить("Вид",		Вид);
	
	ИменаРазрешенных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПолноеИмяОбъектаМетаданных");
	
	Для Каждого ПолноеИмяОбъектаМетаданных Из МассивУдаляемых Цикл
		Если ИменаРазрешенных.Найти(ПолноеИмяОбъектаМетаданных) = Неопределено Тогда
			УстановитьДоступностьКоманды(ПолноеИмяОбъектаМетаданных, ТипФормы, ИмяРесурса, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяРесурсаПоВидуОбработки(Вид)
	
	ИмяРесурса = Неопределено;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		ИмяРесурса = "ИспользоватьЗаполнениеОбъекта";
	КонецЕсли;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		ИмяРесурса = "ИспользоватьОтчеты";
	КонецЕсли;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		ИмяРесурса = "ИспользоватьПечатныеФормы";
	КонецЕсли;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		ИмяРесурса = "ИспользоватьСозданиеСвязанныхОбъектов";
	КонецЕсли;
	
	Возврат ИмяРесурса;
	
КонецФункции

Функция ПредставлениеПустогоРасписания()
	
	Возврат Строка(Новый РасписаниеРегламентногоЗадания);
	
КонецФункции
