
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//** Установка начальных значений
	//   перед загрузкой данных из настроек на сервере
	//   для случая, когда данные ещё не были записаны и не загружаются
	ПоказатьТолькоВыбранныеРоли = (Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли);
	
	//** Подготовка постоянных коллекций
	
	ПодготовитьСписокВыбораИТаблицуРолей();
	
	// Заполнение списка всегда используемых видов доступа (для исключения при выборе)
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа().НайтиСтроки(Новый Структура("ВидДоступаИспользуетсяВсегда", Истина)) Цикл
		ВидыДоступаИспользуемыеВсегда.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	// Заполнение списка видов доступа через права по значениям доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа().НайтиСтроки(Новый Структура("ВидДоступаЧерезПраваПоЗначениямДоступа", Истина)) Цикл
		ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	// Заполнение типов значений доступа всех видов доступа
	Для каждого СвойстваВидаДоступа Из УправлениеДоступом.СвойстваВидаДоступа() Цикл
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта), МетаданныеТипа.ПредставлениеОбъекта, МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ВидДоступаПользователи = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	ВидДоступаВнешниеПользователи = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	//** Заполнение изменяемых коллекций
	
	// При создании копированием
	Если Объект.Роли.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Роли[0].СинонимРоли) Тогда
		ЗаполнитьСинонимыТабличнойЧастиРоли();
		ЗаполнитьСвойстваВидовДоступаВФорме();
	КонецЕсли;
	
	// Удаление роли ПолныеПрава из списка выбора и таблицы ролей
	СписокВыбораРолей.Удалить(СписокВыбораРолей.НайтиПоЗначению("ПолныеПрава"));
	ТаблицаРолей.Удалить(ТаблицаРолей.НайтиСтроки(Новый Структура("Имя", "ПолныеПрава"))[0]);
	
	//** Установка постоянной доступности свойств
	
	// Определение необходимости настройки ограничений доступа
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.ВидыИЗначенияДоступа.Видимость = Ложь;
	КонецЕсли;
	
	// Определение прав восстановления по начальному заполнению
	Элементы.ВосстановитьПоНачальномуЗаполнению.Видимость = УправлениеДоступом.ЕстьРоль("ПолныеПрава");
	
	// Определение возможности восстановления по начальному заполнению
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ВосстановитьПоНачальномуЗаполнению.Доступность = Ложь;
	Иначе
		Элементы.ВосстановитьПоНачальномуЗаполнению.Доступность = УправлениеДоступом.ЕстьНачальноеЗаполнениеПрофиляГруппДоступа(Объект.Ссылка);
	КонецЕсли;
	
	// Определение возможности редактирования элементов формы (перезапись доступна)
	ЭтоПрофильАдминистратор = ТолькоПросмотр ИЛИ Объект.Ссылка = Справочники.ПрофилиГруппДоступа.Администратор;
	
	Элементы.Наименование.ТолькоПросмотр = ЭтоПрофильАдминистратор;
	
	// Настройка редактирования видов доступа
	Элементы.ВидыДоступа.ТолькоПросмотр                     =    ЭтоПрофильАдминистратор;
	Элементы.ВидыДоступаДобавить.Доступность                = НЕ ЭтоПрофильАдминистратор;
	Элементы.КонтекстноеМенюВидыДоступаДобавить.Доступность = НЕ ЭтоПрофильАдминистратор;
	
	УстановитьТолькоПросмотрРолей(ЭтоПрофильАдминистратор);
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСинонимыТабличнойЧастиРоли();
	ЗаполнитьСвойстваВидовДоступаВФорме();
	ОбновитьГруппыДоступаПрофиля = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТребуетсяОбновитьГруппыДоступаПрофиля Тогда
		КодОтвета = Вопрос(ТекстВопросаОбновитьГруппыДоступаПрофиля(), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		Если КодОтвета = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли КодОтвета = КодВозвратаДиалога.Да Тогда
			ПараметрыЗаписи.Вставить("ОбновитьГруппыДоступаПрофиля");
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение значений из таблицы формы в табличную часть объекта.
	ПоместитьЗаполнитьДанные(ТекущийВидДоступа);
	
	ПроверкаЗаполненияВидовИЗначенийДоступа(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ОбновитьГруппыДоступаПрофиля") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьГруппыДоступаПрофиля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
		ПараметрыЗаписи.Вставить("ЕстьОшибки");
	КонецЕсли;
	
	ЗаполнитьСинонимыТабличнойЧастиРоли();
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЕстьОшибки") Тогда
		Предупреждение(НСтр("ru = 'При записи возникли ошибки (см. журнал регистрации)'"));
	КонецЕсли;
	
	ОбъектЗаписывался = Истина;
	
	Если ПереименованныеРоли.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Переименовать следующие роли во всех профилях?'")+ Символы.ПС;
		Для каждого ПереименованнаяРоль Из ПереименованныеРоли Цикл
			ТекстВопроса = ТекстВопроса + Символы.ПС + ПереименованнаяРоль.СтароеИмяРоли + " -> " + ПереименованнаяРоль.НовоеИмяРоли;
		КонецЦикла;
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ОбновитьПереименованныеРоли();
		КонецЕсли;
		ПереименованныеРоли.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗаполненияСпискаРолей(Отказ);
	
	Если Отказ Тогда
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьТолькоВыбранныеРоли"] = Ложь Тогда
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.СредиВсехВыбранныеРоли;
	Иначе
		Элементы.ОтображениеРолей.ТекущаяСтраница = Элементы.ТолькоВыбранныеРоли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий команд и элементов формы
//

&НаКлиенте
Процедура ВосстановитьПоНачальномуЗаполнению(Команда)
	
	Если Модифицированность ИЛИ ОбъектЗаписывался Тогда
		Предупреждение(НСтр("ru = 'Для выполнения команды требуется переоткрыть форму!'"));
		
	ИначеЕсли Вопрос(НСтр("ru = 'Заменить содержимое профиля содержимым начального заполнения?'"), РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
		КодОтвета = Вопрос(ТекстВопросаОбновитьГруппыДоступаПрофиля(), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		Если КодОтвета <> КодВозвратаДиалога.Отмена Тогда
			УправлениеДоступом.НачальноеЗаполнениеПрофилейГруппДоступа(Объект.Ссылка, КодОтвета = КодВозвратаДиалога.Да, Ложь);
		КонецЕсли;
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

//** Для работы интерфейса ролей

&НаКлиенте
Процедура ПодобратьРоли(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ЗакрыватьПриВыборе", Ложь), Элементы.Роли);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриИзменении(Элемент)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранныеРоли(ВыбранноеЗначение);
	
КонецПроцедуры


&НаКлиенте
Процедура СинонимРолиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Роли.ТекущиеДанные.СинонимРоли) Тогда
		Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	Иначе
		Элементы.Роли.ТекущиеДанные.Роль = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = ?(Элементы.Роли.ТекущиеДанные = Неопределено, Неопределено, Элементы.Роли.ТекущиеДанные.Роль);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораРолей", Новый Структура("ТекущаяСтрока", НачальноеЗначение), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Элементы.Роли.ТекущиеДанные.СинонимРоли, "?") > 0 Тогда
		НайденныеСтроки = ПереименованныеРоли.НайтиСтроки(Новый Структура ("СтароеИмяРоли", Элементы.Роли.ТекущиеДанные.Роль));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Строка = ПереименованныеРоли.Добавить();
		КонецЕсли;
		Строка.СтароеИмяРоли = Элементы.Роли.ТекущиеДанные.Роль;
		Строка.НовоеИмяРоли  = ВыбранноеЗначение;
	КонецЕсли;
	
	Элементы.Роли.ТекущиеДанные.Роль        = ВыбранноеЗначение;
	Элементы.Роли.ТекущиеДанные.СинонимРоли = СписокВыбораРолей.НайтиПоЗначению(Элементы.Роли.ТекущиеДанные.Роль).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораРолей(Текст);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаРолейПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаРолей.ТекущиеДанные;
	
	НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
	
	Если СтрокаТаблицы.Пометка Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Объект.Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	ИначеЕсли НайденныеРоли.Количество() > 0 Тогда
		Объект.Роли.Удалить(НайденныеРоли[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	
	Элементы.ОтображениеРолей.ТекущаяСтраница = ?(ПоказатьТолькоВыбранныеРоли, Элементы.ТолькоВыбранныеРоли, Элементы.СредиВсехВыбранныеРоли);
	ТекущийЭлемент = ?(ПоказатьТолькоВыбранныеРоли, Элементы.Роли, Элементы.ТаблицаРолей);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СнятьФлажкиНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаПриИзменении(Элемент)
	
	ТребуетсяОбновитьГруппыДоступаПрофиля = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПередУдалением(Элемент, Отказ)
	
	ЗначенияДоступа.Очистить();
	
	ТекущийВидДоступа = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВидДоступаПриИзменении(Элемент)
	
	Если ВидыДоступаИспользуемыеВсегда.НайтиПоЗначению(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) <> Неопределено Тогда
		Предупреждение(СтрЗаменить(НСтр("ru = 'Вид доступа ""%1"" не требуется выбирать.
		                                      |По нему ограничение всегда выполняется.'"), "%1", Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа));
		Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = Неопределено;
	КонецЕсли;
	
	ПриИзмененииТекущегоВидаДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ТекущиеДанные.Предустановленный = Элементы.ВидыДоступа.ТекущиеДанные.Использование = "Предустановленный";
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен    = Элементы.ВидыДоступа.ТекущиеДанные.Использование = "Вначале все разрешены";
	
	ПриИзмененииТекущегоВидаДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	ТребуетсяОбновитьГруппыДоступаПрофиля = Истина;
	
	Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа))[0].ЗначенияЗаданы = ЗначенияДоступа.Количество() <> 0;
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступа Цикл
		Строка.НомерСтроки = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерСтроки = ЗначенияДоступа.Количество();
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВыбранТипЗначенияДоступа(ТекущиеТипыЗначенийДоступа) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки = ТекущийТипЗначенияДоступа <> Неопределено
	                                       И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Новый Структура("ВыборГруппПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		НачальноеЗначение = Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа;
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", Новый Структура("ВыборГруппВнешнихПользователей, ТекущаяСтрока", Истина, НачальноеЗначение), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = УправлениеДоступом.СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст, , ТекущийВидДоступа = ВидДоступаВнешниеПользователи, ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = УправлениеДоступом.СформироватьДанныеВыбораЗначенияДоступа(Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции формы
//

&НаСервере
Процедура ОбновитьПереименованныеРоли()
	
	УправлениеДоступом.ОбновитьПереименованныеРоли(РеквизитФормыВЗначение("ПереименованныеРоли"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияВидовИЗначенийДоступа(Отказ)
	
	// Проверка незаполненных и повторяющихся видов доступа.
	НомерСтрокиВидовДоступа = Объект.ВидыДоступа.Количество()-1;
	Пока НЕ Отказ И НомерСтрокиВидовДоступа >= 0 Цикл
		
		ТекущаяСтрокаВидовДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидовДоступа);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаВидовДоступа.ВидДоступа) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вид доступа не заполнен!'"),
			                                                  ,
			                                                  "Объект.ВидыДоступа[" + Формат(НомерСтрокиВидовДоступа, "ЧГ=0") + "].ВидДоступа",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Вид доступа повторяется!'"),
			                                                  ,
			                                                  "Объект.ВидыДоступа[" + Формат(НомерСтрокиВидовДоступа, "ЧГ=0") + "].ВидДоступа",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		// Проверка незаполненных и повторяющихся видов доступа.
		ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа));
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НЕ Отказ И НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение не заполнено!'"),
				                                                  ,
				                                                  "ЗначенияДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Возврат;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа, ЗначениеДоступа", ТекущаяСтрокаВидовДоступа.ВидДоступа, ТекущаяСтрока.ЗначениеДоступа));
			Если НайденныеЗначения.Количество() > 1 Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидовДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение повторяется!'"),
				                                                  ,
				                                                  "ЗначенияДоступа[" + Формат(НомерСтроки, "ЧГ=0") + "].ЗначениеДоступа",
				                                                  ,
				                                                  Отказ);
				Возврат;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидовДоступа = НомерСтрокиВидовДоступа - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоВидаДоступа()
	
	ЗначенияЗадаются = Ложь;
	
	ТекущиеДанные = Элементы.ВидыДоступа.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПоместитьЗаполнитьДанные(ТекущиеДанные.ВидДоступа);
		
		Если ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(ТекущиеДанные.ВидДоступа) = Неопределено Тогда
			ЗначенияЗадаются = ТекущиеДанные.Предустановленный;
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = ?(ЗначенияЗадаются, Элементы.ПредустановленныйВидДоступа, Элементы.ОбычныйВидДоступа);
		Иначе
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ВидДоступаЧерезПраваПоЗначениямДоступа;
		КонецЕсли;
		ОбновитьНадписьВидДоступа(ЗначенияЗадаются);
	КонецЕсли;
	
	Если НЕ ЗначенияЗадаются Тогда
		ЗначенияДоступа.Очистить();
		Если ТекущиеДанные <> Неопределено Тогда
			 ТекущиеДанные.ЗначенияЗаданы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	Элементы.ЗначенияДоступа.КоманднаяПанель.ПодчиненныеЭлементы.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	Элементы.ЗначениеДоступа.ЦветТекстаЗаголовка = ?(ЗначенияЗадаются, Новый Цвет, Новый Цвет(167, 144, 79));
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьНадписьВидДоступа(ЗначенияЗадаются = Истина)
	
	НадписьВидДоступа = Строка(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) + " " +
	                    ?(ЗначенияЗадаются,
	                      ?(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = ВидДоступаПользователи,
	                        НСтр("ru = '(список разрешенных, текущий пользователь всегда разрешен)'"),
	                        ?(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = ВидДоступаВнешниеПользователи,
	                          НСтр("ru = '(список разрешенных, текущий внешний пользователь всегда разрешен)'"),
	                          НСтр("ru = '(список разрешенных)'")
	                         )
	                       ),
	                    "" );
	
КонецФункции

&НаКлиенте
Процедура ПоместитьЗаполнитьДанные(НовыйВидДоступа)
	
	Если ЗначениеЗаполнено(ТекущийВидДоступа) Тогда
		
		Отбор = Новый Структура("ВидДоступа", ТекущийВидДоступа);
		
		НайденныеСтроки = Объект.ВидыДоступа.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ТекущийТипЗначенияДоступа = ТекущийТипЗначенияДоступа;
		КонецЕсли;
		
		// Установка значений и групп старого вида доступа.
		СтрокиУдалить = Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
		Для каждого СтрокаУдалить Из СтрокиУдалить Цикл
			Объект.ЗначенияДоступа.Удалить(Объект.ЗначенияДоступа.Индекс(СтрокаУдалить));
		КонецЦикла;
		Для каждого Строка Из ЗначенияДоступа Цикл
			НоваяСтрока = Объект.ЗначенияДоступа.Добавить();
			НоваяСтрока.ВидДоступа      = ТекущийВидДоступа;
			НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияДоступа.Очистить();
	ТекущийТипЗначенияДоступа = Неопределено;
	Если ЗначениеЗаполнено(НовыйВидДоступа) Тогда
		
		Отбор = Новый Структура("ВидДоступа", НовыйВидДоступа);
		
		ОписаниеВидаДоступа = Объект.ВидыДоступа.НайтиСтроки(Отбор)[0];
		ТекущийТипЗначенияДоступа = ОписаниеВидаДоступа.ТекущийТипЗначенияДоступа;
		
		// Получение значений и групп значений нового вида доступа.
		ТекущийНомер = 1;
		СтрокиТЧ = Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			НоваяСтрока = ЗначенияДоступа.Добавить();
			НоваяСтрока.ЗначениеДоступа = СтрокаТЧ.ЗначениеДоступа;
			НоваяСтрока.НомерСтроки = ТекущийНомер;
			ТекущийНомер = ТекущийНомер + 1;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийВидДоступа = НовыйВидДоступа;
	Элементы.ЗначенияДоступа.Доступность = ЗначениеЗаполнено(ТекущийВидДоступа);
	
	ОписаниеВидаДоступа = Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа));
	ТекущийТипЗначенияДоступа  = ?(ОписаниеВидаДоступа.Количество() = 0, Неопределено, ОписаниеВидаДоступа[0].ТекущийТипЗначенияДоступа);
	ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	Для каждого ОписаниеТипаВидаДоступа Из ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ТекущийВидДоступа)) Цикл
		ТекущиеТипыЗначенийДоступа.Добавить(ОписаниеТипаВидаДоступа.ТипЗначенияДоступа, ОписаниеТипаВидаДоступа.ПредставлениеТипа);
	КонецЦикла;
	Если ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'"));
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ВыбранТипЗначенияДоступа(Знач ТипыЗначенияДоступа)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТипыЗначенияДоступа[0].Значение;
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() > 0 Тогда
		
		Если ТипыЗначенияДоступа.Количество() = 2 Тогда
		
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
			
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ВнешнийПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элемент = ТипыЗначенияДоступа.ВыбратьЭлемент(НСтр("ru = 'Выбор типа данных'"), ТипыЗначенияДоступа[0]);
		Если Элемент <> Неопределено Тогда
			ТекущийТипЗначенияДоступа = Элемент.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСвойстваВидовДоступаВФорме()
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		// Установка наличия заданных значений по видам доступа.
		Строка.ЗначенияЗаданы = Объект.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", Строка.ВидДоступа)).Количество() <> 0;
		Если Строка.Предустановленный Тогда
			Строка.Использование = "Предустановленный";
		Иначе
			Строка.Использование = ?(Строка.ДоступРазрешен, "Вначале все разрешены", "Вначале все запрещены");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция ТекстВопросаОбновитьГруппыДоступаПрофиля()
	
	Возврат  НСтр("ru = 'Обновить группы доступа, использующие этот профиль?
	                    |
	                    |1. Удалить лишние виды доступа и заданные для них значения доступа.
	                    |
	                    |2. Добавить недостающие виды доступа.'");
КонецФункции

//** Для работы интерфейса ролей

&НаСервере
Процедура УстановитьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Истина;
		
		НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() = 0 Тогда
			Строка = Объект.Роли.Добавить();
			Строка.Роль = СтрокаТаблицы.Имя;
			Строка.СинонимРоли = СтрокаТаблицы.Синоним;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиНаСервере()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Ложь;
		
		НайденныеРоли = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя));
		Если НайденныеРоли.Количество() > 0 Тогда
			Объект.Роли.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранныеРоли(ВыбранныеРоли)
	
	Для каждого Значение Из ВыбранныеРоли Цикл
	
		ЭлементСписка = СписокВыбораРолей.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			
			Если Объект.Роли.НайтиСтроки(Новый Структура("Роль", Значение)).Количество() = 0 Тогда
				
				Строка = Объект.Роли.Добавить();
				Строка.Роль        = ЭлементСписка.Значение;
				Строка.СинонимРоли = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПометитьРолиПоСписку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСинонимыТабличнойЧастиРоли()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	
	Для каждого Строка Из Объект.Роли Цикл
		
		НайденнаяСтрока = ВсеРоли.Найти(Строка.Роль, "Имя");
		Строка.СинонимРоли = ?(НайденнаяСтрока = Неопределено, "? " + Строка.Роль, НайденнаяСтрока.Синоним);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбораИТаблицуРолей()
	
	ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
	ВсеРоли.Сортировать("Синоним");
	
	Для каждого Строка Из ВсеРоли Цикл
		// Заполнение списка выбора
		СписокВыбораРолей.Добавить(Строка.Имя, Строка.Синоним);
		// Заполнение таблицы ролей
		СтрокаТаблицы = ТаблицаРолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей)
	
	Элементы.Роли.ТолькоПросмотр         = ТолькоПросмотрРолей;
	Элементы.ТаблицаРолей.ТолькоПросмотр = ТолькоПросмотрРолей;
	
	Элементы.РолиПодобрать.Доступность                = НЕ ТолькоПросмотрРолей;
	Элементы.КонтекстноеМенюРолиПодобрать.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
	Элементы.ТаблицаРолейСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьРолиПоСписку()
	
	Для каждого СтрокаТаблицы Из ТаблицаРолей Цикл
		
		СтрокаТаблицы.Пометка = Объект.Роли.НайтиСтроки(Новый Структура("Роль", СтрокаТаблицы.Имя)).Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеВыбораРолей(Текст)
	
	Список = СписокВыбораРолей.Скопировать();
	
	НомерЭлемента = Список.Количество()-1;
	Пока НомерЭлемента >= 0 Цикл
		Если ВРег(Лев(Список[НомерЭлемента].Представление, СтрДлина(Текст))) <> ВРег(Текст) Тогда
			Список.Удалить(НомерЭлемента);
		КонецЕсли;
		НомерЭлемента = НомерЭлемента - 1;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияСпискаРолей(Отказ)
	
	// Проверка незаполненных и повторяющихся ролей.
	НомерСтроки = Объект.Роли.Количество()-1;
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
	
		ТекущаяСтрока = Объект.Роли.Получить(НомерСтроки);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СинонимРоли) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Роль не заполнена!'"),
			                                                  ,
			                                                  "Объект.Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Объект.Роли.НайтиСтроки(Новый Структура("Роль", ТекущаяСтрока.Роль));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Роль повторяется!'"),
			                                                  ,
			                                                  "Объект.Роли[" + Формат(НомерСтроки, "ЧГ=0") + "].СинонимРоли",
			                                                  ,
			                                                  Отказ);
			Возврат;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры












