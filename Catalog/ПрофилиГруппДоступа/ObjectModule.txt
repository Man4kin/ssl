
// Обработчик ПередЗаписью обновляет табличную часть ТаблицыРолей в соответствии с составом ролей.
// Перед обновлением, обработчик проверяет наличие ролей в конфигурации и
// исключает из списка роль "Полные права".
//
Процедура ПередЗаписью(Отказ)
	
	// Заполнение множества возможных пустых ссылок, используемых как типы ссылок.
	Если Ссылка = Справочники.ПрофилиГруппДоступа.Администратор Тогда
		ТипыСсылок.Загрузить(УправлениеДоступомСерверПовтИсп.ТипыСсылок());
	ИначеЕсли ТипыСсылок.Количество() <> 0 Тогда
		ТипыСсылок.Очистить();
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		Если Ссылка = Справочники.ПрофилиГруппДоступа.Администратор Тогда
			ТаблицыРолей.Очистить();
		Иначе
			УправлениеДоступом.ЗаполнитьТаблицыРолейПрофиляГруппДоступа(ЭтотОбъект);
		КонецЕсли;
		
		// Проверка наличия ролей в конфигурации.
		НомерСтроки = Роли.Количество() - 1;
		Пока НомерСтроки >= 0 Цикл
			Если Метаданные.Роли.Найти(Роли[НомерСтроки].Роль) = Неопределено Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Управление доступом.Роль не найдена в метаданных'"),
				                         УровеньЖурналаРегистрации.Ошибка, , ,
				                         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                              НСтр("ru= 'При записи профиля групп доступа <%1> роль <%2> не найдена в метаданных!'"),
				                              Ссылка,
				                              Роли[НомерСтроки].Роль),
				                         РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				Если НЕ ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
					ДополнительныеСвойства.Вставить("ЕстьОшибки");
				КонецЕсли;
			ИначеЕсли ВРег(Роли[НомерСтроки].Роль) = ВРег("ПолныеПрава") И
			          Ссылка <> Справочники.ПрофилиГруппДоступа.Администратор Тогда
				Роли.Удалить(НомерСтроки);
			КонецЕсли;
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		// Удаление всегда используемых видов доступа.
		ВидыДоступаИспользуемыеВсегда = УправлениеДоступом.СвойстваВидаДоступа().НайтиСтроки(Новый Структура("ВидДоступаИспользуетсяВсегда", Истина));
		Для каждого СвойстваВидаДоступа Из ВидыДоступаИспользуемыеВсегда Цикл
			Для каждого Строка ИЗ ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", СвойстваВидаДоступа.ВидДоступа)) Цикл
				ВидыДоступа.Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
		
		Если НЕ ДополнительныеСвойства.Свойство("НеОбновлятьРеквизитПоставляемыйПрофильИзменен") Тогда
			Если Ссылка = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				ПоставляемыйПрофильИзменен = Ложь;
			Иначе
				ПоставляемыйПрофильИзменен = УправлениеДоступом.ПоставляемыйПрофильИзменен(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриЗаписи обновляет
// - РегистрСведений.ТаблицыГруппДоступа;
// - роли пользователей групп доступа с текущим профилем.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ДополнительныеСвойства.Свойство("ОбновитьГруппыДоступаПрофиля") Тогда
			УправлениеДоступом.ОбновитьГруппыДоступаПрофиля(Ссылка, Ложь);
		КонецЕсли;
		
		// Обновление таблиц и значений групп доступа.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Профиль = &Профиль
		|	И (НЕ ГруппыДоступа.ЭтоГруппа)");
		Запрос.УстановитьПараметр("Профиль", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УправлениеДоступом.ОбновитьТаблицыГруппДоступа(Выборка.Ссылка);
			УправлениеДоступом.ЗаписатьЗначенияГруппДоступа(Выборка.Ссылка);
		КонецЦикла;
		
		Если НЕ ДополнительныеСвойства.Свойство("НеОбновлятьРолиПользователей") Тогда
			// Обновление ролей пользователей.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиИГруппыПользователей.ЗначениеДоступа КАК Пользователь
			|ИЗ
			|	РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ПО (ПользователиИГруппыПользователей.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи)))
			|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
			|			И ПользователиИГруппыПользователей.ГруппаДоступа = ГруппыДоступаПользователи.Пользователь
			|			И (ГруппыДоступаПользователи.Ссылка.Профиль = &Профиль)
			|			И (ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.Пользователи)
			|				ИЛИ ТИПЗНАЧЕНИЯ(ПользователиИГруппыПользователей.ЗначениеДоступа) = ТИП(Справочник.ВнешниеПользователи))");
			Запрос.УстановитьПараметр("Профиль", Ссылка);
			ПользователиПрофиля = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
			
			ЕстьОшибки = Ложь;
			УправлениеДоступом.ОбновитьРолиПользователей(ПользователиПрофиля, ЕстьОшибки);
			Если ЕстьОшибки И НЕ ДополнительныеСвойства.Свойство("ЕстьОшибки") Тогда
				ДополнительныеСвойства.Вставить("ЕстьОшибки");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

